{
    "version": 3,
    "deployment": {
        "manifest": {
            "time": "2021-12-31T13:42:06.143678-07:00",
            "magic": "34eac5a46ba0685dc481b55fbfd5127dc254ac41a1dabeb9c93da788146e79af",
            "version": "v3.21.0"
        },
        "secrets_providers": {
            "type": "service",
            "state": {
                "url": "https://api.pulumi.com",
                "owner": "jakeatomic",
                "project": "cluster-resources",
                "stack": "dev"
            }
        },
        "resources": [
            {
                "urn": "urn:pulumi:dev::cluster-resources::pulumi:pulumi:Stack::cluster-resources-dev",
                "custom": false,
                "type": "pulumi:pulumi:Stack",
                "outputs": {
                    "certificateID": "cert-b1cba98",
                    "certificateName": "cert-b1cba98",
                    "certificateUUID": "b516cb94-730f-4134-b5bb-5736915d0c35",
                    "certificateUrn": "urn:pulumi:dev::cluster-resources::digitalocean:index/certificate:Certificate::cert"
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "custom": false,
                "type": "kubernetes:yaml:ConfigFile",
                "parent": "urn:pulumi:dev::cluster-resources::pulumi:pulumi:Stack::cluster-resources-dev"
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart::traefik",
                "custom": false,
                "type": "kubernetes:helm.sh/v3:Chart",
                "outputs": {
                    "resources": {
                        "apiextensions.k8s.io/v1/CustomResourceDefinition::ingressroutes.traefik.containo.us": {
                            "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                            "id": "ingressroutes.traefik.containo.us",
                            "packageVersion": "",
                            "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::ingressroutes.traefik.containo.us"
                        },
                        "apiextensions.k8s.io/v1/CustomResourceDefinition::ingressroutetcps.traefik.containo.us": {
                            "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                            "id": "ingressroutetcps.traefik.containo.us",
                            "packageVersion": "",
                            "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::ingressroutetcps.traefik.containo.us"
                        },
                        "apiextensions.k8s.io/v1/CustomResourceDefinition::ingressrouteudps.traefik.containo.us": {
                            "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                            "id": "ingressrouteudps.traefik.containo.us",
                            "packageVersion": "",
                            "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::ingressrouteudps.traefik.containo.us"
                        },
                        "apiextensions.k8s.io/v1/CustomResourceDefinition::middlewares.traefik.containo.us": {
                            "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                            "id": "middlewares.traefik.containo.us",
                            "packageVersion": "",
                            "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::middlewares.traefik.containo.us"
                        },
                        "apiextensions.k8s.io/v1/CustomResourceDefinition::middlewaretcps.traefik.containo.us": {
                            "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                            "id": "middlewaretcps.traefik.containo.us",
                            "packageVersion": "",
                            "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::middlewaretcps.traefik.containo.us"
                        },
                        "apiextensions.k8s.io/v1/CustomResourceDefinition::serverstransports.traefik.containo.us": {
                            "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                            "id": "serverstransports.traefik.containo.us",
                            "packageVersion": "",
                            "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::serverstransports.traefik.containo.us"
                        },
                        "apiextensions.k8s.io/v1/CustomResourceDefinition::tlsoptions.traefik.containo.us": {
                            "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                            "id": "tlsoptions.traefik.containo.us",
                            "packageVersion": "",
                            "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::tlsoptions.traefik.containo.us"
                        },
                        "apiextensions.k8s.io/v1/CustomResourceDefinition::tlsstores.traefik.containo.us": {
                            "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                            "id": "tlsstores.traefik.containo.us",
                            "packageVersion": "",
                            "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::tlsstores.traefik.containo.us"
                        },
                        "apiextensions.k8s.io/v1/CustomResourceDefinition::traefikservices.traefik.containo.us": {
                            "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                            "id": "traefikservices.traefik.containo.us",
                            "packageVersion": "",
                            "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::traefikservices.traefik.containo.us"
                        },
                        "apps/v1/Deployment::networking/traefik": {
                            "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                            "id": "networking/traefik",
                            "packageVersion": "",
                            "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apps/v1:Deployment::networking/traefik"
                        },
                        "rbac.authorization.k8s.io/v1/ClusterRole::traefik": {
                            "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                            "id": "traefik",
                            "packageVersion": "",
                            "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::traefik"
                        },
                        "rbac.authorization.k8s.io/v1/ClusterRoleBinding::traefik": {
                            "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                            "id": "traefik",
                            "packageVersion": "",
                            "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::traefik"
                        },
                        "traefik.containo.us/v1alpha1/IngressRoute::networking/traefik-dashboard": {
                            "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                            "id": "networking/traefik-dashboard",
                            "packageVersion": "",
                            "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:traefik.containo.us/v1alpha1:IngressRoute::networking/traefik-dashboard"
                        },
                        "v1/Service::traefik": {
                            "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                            "id": "default/traefik",
                            "packageVersion": "",
                            "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:core/v1:Service::traefik"
                        },
                        "v1/ServiceAccount::networking/traefik": {
                            "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                            "id": "networking/traefik",
                            "packageVersion": "",
                            "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:core/v1:ServiceAccount::networking/traefik"
                        }
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::pulumi:pulumi:Stack::cluster-resources-dev",
                "aliases": [
                    "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v2:Chart::traefik"
                ]
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default",
                "custom": true,
                "id": "6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "type": "pulumi:providers:kubernetes",
                "inputs": {
                    "version": "3.12.1"
                },
                "outputs": {
                    "version": "3.12.1"
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:core/v1:Namespace::networking",
                "custom": true,
                "id": "networking",
                "type": "kubernetes:core/v1:Namespace",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Namespace",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "networking"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Namespace",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "networking"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Namespace",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"networking\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:39Z",
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "kubernetes.io/metadata.name": "networking"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:kubernetes.io/metadata.name": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:39Z"
                            }
                        ],
                        "name": "networking",
                        "resourceVersion": "105452",
                        "uid": "20a8fbac-e88f-410b-98ba-b8da6450b28e"
                    },
                    "spec": {
                        "finalizers": [
                            "kubernetes"
                        ]
                    },
                    "status": {
                        "phase": "Active"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::pulumi:pulumi:Stack::cluster-resources-dev",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::pulumi:providers:digitalocean::default",
                "custom": true,
                "id": "0bc20902-3f78-4b61-8f45-9509413ad1dd",
                "type": "pulumi:providers:digitalocean",
                "inputs": {
                    "token": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAJRqluoimGZwApgSGrwxNYe7m8rB1FXW6cUwVx7q8BdHrvGlkWgC+yTjIw8+Vw+gE+YmUNzVz/plj4XIN6NdTez3ILiH4ZvOeBxrQbR9k3QTFIgDsXBFHZoXf6SsQ7o="
                    },
                    "version": "4.10.0"
                },
                "outputs": {
                    "token": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAOgU5Jz0UJZ+6WxwEkKn3eaELRf6BnPnZXoDw2rOKX7p6VGdmvieprn4ZgilThUOwBDXI60xgzhcU4nsHj7ytbD4tLpSA+qmthVrCnZvEZUSGSLTHCHSqN+Zoiq5Zas="
                    },
                    "version": "4.10.0"
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:core/v1:Namespace::argocd",
                "custom": true,
                "id": "argocd",
                "type": "kubernetes:core/v1:Namespace",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Namespace",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "argocd"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Namespace",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "argocd"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Namespace",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"argocd\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:39Z",
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "kubernetes.io/metadata.name": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:kubernetes.io/metadata.name": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:39Z"
                            }
                        ],
                        "name": "argocd",
                        "resourceVersion": "105459",
                        "uid": "bfe45717-05e6-4670-97b5-29411f7561cd"
                    },
                    "spec": {
                        "finalizers": [
                            "kubernetes"
                        ]
                    },
                    "status": {
                        "phase": "Active"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::pulumi:pulumi:Stack::cluster-resources-dev",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:ServiceAccount::argocd/argocd-dex-server",
                "custom": true,
                "id": "argocd/argocd-dex-server",
                "type": "kubernetes:core/v1:ServiceAccount",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "dex-server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-dex-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-dex-server",
                        "namespace": "argocd"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ServiceAccount",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "dex-server",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-dex-server",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-dex-server",
                            "namespace": "argocd"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"dex-server\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-dex-server\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-dex-server\",\"namespace\":\"argocd\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:41Z",
                        "labels": {
                            "app.kubernetes.io/component": "dex-server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-dex-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:secrets": {
                                        ".": {},
                                        "k:{\"name\":\"argocd-dex-server-token-9hmm9\"}": {
                                            ".": {},
                                            "f:name": {}
                                        }
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:41Z"
                            },
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:41Z"
                            }
                        ],
                        "name": "argocd-dex-server",
                        "namespace": "argocd",
                        "resourceVersion": "105483",
                        "uid": "df86098f-a41b-469a-908e-d05c6b5eab2e"
                    },
                    "secrets": [
                        {
                            "name": "argocd-dex-server-token-9hmm9"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::argocd/argocd-application-controller",
                "custom": true,
                "id": "argocd/argocd-application-controller",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "application-controller",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-application-controller",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-application-controller",
                        "namespace": "argocd"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "argocd-application-controller"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "argocd-application-controller"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "application-controller",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-application-controller",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-application-controller",
                            "namespace": "argocd"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "argocd-application-controller"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "argocd-application-controller"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"application-controller\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-application-controller\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-application-controller\",\"namespace\":\"argocd\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"argocd-application-controller\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"argocd-application-controller\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:44Z",
                        "labels": {
                            "app.kubernetes.io/component": "application-controller",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-application-controller",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:44Z"
                            }
                        ],
                        "name": "argocd-application-controller",
                        "namespace": "argocd",
                        "resourceVersion": "105519",
                        "uid": "e46f0c7c-b25e-4158-b742-c830a7837f44"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "argocd-application-controller"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "argocd-application-controller"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:ServiceAccount::argocd/argocd-application-controller",
                "custom": true,
                "id": "argocd/argocd-application-controller",
                "type": "kubernetes:core/v1:ServiceAccount",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "application-controller",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-application-controller",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-application-controller",
                        "namespace": "argocd"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ServiceAccount",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "application-controller",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-application-controller",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-application-controller",
                            "namespace": "argocd"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"application-controller\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-application-controller\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-application-controller\",\"namespace\":\"argocd\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:40Z",
                        "labels": {
                            "app.kubernetes.io/component": "application-controller",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-application-controller",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:secrets": {
                                        ".": {},
                                        "k:{\"name\":\"argocd-application-controller-token-2bc5r\"}": {
                                            ".": {},
                                            "f:name": {}
                                        }
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:40Z"
                            },
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:40Z"
                            }
                        ],
                        "name": "argocd-application-controller",
                        "namespace": "argocd",
                        "resourceVersion": "105473",
                        "uid": "7ee57546-a2b5-421d-8dbc-7381bccb7185"
                    },
                    "secrets": [
                        {
                            "name": "argocd-application-controller-token-2bc5r"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::argocd/argocd-dex-server",
                "custom": true,
                "id": "argocd/argocd-dex-server",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "dex-server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-dex-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-dex-server",
                        "namespace": "argocd"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "argocd-dex-server"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "argocd-dex-server"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "dex-server",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-dex-server",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-dex-server",
                            "namespace": "argocd"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "argocd-dex-server"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "argocd-dex-server"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"dex-server\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-dex-server\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-dex-server\",\"namespace\":\"argocd\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"argocd-dex-server\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"argocd-dex-server\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:40Z",
                        "labels": {
                            "app.kubernetes.io/component": "dex-server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-dex-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:40Z"
                            }
                        ],
                        "name": "argocd-dex-server",
                        "namespace": "argocd",
                        "resourceVersion": "105477",
                        "uid": "ed4db33c-9109-48ac-91b5-5dc646365f41"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "argocd-dex-server"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "argocd-dex-server"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:ServiceAccount::argocd/argocd-redis",
                "custom": true,
                "id": "argocd/argocd-redis",
                "type": "kubernetes:core/v1:ServiceAccount",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-redis",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-redis",
                        "namespace": "argocd"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ServiceAccount",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "redis",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-redis",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-redis",
                            "namespace": "argocd"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"redis\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-redis\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-redis\",\"namespace\":\"argocd\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:40Z",
                        "labels": {
                            "app.kubernetes.io/component": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-redis",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:secrets": {
                                        ".": {},
                                        "k:{\"name\":\"argocd-redis-token-vnnx8\"}": {
                                            ".": {},
                                            "f:name": {}
                                        }
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:40Z"
                            },
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:40Z"
                            }
                        ],
                        "name": "argocd-redis",
                        "namespace": "argocd",
                        "resourceVersion": "105476",
                        "uid": "ff7fca63-efbd-4fa5-9433-246ceeacf9c1"
                    },
                    "secrets": [
                        {
                            "name": "argocd-redis-token-vnnx8"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:Role::argocd/argocd-server",
                "custom": true,
                "id": "argocd/argocd-server",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:Role",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-server",
                        "namespace": "argocd"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets",
                                "configmaps"
                            ],
                            "verbs": [
                                "create",
                                "get",
                                "list",
                                "watch",
                                "update",
                                "patch",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                "argoproj.io"
                            ],
                            "resources": [
                                "applications",
                                "appprojects"
                            ],
                            "verbs": [
                                "create",
                                "get",
                                "list",
                                "watch",
                                "update",
                                "delete",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "list"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "Role",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "server",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-server",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-server",
                            "namespace": "argocd"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "secrets",
                                    "configmaps"
                                ],
                                "verbs": [
                                    "create",
                                    "get",
                                    "list",
                                    "watch",
                                    "update",
                                    "patch",
                                    "delete"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "argoproj.io"
                                ],
                                "resources": [
                                    "applications",
                                    "appprojects"
                                ],
                                "verbs": [
                                    "create",
                                    "get",
                                    "list",
                                    "watch",
                                    "update",
                                    "delete",
                                    "patch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "events"
                                ],
                                "verbs": [
                                    "create",
                                    "list"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"Role\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"server\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-server\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-server\",\"namespace\":\"argocd\"},\"rules\":[{\"apiGroups\":[\"\"],\"resources\":[\"secrets\",\"configmaps\"],\"verbs\":[\"create\",\"get\",\"list\",\"watch\",\"update\",\"patch\",\"delete\"]},{\"apiGroups\":[\"argoproj.io\"],\"resources\":[\"applications\",\"appprojects\"],\"verbs\":[\"create\",\"get\",\"list\",\"watch\",\"update\",\"delete\",\"patch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"events\"],\"verbs\":[\"create\",\"list\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:39Z",
                        "labels": {
                            "app.kubernetes.io/component": "server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:39Z"
                            }
                        ],
                        "name": "argocd-server",
                        "namespace": "argocd",
                        "resourceVersion": "105465",
                        "uid": "e667b2a9-7e93-4469-ab4d-583e0c8932ba"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets",
                                "configmaps"
                            ],
                            "verbs": [
                                "create",
                                "get",
                                "list",
                                "watch",
                                "update",
                                "patch",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                "argoproj.io"
                            ],
                            "resources": [
                                "applications",
                                "appprojects"
                            ],
                            "verbs": [
                                "create",
                                "get",
                                "list",
                                "watch",
                                "update",
                                "delete",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "list"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:ServiceAccount::argocd/argocd-server",
                "custom": true,
                "id": "argocd/argocd-server",
                "type": "kubernetes:core/v1:ServiceAccount",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-server",
                        "namespace": "argocd"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ServiceAccount",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "server",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-server",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-server",
                            "namespace": "argocd"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"server\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-server\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-server\",\"namespace\":\"argocd\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:42Z",
                        "labels": {
                            "app.kubernetes.io/component": "server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:secrets": {
                                        ".": {},
                                        "k:{\"name\":\"argocd-server-token-6pz2d\"}": {
                                            ".": {},
                                            "f:name": {}
                                        }
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:42Z"
                            },
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:42Z"
                            }
                        ],
                        "name": "argocd-server",
                        "namespace": "argocd",
                        "resourceVersion": "105489",
                        "uid": "91922235-0be0-4f8b-96e5-50c43c86b9c3"
                    },
                    "secrets": [
                        {
                            "name": "argocd-server-token-6pz2d"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::argocd/argocd-redis",
                "custom": true,
                "id": "argocd/argocd-redis",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-redis",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-redis",
                        "namespace": "argocd"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "argocd-redis"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "argocd-redis"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "redis",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-redis",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-redis",
                            "namespace": "argocd"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "argocd-redis"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "argocd-redis"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"redis\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-redis\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-redis\",\"namespace\":\"argocd\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"argocd-redis\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"argocd-redis\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:43Z",
                        "labels": {
                            "app.kubernetes.io/component": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-redis",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:43Z"
                            }
                        ],
                        "name": "argocd-redis",
                        "namespace": "argocd",
                        "resourceVersion": "105503",
                        "uid": "72da6690-9b62-465f-8b6e-62d5fec454cc"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "argocd-redis"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "argocd-redis"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:Role::argocd/argocd-dex-server",
                "custom": true,
                "id": "argocd/argocd-dex-server",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:Role",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "dex-server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-dex-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-dex-server",
                        "namespace": "argocd"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets",
                                "configmaps"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "Role",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "dex-server",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-dex-server",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-dex-server",
                            "namespace": "argocd"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "secrets",
                                    "configmaps"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"Role\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"dex-server\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-dex-server\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-dex-server\",\"namespace\":\"argocd\"},\"rules\":[{\"apiGroups\":[\"\"],\"resources\":[\"secrets\",\"configmaps\"],\"verbs\":[\"get\",\"list\",\"watch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:39Z",
                        "labels": {
                            "app.kubernetes.io/component": "dex-server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-dex-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:39Z"
                            }
                        ],
                        "name": "argocd-dex-server",
                        "namespace": "argocd",
                        "resourceVersion": "105467",
                        "uid": "066cce54-cd11-434e-826b-d0263e28a28f"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets",
                                "configmaps"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:ConfigMap::argocd/argocd-cmd-params-cm",
                "custom": true,
                "id": "argocd/argocd-cmd-params-cm",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-cmd-params-cm",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-cmd-params-cm",
                        "namespace": "argocd"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-cmd-params-cm",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-cmd-params-cm",
                            "namespace": "argocd"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-cmd-params-cm\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-cmd-params-cm\",\"namespace\":\"argocd\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:42Z",
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-cmd-params-cm",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:42Z"
                            }
                        ],
                        "name": "argocd-cmd-params-cm",
                        "namespace": "argocd",
                        "resourceVersion": "105485",
                        "uid": "440fcd94-9c85-4ab9-a272-245713443664"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::argocd/argocd-application-controller",
                "custom": true,
                "id": "argocd-application-controller",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "application-controller",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-application-controller",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-application-controller",
                        "namespace": "argocd"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "*"
                            ],
                            "resources": [
                                "*"
                            ],
                            "verbs": [
                                "*"
                            ]
                        },
                        {
                            "nonResourceURLs": [
                                "*"
                            ],
                            "verbs": [
                                "*"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "application-controller",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-application-controller",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-application-controller",
                            "namespace": "argocd"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "*"
                                ],
                                "resources": [
                                    "*"
                                ],
                                "verbs": [
                                    "*"
                                ]
                            },
                            {
                                "nonResourceURLs": [
                                    "*"
                                ],
                                "verbs": [
                                    "*"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"application-controller\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-application-controller\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-application-controller\",\"namespace\":\"argocd\"},\"rules\":[{\"apiGroups\":[\"*\"],\"resources\":[\"*\"],\"verbs\":[\"*\"]},{\"nonResourceURLs\":[\"*\"],\"verbs\":[\"*\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:43Z",
                        "labels": {
                            "app.kubernetes.io/component": "application-controller",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-application-controller",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:43Z"
                            }
                        ],
                        "name": "argocd-application-controller",
                        "resourceVersion": "105504",
                        "uid": "dd30d8b5-aace-4f90-9663-71b8de0f1d08"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "*"
                            ],
                            "resources": [
                                "*"
                            ],
                            "verbs": [
                                "*"
                            ]
                        },
                        {
                            "nonResourceURLs": [
                                "*"
                            ],
                            "verbs": [
                                "*"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:Role::argocd/argocd-application-controller",
                "custom": true,
                "id": "argocd/argocd-application-controller",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:Role",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "application-controller",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-application-controller",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-application-controller",
                        "namespace": "argocd"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets",
                                "configmaps"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "argoproj.io"
                            ],
                            "resources": [
                                "applications",
                                "appprojects"
                            ],
                            "verbs": [
                                "create",
                                "get",
                                "list",
                                "watch",
                                "update",
                                "patch",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "list"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "Role",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "application-controller",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-application-controller",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-application-controller",
                            "namespace": "argocd"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "secrets",
                                    "configmaps"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "argoproj.io"
                                ],
                                "resources": [
                                    "applications",
                                    "appprojects"
                                ],
                                "verbs": [
                                    "create",
                                    "get",
                                    "list",
                                    "watch",
                                    "update",
                                    "patch",
                                    "delete"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "events"
                                ],
                                "verbs": [
                                    "create",
                                    "list"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"Role\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"application-controller\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-application-controller\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-application-controller\",\"namespace\":\"argocd\"},\"rules\":[{\"apiGroups\":[\"\"],\"resources\":[\"secrets\",\"configmaps\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"argoproj.io\"],\"resources\":[\"applications\",\"appprojects\"],\"verbs\":[\"create\",\"get\",\"list\",\"watch\",\"update\",\"patch\",\"delete\"]},{\"apiGroups\":[\"\"],\"resources\":[\"events\"],\"verbs\":[\"create\",\"list\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:42Z",
                        "labels": {
                            "app.kubernetes.io/component": "application-controller",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-application-controller",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:42Z"
                            }
                        ],
                        "name": "argocd-application-controller",
                        "namespace": "argocd",
                        "resourceVersion": "105486",
                        "uid": "8777df2c-74e9-4e59-8bd4-36c3f6159477"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets",
                                "configmaps"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "argoproj.io"
                            ],
                            "resources": [
                                "applications",
                                "appprojects"
                            ],
                            "verbs": [
                                "create",
                                "get",
                                "list",
                                "watch",
                                "update",
                                "patch",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "list"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:ConfigMap::argocd/argocd-gpg-keys-cm",
                "custom": true,
                "id": "argocd/argocd-gpg-keys-cm",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-gpg-keys-cm",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-gpg-keys-cm",
                        "namespace": "argocd"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-gpg-keys-cm",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-gpg-keys-cm",
                            "namespace": "argocd"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-gpg-keys-cm\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-gpg-keys-cm\",\"namespace\":\"argocd\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:43Z",
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-gpg-keys-cm",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:43Z"
                            }
                        ],
                        "name": "argocd-gpg-keys-cm",
                        "namespace": "argocd",
                        "resourceVersion": "105498",
                        "uid": "2f01a3f0-1a00-4cd1-87c0-248ee0f02e89"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::argocd/argocd-server",
                "custom": true,
                "id": "argocd-server",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-server",
                        "namespace": "argocd"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "argocd-server"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "argocd-server",
                            "namespace": "argocd"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "server",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-server",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-server",
                            "namespace": "argocd"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "argocd-server"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "argocd-server",
                                "namespace": "argocd"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"server\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-server\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-server\",\"namespace\":\"argocd\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"argocd-server\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"argocd-server\",\"namespace\":\"argocd\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:40Z",
                        "labels": {
                            "app.kubernetes.io/component": "server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:40Z"
                            }
                        ],
                        "name": "argocd-server",
                        "resourceVersion": "105470",
                        "uid": "ee9ccf2f-f042-499b-bc0c-a86f2ae2408e"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "argocd-server"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "argocd-server",
                            "namespace": "argocd"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::argocd/argocd-server",
                "custom": true,
                "id": "argocd-server",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-server",
                        "namespace": "argocd"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "*"
                            ],
                            "resources": [
                                "*"
                            ],
                            "verbs": [
                                "delete",
                                "get",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "list"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "pods",
                                "pods/log"
                            ],
                            "verbs": [
                                "get"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "server",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-server",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-server",
                            "namespace": "argocd"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "*"
                                ],
                                "resources": [
                                    "*"
                                ],
                                "verbs": [
                                    "delete",
                                    "get",
                                    "patch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "events"
                                ],
                                "verbs": [
                                    "list"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "pods",
                                    "pods/log"
                                ],
                                "verbs": [
                                    "get"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"server\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-server\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-server\",\"namespace\":\"argocd\"},\"rules\":[{\"apiGroups\":[\"*\"],\"resources\":[\"*\"],\"verbs\":[\"delete\",\"get\",\"patch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"events\"],\"verbs\":[\"list\"]},{\"apiGroups\":[\"\"],\"resources\":[\"pods\",\"pods/log\"],\"verbs\":[\"get\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:39Z",
                        "labels": {
                            "app.kubernetes.io/component": "server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:39Z"
                            }
                        ],
                        "name": "argocd-server",
                        "resourceVersion": "105469",
                        "uid": "d27efb23-84bb-4189-b3b4-6e7633fddea9"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "*"
                            ],
                            "resources": [
                                "*"
                            ],
                            "verbs": [
                                "delete",
                                "get",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "list"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "pods",
                                "pods/log"
                            ],
                            "verbs": [
                                "get"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::argocd/argocd-application-controller",
                "custom": true,
                "id": "argocd-application-controller",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "application-controller",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-application-controller",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-application-controller",
                        "namespace": "argocd"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "argocd-application-controller"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "argocd-application-controller",
                            "namespace": "argocd"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "application-controller",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-application-controller",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-application-controller",
                            "namespace": "argocd"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "argocd-application-controller"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "argocd-application-controller",
                                "namespace": "argocd"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"application-controller\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-application-controller\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-application-controller\",\"namespace\":\"argocd\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"argocd-application-controller\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"argocd-application-controller\",\"namespace\":\"argocd\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:39Z",
                        "labels": {
                            "app.kubernetes.io/component": "application-controller",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-application-controller",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:39Z"
                            }
                        ],
                        "name": "argocd-application-controller",
                        "resourceVersion": "105468",
                        "uid": "d4592c67-75ca-4258-962d-eb7bc331df2a"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "argocd-application-controller"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "argocd-application-controller",
                            "namespace": "argocd"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::argocd/argocd-server",
                "custom": true,
                "id": "argocd/argocd-server",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-server",
                        "namespace": "argocd"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "argocd-server"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "argocd-server"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "server",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-server",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-server",
                            "namespace": "argocd"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "argocd-server"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "argocd-server"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"server\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-server\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-server\",\"namespace\":\"argocd\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"argocd-server\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"argocd-server\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:41Z",
                        "labels": {
                            "app.kubernetes.io/component": "server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:41Z"
                            }
                        ],
                        "name": "argocd-server",
                        "namespace": "argocd",
                        "resourceVersion": "105484",
                        "uid": "9a2f6bb5-2814-457c-92a4-e79870592a61"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "argocd-server"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "argocd-server"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:Service::argocd/argocd-repo-server",
                "custom": true,
                "id": "argocd/argocd-repo-server",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "repo-server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-repo-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-repo-server",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "server",
                                "port": 8081,
                                "protocol": "TCP",
                                "targetPort": 8081
                            },
                            {
                                "name": "metrics",
                                "port": 8084,
                                "protocol": "TCP",
                                "targetPort": 8084
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/name": "argocd-repo-server"
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "repo-server",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-repo-server",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-repo-server",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "server",
                                    "port": 8081,
                                    "protocol": "TCP",
                                    "targetPort": 8081
                                },
                                {
                                    "name": "metrics",
                                    "port": 8084,
                                    "protocol": "TCP",
                                    "targetPort": 8084
                                }
                            ],
                            "selector": {
                                "app.kubernetes.io/name": "argocd-repo-server"
                            }
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"repo-server\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-repo-server\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-repo-server\",\"namespace\":\"argocd\"},\"spec\":{\"ports\":[{\"name\":\"server\",\"port\":8081,\"protocol\":\"TCP\",\"targetPort\":8081},{\"name\":\"metrics\",\"port\":8084,\"protocol\":\"TCP\",\"targetPort\":8084}],\"selector\":{\"app.kubernetes.io/name\":\"argocd-repo-server\"}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:42Z",
                        "labels": {
                            "app.kubernetes.io/component": "repo-server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-repo-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"port\":8081,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            },
                                            "k:{\"port\":8084,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            }
                                        },
                                        "f:selector": {
                                            ".": {},
                                            "f:app.kubernetes.io/name": {}
                                        },
                                        "f:sessionAffinity": {},
                                        "f:type": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:42Z"
                            }
                        ],
                        "name": "argocd-repo-server",
                        "namespace": "argocd",
                        "resourceVersion": "105491",
                        "uid": "7ee340b4-2d79-4efb-a614-60463f303e08"
                    },
                    "spec": {
                        "clusterIP": "10.245.90.71",
                        "clusterIPs": [
                            "10.245.90.71"
                        ],
                        "ipFamilies": [
                            "IPv4"
                        ],
                        "ipFamilyPolicy": "SingleStack",
                        "ports": [
                            {
                                "name": "server",
                                "port": 8081,
                                "protocol": "TCP",
                                "targetPort": 8081
                            },
                            {
                                "name": "metrics",
                                "port": 8084,
                                "protocol": "TCP",
                                "targetPort": 8084
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/name": "argocd-repo-server"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:ConfigMap::argocd/argocd-cm",
                "custom": true,
                "id": "argocd/argocd-cm",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-cm",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-cm",
                        "namespace": "argocd"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-cm",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-cm",
                            "namespace": "argocd"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-cm\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-cm\",\"namespace\":\"argocd\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:41Z",
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-cm",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:41Z"
                            }
                        ],
                        "name": "argocd-cm",
                        "namespace": "argocd",
                        "resourceVersion": "105480",
                        "uid": "39a1fa0f-b11a-4511-9bd1-98c8c3c5e0da"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:ConfigMap::argocd/argocd-rbac-cm",
                "custom": true,
                "id": "argocd/argocd-rbac-cm",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-rbac-cm",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-rbac-cm",
                        "namespace": "argocd"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-rbac-cm",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-rbac-cm",
                            "namespace": "argocd"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-rbac-cm\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-rbac-cm\",\"namespace\":\"argocd\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:39Z",
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-rbac-cm",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:39Z"
                            }
                        ],
                        "name": "argocd-rbac-cm",
                        "namespace": "argocd",
                        "resourceVersion": "105464",
                        "uid": "fdb06a4d-359d-4359-8e14-921a0aa26fc4"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:Secret::argocd/argocd-secret",
                "custom": true,
                "id": "argocd/argocd-secret",
                "type": "kubernetes:core/v1:Secret",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Secret",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-secret",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-secret",
                        "namespace": "argocd"
                    },
                    "type": "Opaque"
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Secret",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-secret",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-secret",
                            "namespace": "argocd"
                        },
                        "type": "Opaque"
                    },
                    "apiVersion": "v1",
                    "data": {
                        "admin.password": "JDJhJDEwJGMydzdraFQycWs3U1k3aDZsYVRCdC5OWDNqN29yVTRwQWZJVEd4cmYzdzlZYWJQcERQV3V5",
                        "admin.passwordMtime": "MjAyMS0xMi0xOVQwMDoxMDo1MVo=",
                        "server.secretkey": "SjJtdFhqK1k5MlB1eVVCSlVhamxJY2t2YXFXOC9YNFc1a20zMFNmSkV0RT0=",
                        "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZekNDQWt1Z0F3SUJBZ0lSQUo2SzF3ZzFVNjZsVkhWUzdqdVJxWjB3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQ2hNSFFYSm5ieUJEUkRBZUZ3MHlNVEV5TVRrd01ERXdOVEZhRncweU1qRXlNVGt3TURFdwpOVEZhTUJJeEVEQU9CZ05WQkFvVEIwRnlaMjhnUTBRd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFEZHVuRnJmdjJIV3ExTnpITk51KzA0ZXNIMmNobWI4VEdrTmY4TlFKSGxZaU81MGRVSWM4bjEKbk5oQWJTdDNwbk5WRlJiOWhnQ0J6dFIrb1hTZ2JrZ04vcXpqUS84djg1NCswZno0K0ErUlRZOUpLbDJ2MGQzcgpjelU3MjdxbkVGOXlIMEs0S2pMYkVPcW5IMFJBTjdOcEZ1NG52Vlk5dS96Y0dFUldEUnZPV0o3RnIvajdMT2xoCnhJQnlPQ0lpUUxMWCtNZUtzNjcraGROVDg5QytndnVoakRGQWVacjdFOUVDc3BYR1A3bnZyUDFIeUlXeEw0UUgKbm5rYjV4a1hpdmtBSC9CZHd2czYzalBtMUptYyt6UUs0S1o4QVlESVJMSVFTOFcxNzNrL1dWck1JSThzNG1NKwpkaFA2enN5RXBFeXNycFhrYzYzQ1Rxa0VPRXJJemp6UkFnTUJBQUdqZ2JNd2diQXdEZ1lEVlIwUEFRSC9CQVFECkFnV2dNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd01CTUF3R0ExVWRFd0VCL3dRQ01BQXdld1lEVlIwUkJIUXcKY29JSmJHOWpZV3hvYjNOMGdnMWhjbWR2WTJRdGMyVnlkbVZ5Z2hSaGNtZHZZMlF0YzJWeWRtVnlMbUZ5WjI5agpaSUlZWVhKbmIyTmtMWE5sY25abGNpNWhjbWR2WTJRdWMzWmpnaVpoY21kdlkyUXRjMlZ5ZG1WeUxtRnlaMjlqClpDNXpkbU11WTJ4MWMzUmxjaTVzYjJOaGJEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFUbll5ZWZhSzFUUFkKdDBqalpYakZ6am5CSHFSUElXTGRERzBjcW5RUDg1RGpKZE82Skp6TmNKNW15UlVNOWFwSnphMEt3a1NhcDBlUwo5ZlhEUEY5d0pyT1VQbFpFZUw0SnVTWTdZeFFZc0tvSzRrOFRNZWZmZmk1UktuWFdxUUVRYlkrMW8wOTJnODR3CmFpbHpLS1hzaTAvcTU4QW4zaHAxM2VWSVZubkZOZkduOGdneG5Wam5laVJKSUhQQWNwZkVpL2gvVHVnY1QzREUKZXUrM3VIaWxSV3ZCNmJ2M1k2eGo4OEVsalFCeno1QkNTcUxXdzRnN3NiamsrM1ljSnZCZVF6dGNPcDdreng5ZwpzNWh1eXJaOVRRNjNocnkyQVVoai9LTGV2WFBhakZEbG1aM1dQU1ZlcG9vQm1zL3QzQzVnQXdIRlFjSlM5UC83CnFvSkZJQ0lTQ2c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                        "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBM2JweGEzNzloMXF0VGN4elRidnRPSHJCOW5JWm0vRXhwRFgvRFVDUjVXSWp1ZEhWCkNIUEo5WnpZUUcwcmQ2WnpWUlVXL1lZQWdjN1VmcUYwb0c1SURmNnM0MFAvTC9PZVB0SDgrUGdQa1UyUFNTcGQKcjlIZDYzTTFPOXU2cHhCZmNoOUN1Q295MnhEcXB4OUVRRGV6YVJidUo3MVdQYnY4M0JoRVZnMGJ6bGlleGEvNAoreXpwWWNTQWNqZ2lJa0N5MS9qSGlyT3Uvb1hUVS9QUXZvTDdvWXd4UUhtYSt4UFJBcktWeGorNTc2ejlSOGlGCnNTK0VCNTU1RytjWkY0cjVBQi93WGNMN090NHo1dFNablBzMEN1Q21mQUdBeUVTeUVFdkZ0ZTk1UDFsYXpDQ1AKTE9KalBuWVQrczdNaEtSTXJLNlY1SE90d2s2cEJEaEt5TTQ4MFFJREFRQUJBb0lCQUc5cEdVaHNQTFBnU2loSApUTUNJWnYvMEhyWFlTeW5pSFpGbldFcXVZU0NqR1ZSckxPSGNYR1EvZFNHYU9UY2J1ZVBNZndyUVpEelZVa3gyCmtBVjBwRnZ6MWFjMEtXdE11L3pRd28zUEJ2TjV4ejk2UEN6MkJNNGp5MkhTWEkxSldzd2JEUWxBbXVFY05PdlkKZUJEVWJCK24xKzY3NGpPTzI5VXpsRkt3cjRJVWNaYUd1OExaaFNRb2Q3OHNlaUNIdXEwaDI3dXJ6RXVnWFVKUQoySzVIdkRIWUZ6SHdwOHhlSHk5VENpTU5aRzVLakY1Z0hYRmltTng3bnFJdmZPQXo3dWxoVzVFWFhUNkxqR1JhCnpBS2pZSTRmcUF4TjI1UXFzYzhKdVpOUk5CM241d3poM0hYUzRPTE5HczNnRzRrZ1RJMHF0N1BRY2RpSDF2YkQKRmttYzV1a0NnWUVBKytZUXIxcjVwSktMOEppaGhWS3IycytmOGlqYWJaaUdyL05nYW96MmJUSmdOdUhLV1dTTApVWHAvYTk3alkrZXdFTk1MVFhoRThjTkNSWmpoQk5udXhQckpac3hzcTVvNUoxT3lZcXBnbGtVdlhmNDhCUGIyCmdlT3FzTGtUODkwcnprMFhsUEwvNGY1cDJJSndnM0dXaVhNM2dlQW5kdXRzeVhGOFFqYnRKWnNDZ1lFQTRWYWcKQ0J2MEZNeWdvRlZ4YVVyRk9HU3E2OEozNkt0eDdGVGgvTHpEaCtoR0l5NzM4aDBTWWVySjhDaERJdlZDcXQzbgpKNE1RcFpYQU9xNVhBNjh1MkRMc1RoK3NUaDY3NGMxMkJDZ0VQYlJHNXNtQjBiQ1RFUXlPbXlUN0xuSDlmMllLCnlVQi9kUy8wbmlXRlVOcTlYWjhmNEtSQmVSME5zU0JRdmtLSEpBTUNnWUFTRVoydXhtclQyRU03ZmVkUUplNzMKNGg3S0F3NHdBRm5nOHljK1hXQXIwd285eFpKN09SQVpSeDB1d3EweTlHS1h3bHUwTWVWWUpqWnh3WmFhZjN0MgpHN3NvcVk4OSsvRVBsaHhjb1hZT01XWkZhc0FwWndHbHJZd0g0eTdBTm1RM0J5YWk0NDloU1p1VUVUODYzb0g2CjJBM3FQZ2IycThxQTVLZ1NJOWg4OHdLQmdGSWlrUkpqbmdRMjBoV2ZEMGVoeVdGVTBEZy9HaFhrNkJHTW54TFEKZXpUK3BSSU4vTEp6aGsvS2xQREV2RFB4MGVzV0Z6dC91b0dncEFDL3ExZmNjdWE3S1FjUTVHMVZKb2FYclh5MgpXVlZrY0xPT241TWZHWHdOWjYyRlBVa2dvNVhjUy9JdllFWUd4Tk1nT2dmT3MxZDh1TkhaRFVSb0lxVjljZkRuCnJ2cWhBb0dCQUpRM2ROVDNiRkRzVGdJNEZqSURVc1JVZW5YcXJFcGtqVGxzZXhsUkdzN3NNZG03NWxFRnQ0UTQKUjdGTVRhSUJ6VjZhS3BZdHhoRW9DWGp2WC9NSU4wMWwrVUtmZDUyUTRYUThWSy9odG5VS0pxcFpRTmcybDg1RApSa0hJV01HYUNLejVMTnhXTWRxUkFWSmVnbkErQlBTVjJrZ2FBL3dNZS9VT1R3WElWUDZ0Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
                    },
                    "kind": "Secret",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Secret\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-secret\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-secret\",\"namespace\":\"argocd\"},\"type\":\"Opaque\"}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:45Z",
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-secret",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:type": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:45Z"
                            },
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:data": {
                                        ".": {},
                                        "f:admin.password": {},
                                        "f:admin.passwordMtime": {},
                                        "f:server.secretkey": {},
                                        "f:tls.crt": {},
                                        "f:tls.key": {}
                                    }
                                },
                                "manager": "argocd-server",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:51Z"
                            }
                        ],
                        "name": "argocd-secret",
                        "namespace": "argocd",
                        "resourceVersion": "105696",
                        "uid": "f4fa1752-9f3a-44f1-8afd-d6fad6c1dc7f"
                    },
                    "type": "Opaque"
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "type": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:ConfigMap::argocd/argocd-ssh-known-hosts-cm",
                "custom": true,
                "id": "argocd/argocd-ssh-known-hosts-cm",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "ssh_known_hosts": "bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\ngitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\ngitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\ngitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\nssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\nvs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\ngithub.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\ngithub.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-ssh-known-hosts-cm",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-ssh-known-hosts-cm",
                        "namespace": "argocd"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "ssh_known_hosts": "bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\ngitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\ngitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\ngitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\nssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\nvs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\ngithub.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\ngithub.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl"
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-ssh-known-hosts-cm",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-ssh-known-hosts-cm",
                            "namespace": "argocd"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "ssh_known_hosts": "bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\ngitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\ngitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\ngitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\nssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\nvs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\ngithub.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\ngithub.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"ssh_known_hosts\":\"bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\\ngitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\\ngitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\\ngitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\\nssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\nvs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\ngithub.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\\ngithub.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-ssh-known-hosts-cm\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-ssh-known-hosts-cm\",\"namespace\":\"argocd\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:39Z",
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-ssh-known-hosts-cm",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:data": {
                                        ".": {},
                                        "f:ssh_known_hosts": {}
                                    },
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:39Z"
                            }
                        ],
                        "name": "argocd-ssh-known-hosts-cm",
                        "namespace": "argocd",
                        "resourceVersion": "105466",
                        "uid": "7fa71ff5-5772-451d-ba17-cd8d13d77b9f"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "data": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:ConfigMap::argocd/argocd-tls-certs-cm",
                "custom": true,
                "id": "argocd/argocd-tls-certs-cm",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-tls-certs-cm",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-tls-certs-cm",
                        "namespace": "argocd"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-tls-certs-cm",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-tls-certs-cm",
                            "namespace": "argocd"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-tls-certs-cm\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-tls-certs-cm\",\"namespace\":\"argocd\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:46Z",
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-tls-certs-cm",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:46Z"
                            }
                        ],
                        "name": "argocd-tls-certs-cm",
                        "namespace": "argocd",
                        "resourceVersion": "105570",
                        "uid": "84098a27-370f-418f-a74a-2b41891cf6aa"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:Service::argocd/argocd-server",
                "custom": true,
                "id": "argocd/argocd-server",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-server",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "http",
                                "port": 80,
                                "protocol": "TCP",
                                "targetPort": 8080
                            },
                            {
                                "name": "https",
                                "port": 443,
                                "protocol": "TCP",
                                "targetPort": 8080
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/name": "argocd-server"
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "server",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-server",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-server",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "http",
                                    "port": 80,
                                    "protocol": "TCP",
                                    "targetPort": 8080
                                },
                                {
                                    "name": "https",
                                    "port": 443,
                                    "protocol": "TCP",
                                    "targetPort": 8080
                                }
                            ],
                            "selector": {
                                "app.kubernetes.io/name": "argocd-server"
                            }
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"server\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-server\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-server\",\"namespace\":\"argocd\"},\"spec\":{\"ports\":[{\"name\":\"http\",\"port\":80,\"protocol\":\"TCP\",\"targetPort\":8080},{\"name\":\"https\",\"port\":443,\"protocol\":\"TCP\",\"targetPort\":8080}],\"selector\":{\"app.kubernetes.io/name\":\"argocd-server\"}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:47Z",
                        "labels": {
                            "app.kubernetes.io/component": "server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"port\":443,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            },
                                            "k:{\"port\":80,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            }
                                        },
                                        "f:selector": {
                                            ".": {},
                                            "f:app.kubernetes.io/name": {}
                                        },
                                        "f:sessionAffinity": {},
                                        "f:type": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:47Z"
                            }
                        ],
                        "name": "argocd-server",
                        "namespace": "argocd",
                        "resourceVersion": "105585",
                        "uid": "c334c0ec-4855-47de-a51e-1d2a2b6f6586"
                    },
                    "spec": {
                        "clusterIP": "10.245.39.70",
                        "clusterIPs": [
                            "10.245.39.70"
                        ],
                        "ipFamilies": [
                            "IPv4"
                        ],
                        "ipFamilyPolicy": "SingleStack",
                        "ports": [
                            {
                                "name": "http",
                                "port": 80,
                                "protocol": "TCP",
                                "targetPort": 8080
                            },
                            {
                                "name": "https",
                                "port": 443,
                                "protocol": "TCP",
                                "targetPort": 8080
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/name": "argocd-server"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:Service::argocd/argocd-redis",
                "custom": true,
                "id": "argocd/argocd-redis",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-redis",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-redis",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "tcp-redis",
                                "port": 6379,
                                "targetPort": 6379
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/name": "argocd-redis"
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "redis",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-redis",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-redis",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "tcp-redis",
                                    "port": 6379,
                                    "targetPort": 6379
                                }
                            ],
                            "selector": {
                                "app.kubernetes.io/name": "argocd-redis"
                            }
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"redis\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-redis\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-redis\",\"namespace\":\"argocd\"},\"spec\":{\"ports\":[{\"name\":\"tcp-redis\",\"port\":6379,\"targetPort\":6379}],\"selector\":{\"app.kubernetes.io/name\":\"argocd-redis\"}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:46Z",
                        "labels": {
                            "app.kubernetes.io/component": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-redis",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"port\":6379,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            }
                                        },
                                        "f:selector": {
                                            ".": {},
                                            "f:app.kubernetes.io/name": {}
                                        },
                                        "f:sessionAffinity": {},
                                        "f:type": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:46Z"
                            }
                        ],
                        "name": "argocd-redis",
                        "namespace": "argocd",
                        "resourceVersion": "105567",
                        "uid": "7066ec8e-60cd-45c8-9847-5744799ff0cf"
                    },
                    "spec": {
                        "clusterIP": "10.245.233.14",
                        "clusterIPs": [
                            "10.245.233.14"
                        ],
                        "ipFamilies": [
                            "IPv4"
                        ],
                        "ipFamilyPolicy": "SingleStack",
                        "ports": [
                            {
                                "name": "tcp-redis",
                                "port": 6379,
                                "protocol": "TCP",
                                "targetPort": 6379
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/name": "argocd-redis"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:Service::argocd/argocd-server-metrics",
                "custom": true,
                "id": "argocd/argocd-server-metrics",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-server-metrics",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-server-metrics",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "metrics",
                                "port": 8083,
                                "protocol": "TCP",
                                "targetPort": 8083
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/name": "argocd-server"
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "server",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-server-metrics",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-server-metrics",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "metrics",
                                    "port": 8083,
                                    "protocol": "TCP",
                                    "targetPort": 8083
                                }
                            ],
                            "selector": {
                                "app.kubernetes.io/name": "argocd-server"
                            }
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"server\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-server-metrics\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-server-metrics\",\"namespace\":\"argocd\"},\"spec\":{\"ports\":[{\"name\":\"metrics\",\"port\":8083,\"protocol\":\"TCP\",\"targetPort\":8083}],\"selector\":{\"app.kubernetes.io/name\":\"argocd-server\"}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:45Z",
                        "labels": {
                            "app.kubernetes.io/component": "server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-server-metrics",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"port\":8083,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            }
                                        },
                                        "f:selector": {
                                            ".": {},
                                            "f:app.kubernetes.io/name": {}
                                        },
                                        "f:sessionAffinity": {},
                                        "f:type": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:45Z"
                            }
                        ],
                        "name": "argocd-server-metrics",
                        "namespace": "argocd",
                        "resourceVersion": "105559",
                        "uid": "e45b0a4f-6a61-4e44-83f9-465bbe09a425"
                    },
                    "spec": {
                        "clusterIP": "10.245.130.57",
                        "clusterIPs": [
                            "10.245.130.57"
                        ],
                        "ipFamilies": [
                            "IPv4"
                        ],
                        "ipFamilyPolicy": "SingleStack",
                        "ports": [
                            {
                                "name": "metrics",
                                "port": 8083,
                                "protocol": "TCP",
                                "targetPort": 8083
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/name": "argocd-server"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:Service::argocd/argocd-metrics",
                "custom": true,
                "id": "argocd/argocd-metrics",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "metrics",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-metrics",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-metrics",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "metrics",
                                "port": 8082,
                                "protocol": "TCP",
                                "targetPort": 8082
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/name": "argocd-application-controller"
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "metrics",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-metrics",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-metrics",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "metrics",
                                    "port": 8082,
                                    "protocol": "TCP",
                                    "targetPort": 8082
                                }
                            ],
                            "selector": {
                                "app.kubernetes.io/name": "argocd-application-controller"
                            }
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"metrics\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-metrics\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-metrics\",\"namespace\":\"argocd\"},\"spec\":{\"ports\":[{\"name\":\"metrics\",\"port\":8082,\"protocol\":\"TCP\",\"targetPort\":8082}],\"selector\":{\"app.kubernetes.io/name\":\"argocd-application-controller\"}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:43Z",
                        "labels": {
                            "app.kubernetes.io/component": "metrics",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-metrics",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"port\":8082,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            }
                                        },
                                        "f:selector": {
                                            ".": {},
                                            "f:app.kubernetes.io/name": {}
                                        },
                                        "f:sessionAffinity": {},
                                        "f:type": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:43Z"
                            }
                        ],
                        "name": "argocd-metrics",
                        "namespace": "argocd",
                        "resourceVersion": "105500",
                        "uid": "1a011505-9342-4273-9610-f2f1af2d1179"
                    },
                    "spec": {
                        "clusterIP": "10.245.178.254",
                        "clusterIPs": [
                            "10.245.178.254"
                        ],
                        "ipFamilies": [
                            "IPv4"
                        ],
                        "ipFamilyPolicy": "SingleStack",
                        "ports": [
                            {
                                "name": "metrics",
                                "port": 8082,
                                "protocol": "TCP",
                                "targetPort": 8082
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/name": "argocd-application-controller"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:Service::argocd/argocd-dex-server",
                "custom": true,
                "id": "argocd/argocd-dex-server",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "dex-server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-dex-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-dex-server",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "http",
                                "port": 5556,
                                "protocol": "TCP",
                                "targetPort": 5556
                            },
                            {
                                "name": "grpc",
                                "port": 5557,
                                "protocol": "TCP",
                                "targetPort": 5557
                            },
                            {
                                "name": "metrics",
                                "port": 5558,
                                "protocol": "TCP",
                                "targetPort": 5558
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/name": "argocd-dex-server"
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "dex-server",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-dex-server",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-dex-server",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "http",
                                    "port": 5556,
                                    "protocol": "TCP",
                                    "targetPort": 5556
                                },
                                {
                                    "name": "grpc",
                                    "port": 5557,
                                    "protocol": "TCP",
                                    "targetPort": 5557
                                },
                                {
                                    "name": "metrics",
                                    "port": 5558,
                                    "protocol": "TCP",
                                    "targetPort": 5558
                                }
                            ],
                            "selector": {
                                "app.kubernetes.io/name": "argocd-dex-server"
                            }
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"dex-server\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-dex-server\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-dex-server\",\"namespace\":\"argocd\"},\"spec\":{\"ports\":[{\"name\":\"http\",\"port\":5556,\"protocol\":\"TCP\",\"targetPort\":5556},{\"name\":\"grpc\",\"port\":5557,\"protocol\":\"TCP\",\"targetPort\":5557},{\"name\":\"metrics\",\"port\":5558,\"protocol\":\"TCP\",\"targetPort\":5558}],\"selector\":{\"app.kubernetes.io/name\":\"argocd-dex-server\"}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:47Z",
                        "labels": {
                            "app.kubernetes.io/component": "dex-server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-dex-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"port\":5556,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            },
                                            "k:{\"port\":5557,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            },
                                            "k:{\"port\":5558,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            }
                                        },
                                        "f:selector": {
                                            ".": {},
                                            "f:app.kubernetes.io/name": {}
                                        },
                                        "f:sessionAffinity": {},
                                        "f:type": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:47Z"
                            }
                        ],
                        "name": "argocd-dex-server",
                        "namespace": "argocd",
                        "resourceVersion": "105577",
                        "uid": "529bd25c-ca9f-47f5-b3f8-1d092b5098ad"
                    },
                    "spec": {
                        "clusterIP": "10.245.39.18",
                        "clusterIPs": [
                            "10.245.39.18"
                        ],
                        "ipFamilies": [
                            "IPv4"
                        ],
                        "ipFamilyPolicy": "SingleStack",
                        "ports": [
                            {
                                "name": "http",
                                "port": 5556,
                                "protocol": "TCP",
                                "targetPort": 5556
                            },
                            {
                                "name": "grpc",
                                "port": 5557,
                                "protocol": "TCP",
                                "targetPort": 5557
                            },
                            {
                                "name": "metrics",
                                "port": 5558,
                                "protocol": "TCP",
                                "targetPort": 5558
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/name": "argocd-dex-server"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd-ingress",
                "custom": false,
                "type": "kubernetes:yaml:ConfigFile",
                "parent": "urn:pulumi:dev::cluster-resources::pulumi:pulumi:Stack::cluster-resources-dev"
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:networking.k8s.io/v1:NetworkPolicy::argocd/argocd-dex-server-network-policy",
                "custom": true,
                "id": "argocd/argocd-dex-server-network-policy",
                "type": "kubernetes:networking.k8s.io/v1:NetworkPolicy",
                "inputs": {
                    "apiVersion": "networking.k8s.io/v1",
                    "kind": "NetworkPolicy",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "argocd-dex-server-network-policy",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "ingress": [
                            {
                                "from": [
                                    {
                                        "podSelector": {
                                            "matchLabels": {
                                                "app.kubernetes.io/name": "argocd-server"
                                            }
                                        }
                                    }
                                ],
                                "ports": [
                                    {
                                        "port": 5556,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "port": 5557,
                                        "protocol": "TCP"
                                    }
                                ]
                            },
                            {
                                "from": [
                                    {
                                        "namespaceSelector": {}
                                    }
                                ],
                                "ports": [
                                    {
                                        "port": 5558,
                                        "protocol": "TCP"
                                    }
                                ]
                            }
                        ],
                        "podSelector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-dex-server"
                            }
                        },
                        "policyTypes": [
                            "Ingress"
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "networking.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "networking.k8s.io/v1",
                        "kind": "NetworkPolicy",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "argocd-dex-server-network-policy",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "ingress": [
                                {
                                    "from": [
                                        {
                                            "podSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/name": "argocd-server"
                                                }
                                            }
                                        }
                                    ],
                                    "ports": [
                                        {
                                            "port": 5556,
                                            "protocol": "TCP"
                                        },
                                        {
                                            "port": 5557,
                                            "protocol": "TCP"
                                        }
                                    ]
                                },
                                {
                                    "from": [
                                        {
                                            "namespaceSelector": {}
                                        }
                                    ],
                                    "ports": [
                                        {
                                            "port": 5558,
                                            "protocol": "TCP"
                                        }
                                    ]
                                }
                            ],
                            "podSelector": {
                                "matchLabels": {
                                    "app.kubernetes.io/name": "argocd-dex-server"
                                }
                            },
                            "policyTypes": [
                                "Ingress"
                            ]
                        }
                    },
                    "apiVersion": "networking.k8s.io/v1",
                    "kind": "NetworkPolicy",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"networking.k8s.io/v1\",\"kind\":\"NetworkPolicy\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"argocd-dex-server-network-policy\",\"namespace\":\"argocd\"},\"spec\":{\"ingress\":[{\"from\":[{\"podSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-server\"}}}],\"ports\":[{\"port\":5556,\"protocol\":\"TCP\"},{\"port\":5557,\"protocol\":\"TCP\"}]},{\"from\":[{\"namespaceSelector\":{}}],\"ports\":[{\"port\":5558,\"protocol\":\"TCP\"}]}],\"podSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-dex-server\"}},\"policyTypes\":[\"Ingress\"]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:48Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "networking.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:ingress": {},
                                        "f:podSelector": {},
                                        "f:policyTypes": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:48Z"
                            }
                        ],
                        "name": "argocd-dex-server-network-policy",
                        "namespace": "argocd",
                        "resourceVersion": "105597",
                        "uid": "f53e3758-19fd-491f-bf47-50acd36f716c"
                    },
                    "spec": {
                        "ingress": [
                            {
                                "from": [
                                    {
                                        "podSelector": {
                                            "matchLabels": {
                                                "app.kubernetes.io/name": "argocd-server"
                                            }
                                        }
                                    }
                                ],
                                "ports": [
                                    {
                                        "port": 5556,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "port": 5557,
                                        "protocol": "TCP"
                                    }
                                ]
                            },
                            {
                                "from": [
                                    {
                                        "namespaceSelector": {}
                                    }
                                ],
                                "ports": [
                                    {
                                        "port": 5558,
                                        "protocol": "TCP"
                                    }
                                ]
                            }
                        ],
                        "podSelector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-dex-server"
                            }
                        },
                        "policyTypes": [
                            "Ingress"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:networking.k8s.io/v1:NetworkPolicy::argocd/argocd-server-network-policy",
                "custom": true,
                "id": "argocd/argocd-server-network-policy",
                "type": "kubernetes:networking.k8s.io/v1:NetworkPolicy",
                "inputs": {
                    "apiVersion": "networking.k8s.io/v1",
                    "kind": "NetworkPolicy",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "argocd-server-network-policy",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "ingress": [
                            {}
                        ],
                        "podSelector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-server"
                            }
                        },
                        "policyTypes": [
                            "Ingress"
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "networking.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "networking.k8s.io/v1",
                        "kind": "NetworkPolicy",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "argocd-server-network-policy",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "ingress": [
                                {}
                            ],
                            "podSelector": {
                                "matchLabels": {
                                    "app.kubernetes.io/name": "argocd-server"
                                }
                            },
                            "policyTypes": [
                                "Ingress"
                            ]
                        }
                    },
                    "apiVersion": "networking.k8s.io/v1",
                    "kind": "NetworkPolicy",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"networking.k8s.io/v1\",\"kind\":\"NetworkPolicy\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"argocd-server-network-policy\",\"namespace\":\"argocd\"},\"spec\":{\"ingress\":[{}],\"podSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-server\"}},\"policyTypes\":[\"Ingress\"]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:47Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "networking.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:ingress": {},
                                        "f:podSelector": {},
                                        "f:policyTypes": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:47Z"
                            }
                        ],
                        "name": "argocd-server-network-policy",
                        "namespace": "argocd",
                        "resourceVersion": "105591",
                        "uid": "711aba99-cbef-413c-b437-73e2806d6442"
                    },
                    "spec": {
                        "ingress": [
                            {}
                        ],
                        "podSelector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-server"
                            }
                        },
                        "policyTypes": [
                            "Ingress"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::argocd/appprojects.argoproj.io",
                "custom": true,
                "id": "appprojects.argoproj.io",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "appprojects.argoproj.io",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "appprojects.argoproj.io",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "group": "argoproj.io",
                        "names": {
                            "kind": "AppProject",
                            "listKind": "AppProjectList",
                            "plural": "appprojects",
                            "shortNames": [
                                "appproj",
                                "appprojs"
                            ],
                            "singular": "appproject"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "AppProject provides a logical grouping of applications, providing controls for: * where the apps may deploy to (cluster whitelist) * what may be deployed (repository whitelist, resource whitelist/blacklist) * who can access these applications (roles, OIDC group claims bindings) * and what they can do (RBAC policies) * automation access to these roles (JWT tokens)",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "AppProjectSpec is the specification of an AppProject",
                                                "properties": {
                                                    "clusterResourceBlacklist": {
                                                        "description": "ClusterResourceBlacklist contains list of blacklisted cluster level resources",
                                                        "items": {
                                                            "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
                                                            "properties": {
                                                                "group": {
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "group",
                                                                "kind"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "clusterResourceWhitelist": {
                                                        "description": "ClusterResourceWhitelist contains list of whitelisted cluster level resources",
                                                        "items": {
                                                            "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
                                                            "properties": {
                                                                "group": {
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "group",
                                                                "kind"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "description": {
                                                        "description": "Description contains optional project description",
                                                        "type": "string"
                                                    },
                                                    "destinations": {
                                                        "description": "Destinations contains list of destinations available for deployment",
                                                        "items": {
                                                            "description": "ApplicationDestination holds information about the application's destination",
                                                            "properties": {
                                                                "name": {
                                                                    "description": "Name is an alternate way of specifying the target cluster by its symbolic name",
                                                                    "type": "string"
                                                                },
                                                                "namespace": {
                                                                    "description": "Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace",
                                                                    "type": "string"
                                                                },
                                                                "server": {
                                                                    "description": "Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "namespaceResourceBlacklist": {
                                                        "description": "NamespaceResourceBlacklist contains list of blacklisted namespace level resources",
                                                        "items": {
                                                            "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
                                                            "properties": {
                                                                "group": {
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "group",
                                                                "kind"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "namespaceResourceWhitelist": {
                                                        "description": "NamespaceResourceWhitelist contains list of whitelisted namespace level resources",
                                                        "items": {
                                                            "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
                                                            "properties": {
                                                                "group": {
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "group",
                                                                "kind"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "orphanedResources": {
                                                        "description": "OrphanedResources specifies if controller should monitor orphaned resources of apps in this project",
                                                        "properties": {
                                                            "ignore": {
                                                                "description": "Ignore contains a list of resources that are to be excluded from orphaned resources monitoring",
                                                                "items": {
                                                                    "description": "OrphanedResourceKey is a reference to a resource to be ignored from",
                                                                    "properties": {
                                                                        "group": {
                                                                            "type": "string"
                                                                        },
                                                                        "kind": {
                                                                            "type": "string"
                                                                        },
                                                                        "name": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "warn": {
                                                                "description": "Warn indicates if warning condition should be created for apps which have orphaned resources",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "roles": {
                                                        "description": "Roles are user defined RBAC roles associated with this project",
                                                        "items": {
                                                            "description": "ProjectRole represents a role that has access to a project",
                                                            "properties": {
                                                                "description": {
                                                                    "description": "Description is a description of the role",
                                                                    "type": "string"
                                                                },
                                                                "groups": {
                                                                    "description": "Groups are a list of OIDC group claims bound to this role",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "jwtTokens": {
                                                                    "description": "JWTTokens are a list of generated JWT tokens bound to this role",
                                                                    "items": {
                                                                        "description": "JWTToken holds the issuedAt and expiresAt values of a token",
                                                                        "properties": {
                                                                            "exp": {
                                                                                "format": "int64",
                                                                                "type": "integer"
                                                                            },
                                                                            "iat": {
                                                                                "format": "int64",
                                                                                "type": "integer"
                                                                            },
                                                                            "id": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "iat"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "name": {
                                                                    "description": "Name is a name for this role",
                                                                    "type": "string"
                                                                },
                                                                "policies": {
                                                                    "description": "Policies Stores a list of casbin formatted strings that define access policies for the role in the project",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "required": [
                                                                "name"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "signatureKeys": {
                                                        "description": "SignatureKeys contains a list of PGP key IDs that commits in Git must be signed with in order to be allowed for sync",
                                                        "items": {
                                                            "description": "SignatureKey is the specification of a key required to verify commit signatures with",
                                                            "properties": {
                                                                "keyID": {
                                                                    "description": "The ID of the key in hexadecimal notation",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "keyID"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "sourceRepos": {
                                                        "description": "SourceRepos contains list of repository URLs which can be used for deployment",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "syncWindows": {
                                                        "description": "SyncWindows controls when syncs can be run for apps in this project",
                                                        "items": {
                                                            "description": "SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps",
                                                            "properties": {
                                                                "applications": {
                                                                    "description": "Applications contains a list of applications that the window will apply to",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "clusters": {
                                                                    "description": "Clusters contains a list of clusters that the window will apply to",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "duration": {
                                                                    "description": "Duration is the amount of time the sync window will be open",
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "description": "Kind defines if the window allows or blocks syncs",
                                                                    "type": "string"
                                                                },
                                                                "manualSync": {
                                                                    "description": "ManualSync enables manual syncs when they would otherwise be blocked",
                                                                    "type": "boolean"
                                                                },
                                                                "namespaces": {
                                                                    "description": "Namespaces contains a list of namespaces that the window will apply to",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "schedule": {
                                                                    "description": "Schedule is the time the window will begin, specified in cron format",
                                                                    "type": "string"
                                                                },
                                                                "timeZone": {
                                                                    "description": "TimeZone of the sync that will be applied to the schedule",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "status": {
                                                "description": "AppProjectStatus contains status information for AppProject CRs",
                                                "properties": {
                                                    "jwtTokensByRole": {
                                                        "additionalProperties": {
                                                            "description": "JWTTokens represents a list of JWT tokens",
                                                            "properties": {
                                                                "items": {
                                                                    "items": {
                                                                        "description": "JWTToken holds the issuedAt and expiresAt values of a token",
                                                                        "properties": {
                                                                            "exp": {
                                                                                "format": "int64",
                                                                                "type": "integer"
                                                                            },
                                                                            "iat": {
                                                                                "format": "int64",
                                                                                "type": "integer"
                                                                            },
                                                                            "id": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "iat"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "description": "JWTTokensByRole contains a list of JWT tokens issued for a given role",
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "appprojects.argoproj.io",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "appprojects.argoproj.io",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "group": "argoproj.io",
                            "names": {
                                "kind": "AppProject",
                                "listKind": "AppProjectList",
                                "plural": "appprojects",
                                "shortNames": [
                                    "appproj",
                                    "appprojs"
                                ],
                                "singular": "appproject"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "AppProject provides a logical grouping of applications, providing controls for: * where the apps may deploy to (cluster whitelist) * what may be deployed (repository whitelist, resource whitelist/blacklist) * who can access these applications (roles, OIDC group claims bindings) * and what they can do (RBAC policies) * automation access to these roles (JWT tokens)",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "AppProjectSpec is the specification of an AppProject",
                                                    "properties": {
                                                        "clusterResourceBlacklist": {
                                                            "description": "ClusterResourceBlacklist contains list of blacklisted cluster level resources",
                                                            "items": {
                                                                "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
                                                                "properties": {
                                                                    "group": {
                                                                        "type": "string"
                                                                    },
                                                                    "kind": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "group",
                                                                    "kind"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "clusterResourceWhitelist": {
                                                            "description": "ClusterResourceWhitelist contains list of whitelisted cluster level resources",
                                                            "items": {
                                                                "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
                                                                "properties": {
                                                                    "group": {
                                                                        "type": "string"
                                                                    },
                                                                    "kind": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "group",
                                                                    "kind"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "description": {
                                                            "description": "Description contains optional project description",
                                                            "type": "string"
                                                        },
                                                        "destinations": {
                                                            "description": "Destinations contains list of destinations available for deployment",
                                                            "items": {
                                                                "description": "ApplicationDestination holds information about the application's destination",
                                                                "properties": {
                                                                    "name": {
                                                                        "description": "Name is an alternate way of specifying the target cluster by its symbolic name",
                                                                        "type": "string"
                                                                    },
                                                                    "namespace": {
                                                                        "description": "Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace",
                                                                        "type": "string"
                                                                    },
                                                                    "server": {
                                                                        "description": "Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "namespaceResourceBlacklist": {
                                                            "description": "NamespaceResourceBlacklist contains list of blacklisted namespace level resources",
                                                            "items": {
                                                                "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
                                                                "properties": {
                                                                    "group": {
                                                                        "type": "string"
                                                                    },
                                                                    "kind": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "group",
                                                                    "kind"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "namespaceResourceWhitelist": {
                                                            "description": "NamespaceResourceWhitelist contains list of whitelisted namespace level resources",
                                                            "items": {
                                                                "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
                                                                "properties": {
                                                                    "group": {
                                                                        "type": "string"
                                                                    },
                                                                    "kind": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "group",
                                                                    "kind"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "orphanedResources": {
                                                            "description": "OrphanedResources specifies if controller should monitor orphaned resources of apps in this project",
                                                            "properties": {
                                                                "ignore": {
                                                                    "description": "Ignore contains a list of resources that are to be excluded from orphaned resources monitoring",
                                                                    "items": {
                                                                        "description": "OrphanedResourceKey is a reference to a resource to be ignored from",
                                                                        "properties": {
                                                                            "group": {
                                                                                "type": "string"
                                                                            },
                                                                            "kind": {
                                                                                "type": "string"
                                                                            },
                                                                            "name": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "warn": {
                                                                    "description": "Warn indicates if warning condition should be created for apps which have orphaned resources",
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "roles": {
                                                            "description": "Roles are user defined RBAC roles associated with this project",
                                                            "items": {
                                                                "description": "ProjectRole represents a role that has access to a project",
                                                                "properties": {
                                                                    "description": {
                                                                        "description": "Description is a description of the role",
                                                                        "type": "string"
                                                                    },
                                                                    "groups": {
                                                                        "description": "Groups are a list of OIDC group claims bound to this role",
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "jwtTokens": {
                                                                        "description": "JWTTokens are a list of generated JWT tokens bound to this role",
                                                                        "items": {
                                                                            "description": "JWTToken holds the issuedAt and expiresAt values of a token",
                                                                            "properties": {
                                                                                "exp": {
                                                                                    "format": "int64",
                                                                                    "type": "integer"
                                                                                },
                                                                                "iat": {
                                                                                    "format": "int64",
                                                                                    "type": "integer"
                                                                                },
                                                                                "id": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "iat"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "name": {
                                                                        "description": "Name is a name for this role",
                                                                        "type": "string"
                                                                    },
                                                                    "policies": {
                                                                        "description": "Policies Stores a list of casbin formatted strings that define access policies for the role in the project",
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "name"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "signatureKeys": {
                                                            "description": "SignatureKeys contains a list of PGP key IDs that commits in Git must be signed with in order to be allowed for sync",
                                                            "items": {
                                                                "description": "SignatureKey is the specification of a key required to verify commit signatures with",
                                                                "properties": {
                                                                    "keyID": {
                                                                        "description": "The ID of the key in hexadecimal notation",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "keyID"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "sourceRepos": {
                                                            "description": "SourceRepos contains list of repository URLs which can be used for deployment",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "syncWindows": {
                                                            "description": "SyncWindows controls when syncs can be run for apps in this project",
                                                            "items": {
                                                                "description": "SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps",
                                                                "properties": {
                                                                    "applications": {
                                                                        "description": "Applications contains a list of applications that the window will apply to",
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "clusters": {
                                                                        "description": "Clusters contains a list of clusters that the window will apply to",
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "duration": {
                                                                        "description": "Duration is the amount of time the sync window will be open",
                                                                        "type": "string"
                                                                    },
                                                                    "kind": {
                                                                        "description": "Kind defines if the window allows or blocks syncs",
                                                                        "type": "string"
                                                                    },
                                                                    "manualSync": {
                                                                        "description": "ManualSync enables manual syncs when they would otherwise be blocked",
                                                                        "type": "boolean"
                                                                    },
                                                                    "namespaces": {
                                                                        "description": "Namespaces contains a list of namespaces that the window will apply to",
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "schedule": {
                                                                        "description": "Schedule is the time the window will begin, specified in cron format",
                                                                        "type": "string"
                                                                    },
                                                                    "timeZone": {
                                                                        "description": "TimeZone of the sync that will be applied to the schedule",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "AppProjectStatus contains status information for AppProject CRs",
                                                    "properties": {
                                                        "jwtTokensByRole": {
                                                            "additionalProperties": {
                                                                "description": "JWTTokens represents a list of JWT tokens",
                                                                "properties": {
                                                                    "items": {
                                                                        "items": {
                                                                            "description": "JWTToken holds the issuedAt and expiresAt values of a token",
                                                                            "properties": {
                                                                                "exp": {
                                                                                    "format": "int64",
                                                                                    "type": "integer"
                                                                                },
                                                                                "iat": {
                                                                                    "format": "int64",
                                                                                    "type": "integer"
                                                                                },
                                                                                "id": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "iat"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "description": "JWTTokensByRole contains a list of JWT tokens issued for a given role",
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "metadata",
                                                "spec"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "served": true,
                                    "storage": true
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"appprojects.argoproj.io\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"appprojects.argoproj.io\",\"namespace\":\"argocd\"},\"spec\":{\"group\":\"argoproj.io\",\"names\":{\"kind\":\"AppProject\",\"listKind\":\"AppProjectList\",\"plural\":\"appprojects\",\"shortNames\":[\"appproj\",\"appprojs\"],\"singular\":\"appproject\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"AppProject provides a logical grouping of applications, providing controls for: * where the apps may deploy to (cluster whitelist) * what may be deployed (repository whitelist, resource whitelist/blacklist) * who can access these applications (roles, OIDC group claims bindings) * and what they can do (RBAC policies) * automation access to these roles (JWT tokens)\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"AppProjectSpec is the specification of an AppProject\",\"properties\":{\"clusterResourceBlacklist\":{\"description\":\"ClusterResourceBlacklist contains list of blacklisted cluster level resources\",\"items\":{\"description\":\"GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types\",\"properties\":{\"group\":{\"type\":\"string\"},\"kind\":{\"type\":\"string\"}},\"required\":[\"group\",\"kind\"],\"type\":\"object\"},\"type\":\"array\"},\"clusterResourceWhitelist\":{\"description\":\"ClusterResourceWhitelist contains list of whitelisted cluster level resources\",\"items\":{\"description\":\"GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types\",\"properties\":{\"group\":{\"type\":\"string\"},\"kind\":{\"type\":\"string\"}},\"required\":[\"group\",\"kind\"],\"type\":\"object\"},\"type\":\"array\"},\"description\":{\"description\":\"Description contains optional project description\",\"type\":\"string\"},\"destinations\":{\"description\":\"Destinations contains list of destinations available for deployment\",\"items\":{\"description\":\"ApplicationDestination holds information about the application's destination\",\"properties\":{\"name\":{\"description\":\"Name is an alternate way of specifying the target cluster by its symbolic name\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace\",\"type\":\"string\"},\"server\":{\"description\":\"Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"namespaceResourceBlacklist\":{\"description\":\"NamespaceResourceBlacklist contains list of blacklisted namespace level resources\",\"items\":{\"description\":\"GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types\",\"properties\":{\"group\":{\"type\":\"string\"},\"kind\":{\"type\":\"string\"}},\"required\":[\"group\",\"kind\"],\"type\":\"object\"},\"type\":\"array\"},\"namespaceResourceWhitelist\":{\"description\":\"NamespaceResourceWhitelist contains list of whitelisted namespace level resources\",\"items\":{\"description\":\"GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types\",\"properties\":{\"group\":{\"type\":\"string\"},\"kind\":{\"type\":\"string\"}},\"required\":[\"group\",\"kind\"],\"type\":\"object\"},\"type\":\"array\"},\"orphanedResources\":{\"description\":\"OrphanedResources specifies if controller should monitor orphaned resources of apps in this project\",\"properties\":{\"ignore\":{\"description\":\"Ignore contains a list of resources that are to be excluded from orphaned resources monitoring\",\"items\":{\"description\":\"OrphanedResourceKey is a reference to a resource to be ignored from\",\"properties\":{\"group\":{\"type\":\"string\"},\"kind\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"warn\":{\"description\":\"Warn indicates if warning condition should be created for apps which have orphaned resources\",\"type\":\"boolean\"}},\"type\":\"object\"},\"roles\":{\"description\":\"Roles are user defined RBAC roles associated with this project\",\"items\":{\"description\":\"ProjectRole represents a role that has access to a project\",\"properties\":{\"description\":{\"description\":\"Description is a description of the role\",\"type\":\"string\"},\"groups\":{\"description\":\"Groups are a list of OIDC group claims bound to this role\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"jwtTokens\":{\"description\":\"JWTTokens are a list of generated JWT tokens bound to this role\",\"items\":{\"description\":\"JWTToken holds the issuedAt and expiresAt values of a token\",\"properties\":{\"exp\":{\"format\":\"int64\",\"type\":\"integer\"},\"iat\":{\"format\":\"int64\",\"type\":\"integer\"},\"id\":{\"type\":\"string\"}},\"required\":[\"iat\"],\"type\":\"object\"},\"type\":\"array\"},\"name\":{\"description\":\"Name is a name for this role\",\"type\":\"string\"},\"policies\":{\"description\":\"Policies Stores a list of casbin formatted strings that define access policies for the role in the project\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"name\"],\"type\":\"object\"},\"type\":\"array\"},\"signatureKeys\":{\"description\":\"SignatureKeys contains a list of PGP key IDs that commits in Git must be signed with in order to be allowed for sync\",\"items\":{\"description\":\"SignatureKey is the specification of a key required to verify commit signatures with\",\"properties\":{\"keyID\":{\"description\":\"The ID of the key in hexadecimal notation\",\"type\":\"string\"}},\"required\":[\"keyID\"],\"type\":\"object\"},\"type\":\"array\"},\"sourceRepos\":{\"description\":\"SourceRepos contains list of repository URLs which can be used for deployment\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"syncWindows\":{\"description\":\"SyncWindows controls when syncs can be run for apps in this project\",\"items\":{\"description\":\"SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps\",\"properties\":{\"applications\":{\"description\":\"Applications contains a list of applications that the window will apply to\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"clusters\":{\"description\":\"Clusters contains a list of clusters that the window will apply to\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"duration\":{\"description\":\"Duration is the amount of time the sync window will be open\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind defines if the window allows or blocks syncs\",\"type\":\"string\"},\"manualSync\":{\"description\":\"ManualSync enables manual syncs when they would otherwise be blocked\",\"type\":\"boolean\"},\"namespaces\":{\"description\":\"Namespaces contains a list of namespaces that the window will apply to\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"schedule\":{\"description\":\"Schedule is the time the window will begin, specified in cron format\",\"type\":\"string\"},\"timeZone\":{\"description\":\"TimeZone of the sync that will be applied to the schedule\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"status\":{\"description\":\"AppProjectStatus contains status information for AppProject CRs\",\"properties\":{\"jwtTokensByRole\":{\"additionalProperties\":{\"description\":\"JWTTokens represents a list of JWT tokens\",\"properties\":{\"items\":{\"items\":{\"description\":\"JWTToken holds the issuedAt and expiresAt values of a token\",\"properties\":{\"exp\":{\"format\":\"int64\",\"type\":\"integer\"},\"iat\":{\"format\":\"int64\",\"type\":\"integer\"},\"id\":{\"type\":\"string\"}},\"required\":[\"iat\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"description\":\"JWTTokensByRole contains a list of JWT tokens issued for a given role\",\"type\":\"object\"}},\"type\":\"object\"}},\"required\":[\"metadata\",\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true}]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:44Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "appprojects.argoproj.io",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:44Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:44Z"
                            }
                        ],
                        "name": "appprojects.argoproj.io",
                        "resourceVersion": "105531",
                        "uid": "21936edc-416a-4d4e-9e39-07d9bedeeb95"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "argoproj.io",
                        "names": {
                            "kind": "AppProject",
                            "listKind": "AppProjectList",
                            "plural": "appprojects",
                            "shortNames": [
                                "appproj",
                                "appprojs"
                            ],
                            "singular": "appproject"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "AppProject provides a logical grouping of applications, providing controls for: * where the apps may deploy to (cluster whitelist) * what may be deployed (repository whitelist, resource whitelist/blacklist) * who can access these applications (roles, OIDC group claims bindings) * and what they can do (RBAC policies) * automation access to these roles (JWT tokens)",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "AppProjectSpec is the specification of an AppProject",
                                                "properties": {
                                                    "clusterResourceBlacklist": {
                                                        "description": "ClusterResourceBlacklist contains list of blacklisted cluster level resources",
                                                        "items": {
                                                            "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
                                                            "properties": {
                                                                "group": {
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "group",
                                                                "kind"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "clusterResourceWhitelist": {
                                                        "description": "ClusterResourceWhitelist contains list of whitelisted cluster level resources",
                                                        "items": {
                                                            "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
                                                            "properties": {
                                                                "group": {
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "group",
                                                                "kind"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "description": {
                                                        "description": "Description contains optional project description",
                                                        "type": "string"
                                                    },
                                                    "destinations": {
                                                        "description": "Destinations contains list of destinations available for deployment",
                                                        "items": {
                                                            "description": "ApplicationDestination holds information about the application's destination",
                                                            "properties": {
                                                                "name": {
                                                                    "description": "Name is an alternate way of specifying the target cluster by its symbolic name",
                                                                    "type": "string"
                                                                },
                                                                "namespace": {
                                                                    "description": "Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace",
                                                                    "type": "string"
                                                                },
                                                                "server": {
                                                                    "description": "Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "namespaceResourceBlacklist": {
                                                        "description": "NamespaceResourceBlacklist contains list of blacklisted namespace level resources",
                                                        "items": {
                                                            "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
                                                            "properties": {
                                                                "group": {
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "group",
                                                                "kind"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "namespaceResourceWhitelist": {
                                                        "description": "NamespaceResourceWhitelist contains list of whitelisted namespace level resources",
                                                        "items": {
                                                            "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
                                                            "properties": {
                                                                "group": {
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "group",
                                                                "kind"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "orphanedResources": {
                                                        "description": "OrphanedResources specifies if controller should monitor orphaned resources of apps in this project",
                                                        "properties": {
                                                            "ignore": {
                                                                "description": "Ignore contains a list of resources that are to be excluded from orphaned resources monitoring",
                                                                "items": {
                                                                    "description": "OrphanedResourceKey is a reference to a resource to be ignored from",
                                                                    "properties": {
                                                                        "group": {
                                                                            "type": "string"
                                                                        },
                                                                        "kind": {
                                                                            "type": "string"
                                                                        },
                                                                        "name": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "warn": {
                                                                "description": "Warn indicates if warning condition should be created for apps which have orphaned resources",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "roles": {
                                                        "description": "Roles are user defined RBAC roles associated with this project",
                                                        "items": {
                                                            "description": "ProjectRole represents a role that has access to a project",
                                                            "properties": {
                                                                "description": {
                                                                    "description": "Description is a description of the role",
                                                                    "type": "string"
                                                                },
                                                                "groups": {
                                                                    "description": "Groups are a list of OIDC group claims bound to this role",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "jwtTokens": {
                                                                    "description": "JWTTokens are a list of generated JWT tokens bound to this role",
                                                                    "items": {
                                                                        "description": "JWTToken holds the issuedAt and expiresAt values of a token",
                                                                        "properties": {
                                                                            "exp": {
                                                                                "format": "int64",
                                                                                "type": "integer"
                                                                            },
                                                                            "iat": {
                                                                                "format": "int64",
                                                                                "type": "integer"
                                                                            },
                                                                            "id": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "iat"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "name": {
                                                                    "description": "Name is a name for this role",
                                                                    "type": "string"
                                                                },
                                                                "policies": {
                                                                    "description": "Policies Stores a list of casbin formatted strings that define access policies for the role in the project",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "required": [
                                                                "name"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "signatureKeys": {
                                                        "description": "SignatureKeys contains a list of PGP key IDs that commits in Git must be signed with in order to be allowed for sync",
                                                        "items": {
                                                            "description": "SignatureKey is the specification of a key required to verify commit signatures with",
                                                            "properties": {
                                                                "keyID": {
                                                                    "description": "The ID of the key in hexadecimal notation",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "keyID"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "sourceRepos": {
                                                        "description": "SourceRepos contains list of repository URLs which can be used for deployment",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "syncWindows": {
                                                        "description": "SyncWindows controls when syncs can be run for apps in this project",
                                                        "items": {
                                                            "description": "SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps",
                                                            "properties": {
                                                                "applications": {
                                                                    "description": "Applications contains a list of applications that the window will apply to",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "clusters": {
                                                                    "description": "Clusters contains a list of clusters that the window will apply to",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "duration": {
                                                                    "description": "Duration is the amount of time the sync window will be open",
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "description": "Kind defines if the window allows or blocks syncs",
                                                                    "type": "string"
                                                                },
                                                                "manualSync": {
                                                                    "description": "ManualSync enables manual syncs when they would otherwise be blocked",
                                                                    "type": "boolean"
                                                                },
                                                                "namespaces": {
                                                                    "description": "Namespaces contains a list of namespaces that the window will apply to",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "schedule": {
                                                                    "description": "Schedule is the time the window will begin, specified in cron format",
                                                                    "type": "string"
                                                                },
                                                                "timeZone": {
                                                                    "description": "TimeZone of the sync that will be applied to the schedule",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "status": {
                                                "description": "AppProjectStatus contains status information for AppProject CRs",
                                                "properties": {
                                                    "jwtTokensByRole": {
                                                        "additionalProperties": {
                                                            "description": "JWTTokens represents a list of JWT tokens",
                                                            "properties": {
                                                                "items": {
                                                                    "items": {
                                                                        "description": "JWTToken holds the issuedAt and expiresAt values of a token",
                                                                        "properties": {
                                                                            "exp": {
                                                                                "format": "int64",
                                                                                "type": "integer"
                                                                            },
                                                                            "iat": {
                                                                                "format": "int64",
                                                                                "type": "integer"
                                                                            },
                                                                            "id": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "iat"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "description": "JWTTokensByRole contains a list of JWT tokens issued for a given role",
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "AppProject",
                            "listKind": "AppProjectList",
                            "plural": "appprojects",
                            "shortNames": [
                                "appproj",
                                "appprojs"
                            ],
                            "singular": "appproject"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T00:10:44Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T00:10:44Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1alpha1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:networking.k8s.io/v1:NetworkPolicy::argocd/argocd-redis-network-policy",
                "custom": true,
                "id": "argocd/argocd-redis-network-policy",
                "type": "kubernetes:networking.k8s.io/v1:NetworkPolicy",
                "inputs": {
                    "apiVersion": "networking.k8s.io/v1",
                    "kind": "NetworkPolicy",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "argocd-redis-network-policy",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "ingress": [
                            {
                                "from": [
                                    {
                                        "podSelector": {
                                            "matchLabels": {
                                                "app.kubernetes.io/name": "argocd-server"
                                            }
                                        }
                                    },
                                    {
                                        "podSelector": {
                                            "matchLabels": {
                                                "app.kubernetes.io/name": "argocd-repo-server"
                                            }
                                        }
                                    },
                                    {
                                        "podSelector": {
                                            "matchLabels": {
                                                "app.kubernetes.io/name": "argocd-application-controller"
                                            }
                                        }
                                    }
                                ],
                                "ports": [
                                    {
                                        "port": 6379,
                                        "protocol": "TCP"
                                    }
                                ]
                            }
                        ],
                        "podSelector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-redis"
                            }
                        },
                        "policyTypes": [
                            "Ingress"
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "networking.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "networking.k8s.io/v1",
                        "kind": "NetworkPolicy",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "argocd-redis-network-policy",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "ingress": [
                                {
                                    "from": [
                                        {
                                            "podSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/name": "argocd-server"
                                                }
                                            }
                                        },
                                        {
                                            "podSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/name": "argocd-repo-server"
                                                }
                                            }
                                        },
                                        {
                                            "podSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/name": "argocd-application-controller"
                                                }
                                            }
                                        }
                                    ],
                                    "ports": [
                                        {
                                            "port": 6379,
                                            "protocol": "TCP"
                                        }
                                    ]
                                }
                            ],
                            "podSelector": {
                                "matchLabels": {
                                    "app.kubernetes.io/name": "argocd-redis"
                                }
                            },
                            "policyTypes": [
                                "Ingress"
                            ]
                        }
                    },
                    "apiVersion": "networking.k8s.io/v1",
                    "kind": "NetworkPolicy",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"networking.k8s.io/v1\",\"kind\":\"NetworkPolicy\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"argocd-redis-network-policy\",\"namespace\":\"argocd\"},\"spec\":{\"ingress\":[{\"from\":[{\"podSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-server\"}}},{\"podSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-repo-server\"}}},{\"podSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-application-controller\"}}}],\"ports\":[{\"port\":6379,\"protocol\":\"TCP\"}]}],\"podSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-redis\"}},\"policyTypes\":[\"Ingress\"]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:48Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "networking.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:ingress": {},
                                        "f:podSelector": {},
                                        "f:policyTypes": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:48Z"
                            }
                        ],
                        "name": "argocd-redis-network-policy",
                        "namespace": "argocd",
                        "resourceVersion": "105607",
                        "uid": "9d1ca543-9175-4e3a-8112-67ff0e37464a"
                    },
                    "spec": {
                        "ingress": [
                            {
                                "from": [
                                    {
                                        "podSelector": {
                                            "matchLabels": {
                                                "app.kubernetes.io/name": "argocd-server"
                                            }
                                        }
                                    },
                                    {
                                        "podSelector": {
                                            "matchLabels": {
                                                "app.kubernetes.io/name": "argocd-repo-server"
                                            }
                                        }
                                    },
                                    {
                                        "podSelector": {
                                            "matchLabels": {
                                                "app.kubernetes.io/name": "argocd-application-controller"
                                            }
                                        }
                                    }
                                ],
                                "ports": [
                                    {
                                        "port": 6379,
                                        "protocol": "TCP"
                                    }
                                ]
                            }
                        ],
                        "podSelector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-redis"
                            }
                        },
                        "policyTypes": [
                            "Ingress"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:apps/v1:StatefulSet::argocd/argocd-application-controller",
                "custom": true,
                "id": "argocd/argocd-application-controller",
                "type": "kubernetes:apps/v1:StatefulSet",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "StatefulSet",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "application-controller",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-application-controller",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-application-controller",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "replicas": 1,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-application-controller"
                            }
                        },
                        "serviceName": "argocd-application-controller",
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app.kubernetes.io/name": "argocd-application-controller"
                                }
                            },
                            "spec": {
                                "affinity": {
                                    "podAntiAffinity": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": [
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/name": "argocd-application-controller"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 100
                                            },
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/part-of": "argocd"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 5
                                            }
                                        ]
                                    }
                                },
                                "containers": [
                                    {
                                        "command": [
                                            "argocd-application-controller"
                                        ],
                                        "env": [
                                            {
                                                "name": "ARGOCD_RECONCILIATION_TIMEOUT",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "timeout.reconciliation",
                                                        "name": "argocd-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "repo.server",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.repo.server.timeout.seconds",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_STATUS_PROCESSORS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.status.processors",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_OPERATION_PROCESSORS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.operation.processors",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_LOGFORMAT",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.log.format",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_LOGLEVEL",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.log.level",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_METRICS_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.metrics.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_SELF_HEAL_TIMEOUT_SECONDS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.self.heal.timeout.seconds",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_PLAINTEXT",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.repo.server.plaintext",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_STRICT_TLS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.repo.server.strict.tls",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APP_STATE_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.app.state.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "REDIS_SERVER",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "redis.server",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "REDISDB",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "redis.db",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_DEFAULT_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.default.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            }
                                        ],
                                        "image": "quay.io/argoproj/argocd:v2.2.0",
                                        "imagePullPolicy": "Always",
                                        "livenessProbe": {
                                            "httpGet": {
                                                "path": "/healthz",
                                                "port": 8082
                                            },
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10
                                        },
                                        "name": "argocd-application-controller",
                                        "ports": [
                                            {
                                                "containerPort": 8082
                                            }
                                        ],
                                        "readinessProbe": {
                                            "httpGet": {
                                                "path": "/healthz",
                                                "port": 8082
                                            },
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10
                                        },
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "capabilities": {
                                                "drop": [
                                                    "all"
                                                ]
                                            },
                                            "readOnlyRootFilesystem": true,
                                            "runAsNonRoot": true
                                        },
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/app/config/controller/tls",
                                                "name": "argocd-repo-server-tls"
                                            },
                                            {
                                                "mountPath": "/home/argocd",
                                                "name": "argocd-home"
                                            }
                                        ],
                                        "workingDir": "/home/argocd"
                                    }
                                ],
                                "serviceAccountName": "argocd-application-controller",
                                "volumes": [
                                    {
                                        "emptyDir": {},
                                        "name": "argocd-home"
                                    },
                                    {
                                        "name": "argocd-repo-server-tls",
                                        "secret": {
                                            "items": [
                                                {
                                                    "key": "tls.crt",
                                                    "path": "tls.crt"
                                                },
                                                {
                                                    "key": "tls.key",
                                                    "path": "tls.key"
                                                },
                                                {
                                                    "key": "ca.crt",
                                                    "path": "ca.crt"
                                                }
                                            ],
                                            "optional": true,
                                            "secretName": "argocd-repo-server-tls"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "StatefulSet",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "application-controller",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-application-controller",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-application-controller",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "replicas": 1,
                            "selector": {
                                "matchLabels": {
                                    "app.kubernetes.io/name": "argocd-application-controller"
                                }
                            },
                            "serviceName": "argocd-application-controller",
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "app.kubernetes.io/name": "argocd-application-controller"
                                    }
                                },
                                "spec": {
                                    "affinity": {
                                        "podAntiAffinity": {
                                            "preferredDuringSchedulingIgnoredDuringExecution": [
                                                {
                                                    "podAffinityTerm": {
                                                        "labelSelector": {
                                                            "matchLabels": {
                                                                "app.kubernetes.io/name": "argocd-application-controller"
                                                            }
                                                        },
                                                        "topologyKey": "kubernetes.io/hostname"
                                                    },
                                                    "weight": 100
                                                },
                                                {
                                                    "podAffinityTerm": {
                                                        "labelSelector": {
                                                            "matchLabels": {
                                                                "app.kubernetes.io/part-of": "argocd"
                                                            }
                                                        },
                                                        "topologyKey": "kubernetes.io/hostname"
                                                    },
                                                    "weight": 5
                                                }
                                            ]
                                        }
                                    },
                                    "containers": [
                                        {
                                            "command": [
                                                "argocd-application-controller"
                                            ],
                                            "env": [
                                                {
                                                    "name": "ARGOCD_RECONCILIATION_TIMEOUT",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "timeout.reconciliation",
                                                            "name": "argocd-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "repo.server",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "controller.repo.server.timeout.seconds",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_APPLICATION_CONTROLLER_STATUS_PROCESSORS",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "controller.status.processors",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_APPLICATION_CONTROLLER_OPERATION_PROCESSORS",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "controller.operation.processors",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_APPLICATION_CONTROLLER_LOGFORMAT",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "controller.log.format",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_APPLICATION_CONTROLLER_LOGLEVEL",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "controller.log.level",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_APPLICATION_CONTROLLER_METRICS_CACHE_EXPIRATION",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "controller.metrics.cache.expiration",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_APPLICATION_CONTROLLER_SELF_HEAL_TIMEOUT_SECONDS",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "controller.self.heal.timeout.seconds",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_PLAINTEXT",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "controller.repo.server.plaintext",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_STRICT_TLS",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "controller.repo.server.strict.tls",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_APP_STATE_CACHE_EXPIRATION",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "controller.app.state.cache.expiration",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "REDIS_SERVER",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "redis.server",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "REDISDB",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "redis.db",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_DEFAULT_CACHE_EXPIRATION",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "controller.default.cache.expiration",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                }
                                            ],
                                            "image": "quay.io/argoproj/argocd:v2.2.0",
                                            "imagePullPolicy": "Always",
                                            "livenessProbe": {
                                                "httpGet": {
                                                    "path": "/healthz",
                                                    "port": 8082
                                                },
                                                "initialDelaySeconds": 5,
                                                "periodSeconds": 10
                                            },
                                            "name": "argocd-application-controller",
                                            "ports": [
                                                {
                                                    "containerPort": 8082
                                                }
                                            ],
                                            "readinessProbe": {
                                                "httpGet": {
                                                    "path": "/healthz",
                                                    "port": 8082
                                                },
                                                "initialDelaySeconds": 5,
                                                "periodSeconds": 10
                                            },
                                            "securityContext": {
                                                "allowPrivilegeEscalation": false,
                                                "capabilities": {
                                                    "drop": [
                                                        "all"
                                                    ]
                                                },
                                                "readOnlyRootFilesystem": true,
                                                "runAsNonRoot": true
                                            },
                                            "volumeMounts": [
                                                {
                                                    "mountPath": "/app/config/controller/tls",
                                                    "name": "argocd-repo-server-tls"
                                                },
                                                {
                                                    "mountPath": "/home/argocd",
                                                    "name": "argocd-home"
                                                }
                                            ],
                                            "workingDir": "/home/argocd"
                                        }
                                    ],
                                    "serviceAccountName": "argocd-application-controller",
                                    "volumes": [
                                        {
                                            "emptyDir": {},
                                            "name": "argocd-home"
                                        },
                                        {
                                            "name": "argocd-repo-server-tls",
                                            "secret": {
                                                "items": [
                                                    {
                                                        "key": "tls.crt",
                                                        "path": "tls.crt"
                                                    },
                                                    {
                                                        "key": "tls.key",
                                                        "path": "tls.key"
                                                    },
                                                    {
                                                        "key": "ca.crt",
                                                        "path": "ca.crt"
                                                    }
                                                ],
                                                "optional": true,
                                                "secretName": "argocd-repo-server-tls"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "StatefulSet",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"StatefulSet\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"application-controller\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-application-controller\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-application-controller\",\"namespace\":\"argocd\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-application-controller\"}},\"serviceName\":\"argocd-application-controller\",\"template\":{\"metadata\":{\"labels\":{\"app.kubernetes.io/name\":\"argocd-application-controller\"}},\"spec\":{\"affinity\":{\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-application-controller\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":100},{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/part-of\":\"argocd\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":5}]}},\"containers\":[{\"command\":[\"argocd-application-controller\"],\"env\":[{\"name\":\"ARGOCD_RECONCILIATION_TIMEOUT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"timeout.reconciliation\",\"name\":\"argocd-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"repo.server\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"controller.repo.server.timeout.seconds\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_STATUS_PROCESSORS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"controller.status.processors\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_OPERATION_PROCESSORS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"controller.operation.processors\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_LOGFORMAT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"controller.log.format\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_LOGLEVEL\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"controller.log.level\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_METRICS_CACHE_EXPIRATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"controller.metrics.cache.expiration\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_SELF_HEAL_TIMEOUT_SECONDS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"controller.self.heal.timeout.seconds\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_PLAINTEXT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"controller.repo.server.plaintext\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_STRICT_TLS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"controller.repo.server.strict.tls\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APP_STATE_CACHE_EXPIRATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"controller.app.state.cache.expiration\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"REDIS_SERVER\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"redis.server\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"REDISDB\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"redis.db\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_DEFAULT_CACHE_EXPIRATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"controller.default.cache.expiration\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}}],\"image\":\"quay.io/argoproj/argocd:v2.2.0\",\"imagePullPolicy\":\"Always\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":8082},\"initialDelaySeconds\":5,\"periodSeconds\":10},\"name\":\"argocd-application-controller\",\"ports\":[{\"containerPort\":8082}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":8082},\"initialDelaySeconds\":5,\"periodSeconds\":10},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"all\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true},\"volumeMounts\":[{\"mountPath\":\"/app/config/controller/tls\",\"name\":\"argocd-repo-server-tls\"},{\"mountPath\":\"/home/argocd\",\"name\":\"argocd-home\"}],\"workingDir\":\"/home/argocd\"}],\"serviceAccountName\":\"argocd-application-controller\",\"volumes\":[{\"emptyDir\":{},\"name\":\"argocd-home\"},{\"name\":\"argocd-repo-server-tls\",\"secret\":{\"items\":[{\"key\":\"tls.crt\",\"path\":\"tls.crt\"},{\"key\":\"tls.key\",\"path\":\"tls.key\"},{\"key\":\"ca.crt\",\"path\":\"ca.crt\"}],\"optional\":true,\"secretName\":\"argocd-repo-server-tls\"}}]}}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:49Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/component": "application-controller",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-application-controller",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:podManagementPolicy": {},
                                        "f:replicas": {},
                                        "f:revisionHistoryLimit": {},
                                        "f:selector": {},
                                        "f:serviceName": {},
                                        "f:template": {
                                            "f:metadata": {
                                                "f:labels": {
                                                    ".": {},
                                                    "f:app.kubernetes.io/name": {}
                                                }
                                            },
                                            "f:spec": {
                                                "f:affinity": {
                                                    ".": {},
                                                    "f:podAntiAffinity": {
                                                        ".": {},
                                                        "f:preferredDuringSchedulingIgnoredDuringExecution": {}
                                                    }
                                                },
                                                "f:containers": {
                                                    "k:{\"name\":\"argocd-application-controller\"}": {
                                                        ".": {},
                                                        "f:command": {},
                                                        "f:env": {
                                                            ".": {},
                                                            "k:{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_LOGFORMAT\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_LOGLEVEL\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_METRICS_CACHE_EXPIRATION\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_OPERATION_PROCESSORS\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_PLAINTEXT\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_STRICT_TLS\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_SELF_HEAL_TIMEOUT_SECONDS\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_APPLICATION_CONTROLLER_STATUS_PROCESSORS\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_APP_STATE_CACHE_EXPIRATION\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_DEFAULT_CACHE_EXPIRATION\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_RECONCILIATION_TIMEOUT\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"REDISDB\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"REDIS_SERVER\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "f:image": {},
                                                        "f:imagePullPolicy": {},
                                                        "f:livenessProbe": {
                                                            ".": {},
                                                            "f:failureThreshold": {},
                                                            "f:httpGet": {
                                                                ".": {},
                                                                "f:path": {},
                                                                "f:port": {},
                                                                "f:scheme": {}
                                                            },
                                                            "f:initialDelaySeconds": {},
                                                            "f:periodSeconds": {},
                                                            "f:successThreshold": {},
                                                            "f:timeoutSeconds": {}
                                                        },
                                                        "f:name": {},
                                                        "f:ports": {
                                                            ".": {},
                                                            "k:{\"containerPort\":8082,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:protocol": {}
                                                            }
                                                        },
                                                        "f:readinessProbe": {
                                                            ".": {},
                                                            "f:failureThreshold": {},
                                                            "f:httpGet": {
                                                                ".": {},
                                                                "f:path": {},
                                                                "f:port": {},
                                                                "f:scheme": {}
                                                            },
                                                            "f:initialDelaySeconds": {},
                                                            "f:periodSeconds": {},
                                                            "f:successThreshold": {},
                                                            "f:timeoutSeconds": {}
                                                        },
                                                        "f:resources": {},
                                                        "f:securityContext": {
                                                            ".": {},
                                                            "f:allowPrivilegeEscalation": {},
                                                            "f:capabilities": {
                                                                ".": {},
                                                                "f:drop": {}
                                                            },
                                                            "f:readOnlyRootFilesystem": {},
                                                            "f:runAsNonRoot": {}
                                                        },
                                                        "f:terminationMessagePath": {},
                                                        "f:terminationMessagePolicy": {},
                                                        "f:volumeMounts": {
                                                            ".": {},
                                                            "k:{\"mountPath\":\"/app/config/controller/tls\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            },
                                                            "k:{\"mountPath\":\"/home/argocd\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            }
                                                        },
                                                        "f:workingDir": {}
                                                    }
                                                },
                                                "f:dnsPolicy": {},
                                                "f:restartPolicy": {},
                                                "f:schedulerName": {},
                                                "f:securityContext": {},
                                                "f:serviceAccount": {},
                                                "f:serviceAccountName": {},
                                                "f:terminationGracePeriodSeconds": {},
                                                "f:volumes": {
                                                    ".": {},
                                                    "k:{\"name\":\"argocd-home\"}": {
                                                        ".": {},
                                                        "f:emptyDir": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"name\":\"argocd-repo-server-tls\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:secret": {
                                                            ".": {},
                                                            "f:defaultMode": {},
                                                            "f:items": {},
                                                            "f:optional": {},
                                                            "f:secretName": {}
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "f:updateStrategy": {
                                            "f:rollingUpdate": {
                                                ".": {},
                                                "f:partition": {}
                                            },
                                            "f:type": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:49Z"
                            },
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:collisionCount": {},
                                        "f:currentReplicas": {},
                                        "f:currentRevision": {},
                                        "f:observedGeneration": {},
                                        "f:readyReplicas": {},
                                        "f:replicas": {},
                                        "f:updateRevision": {},
                                        "f:updatedReplicas": {}
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:59Z"
                            }
                        ],
                        "name": "argocd-application-controller",
                        "namespace": "argocd",
                        "resourceVersion": "105752",
                        "uid": "a52fa082-bc3e-4292-99a9-95d9edf10105"
                    },
                    "spec": {
                        "podManagementPolicy": "OrderedReady",
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-application-controller"
                            }
                        },
                        "serviceName": "argocd-application-controller",
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app.kubernetes.io/name": "argocd-application-controller"
                                }
                            },
                            "spec": {
                                "affinity": {
                                    "podAntiAffinity": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": [
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/name": "argocd-application-controller"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 100
                                            },
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/part-of": "argocd"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 5
                                            }
                                        ]
                                    }
                                },
                                "containers": [
                                    {
                                        "command": [
                                            "argocd-application-controller"
                                        ],
                                        "env": [
                                            {
                                                "name": "ARGOCD_RECONCILIATION_TIMEOUT",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "timeout.reconciliation",
                                                        "name": "argocd-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "repo.server",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.repo.server.timeout.seconds",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_STATUS_PROCESSORS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.status.processors",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_OPERATION_PROCESSORS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.operation.processors",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_LOGFORMAT",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.log.format",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_LOGLEVEL",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.log.level",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_METRICS_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.metrics.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_SELF_HEAL_TIMEOUT_SECONDS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.self.heal.timeout.seconds",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_PLAINTEXT",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.repo.server.plaintext",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_STRICT_TLS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.repo.server.strict.tls",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APP_STATE_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.app.state.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "REDIS_SERVER",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "redis.server",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "REDISDB",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "redis.db",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_DEFAULT_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "controller.default.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            }
                                        ],
                                        "image": "quay.io/argoproj/argocd:v2.2.0",
                                        "imagePullPolicy": "Always",
                                        "livenessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/healthz",
                                                "port": 8082,
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 1
                                        },
                                        "name": "argocd-application-controller",
                                        "ports": [
                                            {
                                                "containerPort": 8082,
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/healthz",
                                                "port": 8082,
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 1
                                        },
                                        "resources": {},
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "capabilities": {
                                                "drop": [
                                                    "all"
                                                ]
                                            },
                                            "readOnlyRootFilesystem": true,
                                            "runAsNonRoot": true
                                        },
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/app/config/controller/tls",
                                                "name": "argocd-repo-server-tls"
                                            },
                                            {
                                                "mountPath": "/home/argocd",
                                                "name": "argocd-home"
                                            }
                                        ],
                                        "workingDir": "/home/argocd"
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {},
                                "serviceAccount": "argocd-application-controller",
                                "serviceAccountName": "argocd-application-controller",
                                "terminationGracePeriodSeconds": 30,
                                "volumes": [
                                    {
                                        "emptyDir": {},
                                        "name": "argocd-home"
                                    },
                                    {
                                        "name": "argocd-repo-server-tls",
                                        "secret": {
                                            "defaultMode": 420,
                                            "items": [
                                                {
                                                    "key": "tls.crt",
                                                    "path": "tls.crt"
                                                },
                                                {
                                                    "key": "tls.key",
                                                    "path": "tls.key"
                                                },
                                                {
                                                    "key": "ca.crt",
                                                    "path": "ca.crt"
                                                }
                                            ],
                                            "optional": true,
                                            "secretName": "argocd-repo-server-tls"
                                        }
                                    }
                                ]
                            }
                        },
                        "updateStrategy": {
                            "rollingUpdate": {
                                "partition": 0
                            },
                            "type": "RollingUpdate"
                        }
                    },
                    "status": {
                        "collisionCount": 0,
                        "currentReplicas": 1,
                        "currentRevision": "argocd-application-controller-646bbfcffb",
                        "observedGeneration": 1,
                        "readyReplicas": 1,
                        "replicas": 1,
                        "updateRevision": "argocd-application-controller-646bbfcffb",
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:networking.k8s.io/v1:NetworkPolicy::argocd/argocd-repo-server-network-policy",
                "custom": true,
                "id": "argocd/argocd-repo-server-network-policy",
                "type": "kubernetes:networking.k8s.io/v1:NetworkPolicy",
                "inputs": {
                    "apiVersion": "networking.k8s.io/v1",
                    "kind": "NetworkPolicy",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "argocd-repo-server-network-policy",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "ingress": [
                            {
                                "from": [
                                    {
                                        "podSelector": {
                                            "matchLabels": {
                                                "app.kubernetes.io/name": "argocd-server"
                                            }
                                        }
                                    },
                                    {
                                        "podSelector": {
                                            "matchLabels": {
                                                "app.kubernetes.io/name": "argocd-application-controller"
                                            }
                                        }
                                    },
                                    {
                                        "podSelector": {
                                            "matchLabels": {
                                                "app.kubernetes.io/name": "argocd-notifications-controller"
                                            }
                                        }
                                    }
                                ],
                                "ports": [
                                    {
                                        "port": 8081,
                                        "protocol": "TCP"
                                    }
                                ]
                            },
                            {
                                "from": [
                                    {
                                        "namespaceSelector": {}
                                    }
                                ],
                                "ports": [
                                    {
                                        "port": 8084
                                    }
                                ]
                            }
                        ],
                        "podSelector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-repo-server"
                            }
                        },
                        "policyTypes": [
                            "Ingress"
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "networking.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "networking.k8s.io/v1",
                        "kind": "NetworkPolicy",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "argocd-repo-server-network-policy",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "ingress": [
                                {
                                    "from": [
                                        {
                                            "podSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/name": "argocd-server"
                                                }
                                            }
                                        },
                                        {
                                            "podSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/name": "argocd-application-controller"
                                                }
                                            }
                                        },
                                        {
                                            "podSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/name": "argocd-notifications-controller"
                                                }
                                            }
                                        }
                                    ],
                                    "ports": [
                                        {
                                            "port": 8081,
                                            "protocol": "TCP"
                                        }
                                    ]
                                },
                                {
                                    "from": [
                                        {
                                            "namespaceSelector": {}
                                        }
                                    ],
                                    "ports": [
                                        {
                                            "port": 8084
                                        }
                                    ]
                                }
                            ],
                            "podSelector": {
                                "matchLabels": {
                                    "app.kubernetes.io/name": "argocd-repo-server"
                                }
                            },
                            "policyTypes": [
                                "Ingress"
                            ]
                        }
                    },
                    "apiVersion": "networking.k8s.io/v1",
                    "kind": "NetworkPolicy",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"networking.k8s.io/v1\",\"kind\":\"NetworkPolicy\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"argocd-repo-server-network-policy\",\"namespace\":\"argocd\"},\"spec\":{\"ingress\":[{\"from\":[{\"podSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-server\"}}},{\"podSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-application-controller\"}}},{\"podSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-notifications-controller\"}}}],\"ports\":[{\"port\":8081,\"protocol\":\"TCP\"}]},{\"from\":[{\"namespaceSelector\":{}}],\"ports\":[{\"port\":8084}]}],\"podSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-repo-server\"}},\"policyTypes\":[\"Ingress\"]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:48Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "networking.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:ingress": {},
                                        "f:podSelector": {},
                                        "f:policyTypes": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:48Z"
                            }
                        ],
                        "name": "argocd-repo-server-network-policy",
                        "namespace": "argocd",
                        "resourceVersion": "105606",
                        "uid": "24f1b76e-05b6-4631-b28e-0f2742f96aa4"
                    },
                    "spec": {
                        "ingress": [
                            {
                                "from": [
                                    {
                                        "podSelector": {
                                            "matchLabels": {
                                                "app.kubernetes.io/name": "argocd-server"
                                            }
                                        }
                                    },
                                    {
                                        "podSelector": {
                                            "matchLabels": {
                                                "app.kubernetes.io/name": "argocd-application-controller"
                                            }
                                        }
                                    },
                                    {
                                        "podSelector": {
                                            "matchLabels": {
                                                "app.kubernetes.io/name": "argocd-notifications-controller"
                                            }
                                        }
                                    }
                                ],
                                "ports": [
                                    {
                                        "port": 8081,
                                        "protocol": "TCP"
                                    }
                                ]
                            },
                            {
                                "from": [
                                    {
                                        "namespaceSelector": {}
                                    }
                                ],
                                "ports": [
                                    {
                                        "port": 8084,
                                        "protocol": "TCP"
                                    }
                                ]
                            }
                        ],
                        "podSelector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-repo-server"
                            }
                        },
                        "policyTypes": [
                            "Ingress"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:networking.k8s.io/v1:NetworkPolicy::argocd/argocd-application-controller-network-policy",
                "custom": true,
                "id": "argocd/argocd-application-controller-network-policy",
                "type": "kubernetes:networking.k8s.io/v1:NetworkPolicy",
                "inputs": {
                    "apiVersion": "networking.k8s.io/v1",
                    "kind": "NetworkPolicy",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "argocd-application-controller-network-policy",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "ingress": [
                            {
                                "from": [
                                    {
                                        "namespaceSelector": {}
                                    }
                                ],
                                "ports": [
                                    {
                                        "port": 8082
                                    }
                                ]
                            }
                        ],
                        "podSelector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-application-controller"
                            }
                        },
                        "policyTypes": [
                            "Ingress"
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "networking.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "networking.k8s.io/v1",
                        "kind": "NetworkPolicy",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "argocd-application-controller-network-policy",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "ingress": [
                                {
                                    "from": [
                                        {
                                            "namespaceSelector": {}
                                        }
                                    ],
                                    "ports": [
                                        {
                                            "port": 8082
                                        }
                                    ]
                                }
                            ],
                            "podSelector": {
                                "matchLabels": {
                                    "app.kubernetes.io/name": "argocd-application-controller"
                                }
                            },
                            "policyTypes": [
                                "Ingress"
                            ]
                        }
                    },
                    "apiVersion": "networking.k8s.io/v1",
                    "kind": "NetworkPolicy",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"networking.k8s.io/v1\",\"kind\":\"NetworkPolicy\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"argocd-application-controller-network-policy\",\"namespace\":\"argocd\"},\"spec\":{\"ingress\":[{\"from\":[{\"namespaceSelector\":{}}],\"ports\":[{\"port\":8082}]}],\"podSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-application-controller\"}},\"policyTypes\":[\"Ingress\"]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:46Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "networking.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:ingress": {},
                                        "f:podSelector": {},
                                        "f:policyTypes": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:46Z"
                            }
                        ],
                        "name": "argocd-application-controller-network-policy",
                        "namespace": "argocd",
                        "resourceVersion": "105563",
                        "uid": "211b74c3-0520-4a2b-a9e4-ad2122c652ba"
                    },
                    "spec": {
                        "ingress": [
                            {
                                "from": [
                                    {
                                        "namespaceSelector": {}
                                    }
                                ],
                                "ports": [
                                    {
                                        "port": 8082,
                                        "protocol": "TCP"
                                    }
                                ]
                            }
                        ],
                        "podSelector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-application-controller"
                            }
                        },
                        "policyTypes": [
                            "Ingress"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:apps/v1:Deployment::argocd/argocd-dex-server",
                "custom": true,
                "id": "argocd/argocd-dex-server",
                "type": "kubernetes:apps/v1:Deployment",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "dex-server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-dex-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-dex-server",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-dex-server"
                            }
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app.kubernetes.io/name": "argocd-dex-server"
                                }
                            },
                            "spec": {
                                "affinity": {
                                    "podAntiAffinity": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": [
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/part-of": "argocd"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 5
                                            }
                                        ]
                                    }
                                },
                                "containers": [
                                    {
                                        "command": [
                                            "/shared/argocd-dex",
                                            "rundex"
                                        ],
                                        "image": "ghcr.io/dexidp/dex:v2.30.0",
                                        "imagePullPolicy": "Always",
                                        "name": "dex",
                                        "ports": [
                                            {
                                                "containerPort": 5556
                                            },
                                            {
                                                "containerPort": 5557
                                            },
                                            {
                                                "containerPort": 5558
                                            }
                                        ],
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "readOnlyRootFilesystem": true,
                                            "runAsNonRoot": true
                                        },
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/shared",
                                                "name": "static-files"
                                            },
                                            {
                                                "mountPath": "/tmp",
                                                "name": "dexconfig"
                                            }
                                        ]
                                    }
                                ],
                                "initContainers": [
                                    {
                                        "command": [
                                            "cp",
                                            "-n",
                                            "/usr/local/bin/argocd",
                                            "/shared/argocd-dex"
                                        ],
                                        "image": "quay.io/argoproj/argocd:v2.2.0",
                                        "imagePullPolicy": "Always",
                                        "name": "copyutil",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/shared",
                                                "name": "static-files"
                                            },
                                            {
                                                "mountPath": "/tmp",
                                                "name": "dexconfig"
                                            }
                                        ]
                                    }
                                ],
                                "serviceAccountName": "argocd-dex-server",
                                "volumes": [
                                    {
                                        "emptyDir": {},
                                        "name": "static-files"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "dexconfig"
                                    }
                                ]
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "dex-server",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-dex-server",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-dex-server",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "selector": {
                                "matchLabels": {
                                    "app.kubernetes.io/name": "argocd-dex-server"
                                }
                            },
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "app.kubernetes.io/name": "argocd-dex-server"
                                    }
                                },
                                "spec": {
                                    "affinity": {
                                        "podAntiAffinity": {
                                            "preferredDuringSchedulingIgnoredDuringExecution": [
                                                {
                                                    "podAffinityTerm": {
                                                        "labelSelector": {
                                                            "matchLabels": {
                                                                "app.kubernetes.io/part-of": "argocd"
                                                            }
                                                        },
                                                        "topologyKey": "kubernetes.io/hostname"
                                                    },
                                                    "weight": 5
                                                }
                                            ]
                                        }
                                    },
                                    "containers": [
                                        {
                                            "command": [
                                                "/shared/argocd-dex",
                                                "rundex"
                                            ],
                                            "image": "ghcr.io/dexidp/dex:v2.30.0",
                                            "imagePullPolicy": "Always",
                                            "name": "dex",
                                            "ports": [
                                                {
                                                    "containerPort": 5556
                                                },
                                                {
                                                    "containerPort": 5557
                                                },
                                                {
                                                    "containerPort": 5558
                                                }
                                            ],
                                            "securityContext": {
                                                "allowPrivilegeEscalation": false,
                                                "readOnlyRootFilesystem": true,
                                                "runAsNonRoot": true
                                            },
                                            "volumeMounts": [
                                                {
                                                    "mountPath": "/shared",
                                                    "name": "static-files"
                                                },
                                                {
                                                    "mountPath": "/tmp",
                                                    "name": "dexconfig"
                                                }
                                            ]
                                        }
                                    ],
                                    "initContainers": [
                                        {
                                            "command": [
                                                "cp",
                                                "-n",
                                                "/usr/local/bin/argocd",
                                                "/shared/argocd-dex"
                                            ],
                                            "image": "quay.io/argoproj/argocd:v2.2.0",
                                            "imagePullPolicy": "Always",
                                            "name": "copyutil",
                                            "volumeMounts": [
                                                {
                                                    "mountPath": "/shared",
                                                    "name": "static-files"
                                                },
                                                {
                                                    "mountPath": "/tmp",
                                                    "name": "dexconfig"
                                                }
                                            ]
                                        }
                                    ],
                                    "serviceAccountName": "argocd-dex-server",
                                    "volumes": [
                                        {
                                            "emptyDir": {},
                                            "name": "static-files"
                                        },
                                        {
                                            "emptyDir": {},
                                            "name": "dexconfig"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "annotations": {
                            "deployment.kubernetes.io/revision": "1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"dex-server\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-dex-server\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-dex-server\",\"namespace\":\"argocd\"},\"spec\":{\"selector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-dex-server\"}},\"template\":{\"metadata\":{\"labels\":{\"app.kubernetes.io/name\":\"argocd-dex-server\"}},\"spec\":{\"affinity\":{\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/part-of\":\"argocd\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":5}]}},\"containers\":[{\"command\":[\"/shared/argocd-dex\",\"rundex\"],\"image\":\"ghcr.io/dexidp/dex:v2.30.0\",\"imagePullPolicy\":\"Always\",\"name\":\"dex\",\"ports\":[{\"containerPort\":5556},{\"containerPort\":5557},{\"containerPort\":5558}],\"securityContext\":{\"allowPrivilegeEscalation\":false,\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true},\"volumeMounts\":[{\"mountPath\":\"/shared\",\"name\":\"static-files\"},{\"mountPath\":\"/tmp\",\"name\":\"dexconfig\"}]}],\"initContainers\":[{\"command\":[\"cp\",\"-n\",\"/usr/local/bin/argocd\",\"/shared/argocd-dex\"],\"image\":\"quay.io/argoproj/argocd:v2.2.0\",\"imagePullPolicy\":\"Always\",\"name\":\"copyutil\",\"volumeMounts\":[{\"mountPath\":\"/shared\",\"name\":\"static-files\"},{\"mountPath\":\"/tmp\",\"name\":\"dexconfig\"}]}],\"serviceAccountName\":\"argocd-dex-server\",\"volumes\":[{\"emptyDir\":{},\"name\":\"static-files\"},{\"emptyDir\":{},\"name\":\"dexconfig\"}]}}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:44Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/component": "dex-server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-dex-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:progressDeadlineSeconds": {},
                                        "f:replicas": {},
                                        "f:revisionHistoryLimit": {},
                                        "f:selector": {},
                                        "f:strategy": {
                                            "f:rollingUpdate": {
                                                ".": {},
                                                "f:maxSurge": {},
                                                "f:maxUnavailable": {}
                                            },
                                            "f:type": {}
                                        },
                                        "f:template": {
                                            "f:metadata": {
                                                "f:labels": {
                                                    ".": {},
                                                    "f:app.kubernetes.io/name": {}
                                                }
                                            },
                                            "f:spec": {
                                                "f:affinity": {
                                                    ".": {},
                                                    "f:podAntiAffinity": {
                                                        ".": {},
                                                        "f:preferredDuringSchedulingIgnoredDuringExecution": {}
                                                    }
                                                },
                                                "f:containers": {
                                                    "k:{\"name\":\"dex\"}": {
                                                        ".": {},
                                                        "f:command": {},
                                                        "f:image": {},
                                                        "f:imagePullPolicy": {},
                                                        "f:name": {},
                                                        "f:ports": {
                                                            ".": {},
                                                            "k:{\"containerPort\":5556,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:protocol": {}
                                                            },
                                                            "k:{\"containerPort\":5557,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:protocol": {}
                                                            },
                                                            "k:{\"containerPort\":5558,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:protocol": {}
                                                            }
                                                        },
                                                        "f:resources": {},
                                                        "f:securityContext": {
                                                            ".": {},
                                                            "f:allowPrivilegeEscalation": {},
                                                            "f:readOnlyRootFilesystem": {},
                                                            "f:runAsNonRoot": {}
                                                        },
                                                        "f:terminationMessagePath": {},
                                                        "f:terminationMessagePolicy": {},
                                                        "f:volumeMounts": {
                                                            ".": {},
                                                            "k:{\"mountPath\":\"/shared\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            },
                                                            "k:{\"mountPath\":\"/tmp\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            }
                                                        }
                                                    }
                                                },
                                                "f:dnsPolicy": {},
                                                "f:initContainers": {
                                                    ".": {},
                                                    "k:{\"name\":\"copyutil\"}": {
                                                        ".": {},
                                                        "f:command": {},
                                                        "f:image": {},
                                                        "f:imagePullPolicy": {},
                                                        "f:name": {},
                                                        "f:resources": {},
                                                        "f:terminationMessagePath": {},
                                                        "f:terminationMessagePolicy": {},
                                                        "f:volumeMounts": {
                                                            ".": {},
                                                            "k:{\"mountPath\":\"/shared\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            },
                                                            "k:{\"mountPath\":\"/tmp\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            }
                                                        }
                                                    }
                                                },
                                                "f:restartPolicy": {},
                                                "f:schedulerName": {},
                                                "f:securityContext": {},
                                                "f:serviceAccount": {},
                                                "f:serviceAccountName": {},
                                                "f:terminationGracePeriodSeconds": {},
                                                "f:volumes": {
                                                    ".": {},
                                                    "k:{\"name\":\"dexconfig\"}": {
                                                        ".": {},
                                                        "f:emptyDir": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"name\":\"static-files\"}": {
                                                        ".": {},
                                                        "f:emptyDir": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:44Z"
                            },
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            "f:deployment.kubernetes.io/revision": {}
                                        }
                                    },
                                    "f:status": {
                                        "f:availableReplicas": {},
                                        "f:conditions": {
                                            ".": {},
                                            "k:{\"type\":\"Available\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"Progressing\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:observedGeneration": {},
                                        "f:readyReplicas": {},
                                        "f:replicas": {},
                                        "f:updatedReplicas": {}
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T00:11:07Z"
                            }
                        ],
                        "name": "argocd-dex-server",
                        "namespace": "argocd",
                        "resourceVersion": "105826",
                        "uid": "41da9b51-d9a1-4c99-a87f-c43d8531f328"
                    },
                    "spec": {
                        "progressDeadlineSeconds": 600,
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-dex-server"
                            }
                        },
                        "strategy": {
                            "rollingUpdate": {
                                "maxSurge": "25%",
                                "maxUnavailable": "25%"
                            },
                            "type": "RollingUpdate"
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app.kubernetes.io/name": "argocd-dex-server"
                                }
                            },
                            "spec": {
                                "affinity": {
                                    "podAntiAffinity": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": [
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/part-of": "argocd"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 5
                                            }
                                        ]
                                    }
                                },
                                "containers": [
                                    {
                                        "command": [
                                            "/shared/argocd-dex",
                                            "rundex"
                                        ],
                                        "image": "ghcr.io/dexidp/dex:v2.30.0",
                                        "imagePullPolicy": "Always",
                                        "name": "dex",
                                        "ports": [
                                            {
                                                "containerPort": 5556,
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 5557,
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 5558,
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "resources": {},
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "readOnlyRootFilesystem": true,
                                            "runAsNonRoot": true
                                        },
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/shared",
                                                "name": "static-files"
                                            },
                                            {
                                                "mountPath": "/tmp",
                                                "name": "dexconfig"
                                            }
                                        ]
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "initContainers": [
                                    {
                                        "command": [
                                            "cp",
                                            "-n",
                                            "/usr/local/bin/argocd",
                                            "/shared/argocd-dex"
                                        ],
                                        "image": "quay.io/argoproj/argocd:v2.2.0",
                                        "imagePullPolicy": "Always",
                                        "name": "copyutil",
                                        "resources": {},
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/shared",
                                                "name": "static-files"
                                            },
                                            {
                                                "mountPath": "/tmp",
                                                "name": "dexconfig"
                                            }
                                        ]
                                    }
                                ],
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {},
                                "serviceAccount": "argocd-dex-server",
                                "serviceAccountName": "argocd-dex-server",
                                "terminationGracePeriodSeconds": 30,
                                "volumes": [
                                    {
                                        "emptyDir": {},
                                        "name": "static-files"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "dexconfig"
                                    }
                                ]
                            }
                        }
                    },
                    "status": {
                        "availableReplicas": 1,
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T00:10:44Z",
                                "lastUpdateTime": "2021-12-19T00:10:48Z",
                                "message": "ReplicaSet \"argocd-dex-server-757c679798\" has successfully progressed.",
                                "reason": "NewReplicaSetAvailable",
                                "status": "True",
                                "type": "Progressing"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T00:11:07Z",
                                "lastUpdateTime": "2021-12-19T00:11:07Z",
                                "message": "Deployment has minimum availability.",
                                "reason": "MinimumReplicasAvailable",
                                "status": "True",
                                "type": "Available"
                            }
                        ],
                        "observedGeneration": 1,
                        "readyReplicas": 1,
                        "replicas": 1,
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:apps/v1:Deployment::argocd/argocd-redis",
                "custom": true,
                "id": "argocd/argocd-redis",
                "type": "kubernetes:apps/v1:Deployment",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-redis",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-redis",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-redis"
                            }
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app.kubernetes.io/name": "argocd-redis"
                                }
                            },
                            "spec": {
                                "affinity": {
                                    "podAntiAffinity": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": [
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/name": "argocd-redis"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 100
                                            },
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/part-of": "argocd"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 5
                                            }
                                        ]
                                    }
                                },
                                "containers": [
                                    {
                                        "args": [
                                            "--save",
                                            "",
                                            "--appendonly",
                                            "no"
                                        ],
                                        "image": "redis:6.2.4-alpine",
                                        "imagePullPolicy": "Always",
                                        "name": "redis",
                                        "ports": [
                                            {
                                                "containerPort": 6379
                                            }
                                        ]
                                    }
                                ],
                                "securityContext": {
                                    "runAsNonRoot": true,
                                    "runAsUser": 999
                                },
                                "serviceAccountName": "argocd-redis"
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "redis",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-redis",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-redis",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "selector": {
                                "matchLabels": {
                                    "app.kubernetes.io/name": "argocd-redis"
                                }
                            },
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "app.kubernetes.io/name": "argocd-redis"
                                    }
                                },
                                "spec": {
                                    "affinity": {
                                        "podAntiAffinity": {
                                            "preferredDuringSchedulingIgnoredDuringExecution": [
                                                {
                                                    "podAffinityTerm": {
                                                        "labelSelector": {
                                                            "matchLabels": {
                                                                "app.kubernetes.io/name": "argocd-redis"
                                                            }
                                                        },
                                                        "topologyKey": "kubernetes.io/hostname"
                                                    },
                                                    "weight": 100
                                                },
                                                {
                                                    "podAffinityTerm": {
                                                        "labelSelector": {
                                                            "matchLabels": {
                                                                "app.kubernetes.io/part-of": "argocd"
                                                            }
                                                        },
                                                        "topologyKey": "kubernetes.io/hostname"
                                                    },
                                                    "weight": 5
                                                }
                                            ]
                                        }
                                    },
                                    "containers": [
                                        {
                                            "args": [
                                                "--save",
                                                "",
                                                "--appendonly",
                                                "no"
                                            ],
                                            "image": "redis:6.2.4-alpine",
                                            "imagePullPolicy": "Always",
                                            "name": "redis",
                                            "ports": [
                                                {
                                                    "containerPort": 6379
                                                }
                                            ]
                                        }
                                    ],
                                    "securityContext": {
                                        "runAsNonRoot": true,
                                        "runAsUser": 999
                                    },
                                    "serviceAccountName": "argocd-redis"
                                }
                            }
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "annotations": {
                            "deployment.kubernetes.io/revision": "1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"redis\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-redis\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-redis\",\"namespace\":\"argocd\"},\"spec\":{\"selector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-redis\"}},\"template\":{\"metadata\":{\"labels\":{\"app.kubernetes.io/name\":\"argocd-redis\"}},\"spec\":{\"affinity\":{\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-redis\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":100},{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/part-of\":\"argocd\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":5}]}},\"containers\":[{\"args\":[\"--save\",\"\",\"--appendonly\",\"no\"],\"image\":\"redis:6.2.4-alpine\",\"imagePullPolicy\":\"Always\",\"name\":\"redis\",\"ports\":[{\"containerPort\":6379}]}],\"securityContext\":{\"runAsNonRoot\":true,\"runAsUser\":999},\"serviceAccountName\":\"argocd-redis\"}}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:45Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/component": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-redis",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:progressDeadlineSeconds": {},
                                        "f:replicas": {},
                                        "f:revisionHistoryLimit": {},
                                        "f:selector": {},
                                        "f:strategy": {
                                            "f:rollingUpdate": {
                                                ".": {},
                                                "f:maxSurge": {},
                                                "f:maxUnavailable": {}
                                            },
                                            "f:type": {}
                                        },
                                        "f:template": {
                                            "f:metadata": {
                                                "f:labels": {
                                                    ".": {},
                                                    "f:app.kubernetes.io/name": {}
                                                }
                                            },
                                            "f:spec": {
                                                "f:affinity": {
                                                    ".": {},
                                                    "f:podAntiAffinity": {
                                                        ".": {},
                                                        "f:preferredDuringSchedulingIgnoredDuringExecution": {}
                                                    }
                                                },
                                                "f:containers": {
                                                    "k:{\"name\":\"redis\"}": {
                                                        ".": {},
                                                        "f:args": {},
                                                        "f:image": {},
                                                        "f:imagePullPolicy": {},
                                                        "f:name": {},
                                                        "f:ports": {
                                                            ".": {},
                                                            "k:{\"containerPort\":6379,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:protocol": {}
                                                            }
                                                        },
                                                        "f:resources": {},
                                                        "f:terminationMessagePath": {},
                                                        "f:terminationMessagePolicy": {}
                                                    }
                                                },
                                                "f:dnsPolicy": {},
                                                "f:restartPolicy": {},
                                                "f:schedulerName": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:runAsNonRoot": {},
                                                    "f:runAsUser": {}
                                                },
                                                "f:serviceAccount": {},
                                                "f:serviceAccountName": {},
                                                "f:terminationGracePeriodSeconds": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:45Z"
                            },
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            "f:deployment.kubernetes.io/revision": {}
                                        }
                                    },
                                    "f:status": {
                                        "f:availableReplicas": {},
                                        "f:conditions": {
                                            ".": {},
                                            "k:{\"type\":\"Available\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"Progressing\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:observedGeneration": {},
                                        "f:readyReplicas": {},
                                        "f:replicas": {},
                                        "f:updatedReplicas": {}
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:48Z"
                            }
                        ],
                        "name": "argocd-redis",
                        "namespace": "argocd",
                        "resourceVersion": "105598",
                        "uid": "d7cca3ef-cf40-4f8f-8abf-c480ac5960d6"
                    },
                    "spec": {
                        "progressDeadlineSeconds": 600,
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-redis"
                            }
                        },
                        "strategy": {
                            "rollingUpdate": {
                                "maxSurge": "25%",
                                "maxUnavailable": "25%"
                            },
                            "type": "RollingUpdate"
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app.kubernetes.io/name": "argocd-redis"
                                }
                            },
                            "spec": {
                                "affinity": {
                                    "podAntiAffinity": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": [
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/name": "argocd-redis"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 100
                                            },
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/part-of": "argocd"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 5
                                            }
                                        ]
                                    }
                                },
                                "containers": [
                                    {
                                        "args": [
                                            "--save",
                                            "",
                                            "--appendonly",
                                            "no"
                                        ],
                                        "image": "redis:6.2.4-alpine",
                                        "imagePullPolicy": "Always",
                                        "name": "redis",
                                        "ports": [
                                            {
                                                "containerPort": 6379,
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "resources": {},
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File"
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {
                                    "runAsNonRoot": true,
                                    "runAsUser": 999
                                },
                                "serviceAccount": "argocd-redis",
                                "serviceAccountName": "argocd-redis",
                                "terminationGracePeriodSeconds": 30
                            }
                        }
                    },
                    "status": {
                        "availableReplicas": 1,
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T00:10:48Z",
                                "lastUpdateTime": "2021-12-19T00:10:48Z",
                                "message": "Deployment has minimum availability.",
                                "reason": "MinimumReplicasAvailable",
                                "status": "True",
                                "type": "Available"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T00:10:45Z",
                                "lastUpdateTime": "2021-12-19T00:10:48Z",
                                "message": "ReplicaSet \"argocd-redis-5b6967fdfc\" has successfully progressed.",
                                "reason": "NewReplicaSetAvailable",
                                "status": "True",
                                "type": "Progressing"
                            }
                        ],
                        "observedGeneration": 1,
                        "readyReplicas": 1,
                        "replicas": 1,
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "custom": false,
                "type": "kubernetes:yaml:ConfigGroup",
                "parent": "urn:pulumi:dev::cluster-resources::pulumi:pulumi:Stack::cluster-resources-dev"
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:apps/v1:Deployment::argocd/argocd-repo-server",
                "custom": true,
                "id": "argocd/argocd-repo-server",
                "type": "kubernetes:apps/v1:Deployment",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "repo-server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-repo-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-repo-server",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-repo-server"
                            }
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app.kubernetes.io/name": "argocd-repo-server"
                                }
                            },
                            "spec": {
                                "affinity": {
                                    "podAntiAffinity": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": [
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/name": "argocd-repo-server"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 100
                                            },
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/part-of": "argocd"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 5
                                            }
                                        ]
                                    }
                                },
                                "automountServiceAccountToken": false,
                                "containers": [
                                    {
                                        "command": [
                                            "entrypoint.sh",
                                            "argocd-repo-server",
                                            "--redis",
                                            "argocd-redis:6379"
                                        ],
                                        "env": [
                                            {
                                                "name": "ARGOCD_RECONCILIATION_TIMEOUT",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "timeout.reconciliation",
                                                        "name": "argocd-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_REPO_SERVER_LOGFORMAT",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.log.format",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_REPO_SERVER_LOGLEVEL",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.log.level",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_REPO_SERVER_PARALLELISM_LIMIT",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.parallelism.limit",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_REPO_SERVER_DISABLE_TLS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.disable.tls",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_TLS_MIN_VERSION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.tls.minversion",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_TLS_MAX_VERSION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.tls.maxversion",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_TLS_CIPHERS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.tls.ciphers",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_REPO_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.repo.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "REDIS_SERVER",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "redis.server",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "REDISDB",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "redis.db",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_DEFAULT_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.default.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "HELM_CACHE_HOME",
                                                "value": "/helm-working-dir"
                                            },
                                            {
                                                "name": "HELM_CONFIG_HOME",
                                                "value": "/helm-working-dir"
                                            },
                                            {
                                                "name": "HELM_DATA_HOME",
                                                "value": "/helm-working-dir"
                                            }
                                        ],
                                        "image": "quay.io/argoproj/argocd:v2.2.0",
                                        "imagePullPolicy": "Always",
                                        "livenessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/healthz?full=true",
                                                "port": 8084
                                            },
                                            "initialDelaySeconds": 30,
                                            "periodSeconds": 5
                                        },
                                        "name": "argocd-repo-server",
                                        "ports": [
                                            {
                                                "containerPort": 8081
                                            },
                                            {
                                                "containerPort": 8084
                                            }
                                        ],
                                        "readinessProbe": {
                                            "httpGet": {
                                                "path": "/healthz",
                                                "port": 8084
                                            },
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10
                                        },
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "capabilities": {
                                                "drop": [
                                                    "all"
                                                ]
                                            },
                                            "readOnlyRootFilesystem": true,
                                            "runAsNonRoot": true
                                        },
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/app/config/ssh",
                                                "name": "ssh-known-hosts"
                                            },
                                            {
                                                "mountPath": "/app/config/tls",
                                                "name": "tls-certs"
                                            },
                                            {
                                                "mountPath": "/app/config/gpg/source",
                                                "name": "gpg-keys"
                                            },
                                            {
                                                "mountPath": "/app/config/gpg/keys",
                                                "name": "gpg-keyring"
                                            },
                                            {
                                                "mountPath": "/app/config/reposerver/tls",
                                                "name": "argocd-repo-server-tls"
                                            },
                                            {
                                                "mountPath": "/tmp",
                                                "name": "tmp"
                                            },
                                            {
                                                "mountPath": "/helm-working-dir",
                                                "name": "helm-working-dir"
                                            },
                                            {
                                                "mountPath": "/home/argocd/cmp-server/plugins",
                                                "name": "plugins"
                                            }
                                        ]
                                    }
                                ],
                                "initContainers": [
                                    {
                                        "command": [
                                            "cp",
                                            "-n",
                                            "/usr/local/bin/argocd",
                                            "/var/run/argocd/argocd-cmp-server"
                                        ],
                                        "image": "quay.io/argoproj/argocd:v2.2.0",
                                        "name": "copyutil",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/var/run/argocd",
                                                "name": "var-files"
                                            }
                                        ]
                                    }
                                ],
                                "volumes": [
                                    {
                                        "configMap": {
                                            "name": "argocd-ssh-known-hosts-cm"
                                        },
                                        "name": "ssh-known-hosts"
                                    },
                                    {
                                        "configMap": {
                                            "name": "argocd-tls-certs-cm"
                                        },
                                        "name": "tls-certs"
                                    },
                                    {
                                        "configMap": {
                                            "name": "argocd-gpg-keys-cm"
                                        },
                                        "name": "gpg-keys"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "gpg-keyring"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "tmp"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "helm-working-dir"
                                    },
                                    {
                                        "name": "argocd-repo-server-tls",
                                        "secret": {
                                            "items": [
                                                {
                                                    "key": "tls.crt",
                                                    "path": "tls.crt"
                                                },
                                                {
                                                    "key": "tls.key",
                                                    "path": "tls.key"
                                                },
                                                {
                                                    "key": "ca.crt",
                                                    "path": "ca.crt"
                                                }
                                            ],
                                            "optional": true,
                                            "secretName": "argocd-repo-server-tls"
                                        }
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "var-files"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "plugins"
                                    }
                                ]
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "repo-server",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-repo-server",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-repo-server",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "selector": {
                                "matchLabels": {
                                    "app.kubernetes.io/name": "argocd-repo-server"
                                }
                            },
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "app.kubernetes.io/name": "argocd-repo-server"
                                    }
                                },
                                "spec": {
                                    "affinity": {
                                        "podAntiAffinity": {
                                            "preferredDuringSchedulingIgnoredDuringExecution": [
                                                {
                                                    "podAffinityTerm": {
                                                        "labelSelector": {
                                                            "matchLabels": {
                                                                "app.kubernetes.io/name": "argocd-repo-server"
                                                            }
                                                        },
                                                        "topologyKey": "kubernetes.io/hostname"
                                                    },
                                                    "weight": 100
                                                },
                                                {
                                                    "podAffinityTerm": {
                                                        "labelSelector": {
                                                            "matchLabels": {
                                                                "app.kubernetes.io/part-of": "argocd"
                                                            }
                                                        },
                                                        "topologyKey": "kubernetes.io/hostname"
                                                    },
                                                    "weight": 5
                                                }
                                            ]
                                        }
                                    },
                                    "automountServiceAccountToken": false,
                                    "containers": [
                                        {
                                            "command": [
                                                "entrypoint.sh",
                                                "argocd-repo-server",
                                                "--redis",
                                                "argocd-redis:6379"
                                            ],
                                            "env": [
                                                {
                                                    "name": "ARGOCD_RECONCILIATION_TIMEOUT",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "timeout.reconciliation",
                                                            "name": "argocd-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_REPO_SERVER_LOGFORMAT",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "reposerver.log.format",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_REPO_SERVER_LOGLEVEL",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "reposerver.log.level",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_REPO_SERVER_PARALLELISM_LIMIT",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "reposerver.parallelism.limit",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_REPO_SERVER_DISABLE_TLS",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "reposerver.disable.tls",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_TLS_MIN_VERSION",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "reposerver.tls.minversion",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_TLS_MAX_VERSION",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "reposerver.tls.maxversion",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_TLS_CIPHERS",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "reposerver.tls.ciphers",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_REPO_CACHE_EXPIRATION",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "reposerver.repo.cache.expiration",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "REDIS_SERVER",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "redis.server",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "REDISDB",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "redis.db",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_DEFAULT_CACHE_EXPIRATION",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "reposerver.default.cache.expiration",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "HELM_CACHE_HOME",
                                                    "value": "/helm-working-dir"
                                                },
                                                {
                                                    "name": "HELM_CONFIG_HOME",
                                                    "value": "/helm-working-dir"
                                                },
                                                {
                                                    "name": "HELM_DATA_HOME",
                                                    "value": "/helm-working-dir"
                                                }
                                            ],
                                            "image": "quay.io/argoproj/argocd:v2.2.0",
                                            "imagePullPolicy": "Always",
                                            "livenessProbe": {
                                                "failureThreshold": 3,
                                                "httpGet": {
                                                    "path": "/healthz?full=true",
                                                    "port": 8084
                                                },
                                                "initialDelaySeconds": 30,
                                                "periodSeconds": 5
                                            },
                                            "name": "argocd-repo-server",
                                            "ports": [
                                                {
                                                    "containerPort": 8081
                                                },
                                                {
                                                    "containerPort": 8084
                                                }
                                            ],
                                            "readinessProbe": {
                                                "httpGet": {
                                                    "path": "/healthz",
                                                    "port": 8084
                                                },
                                                "initialDelaySeconds": 5,
                                                "periodSeconds": 10
                                            },
                                            "securityContext": {
                                                "allowPrivilegeEscalation": false,
                                                "capabilities": {
                                                    "drop": [
                                                        "all"
                                                    ]
                                                },
                                                "readOnlyRootFilesystem": true,
                                                "runAsNonRoot": true
                                            },
                                            "volumeMounts": [
                                                {
                                                    "mountPath": "/app/config/ssh",
                                                    "name": "ssh-known-hosts"
                                                },
                                                {
                                                    "mountPath": "/app/config/tls",
                                                    "name": "tls-certs"
                                                },
                                                {
                                                    "mountPath": "/app/config/gpg/source",
                                                    "name": "gpg-keys"
                                                },
                                                {
                                                    "mountPath": "/app/config/gpg/keys",
                                                    "name": "gpg-keyring"
                                                },
                                                {
                                                    "mountPath": "/app/config/reposerver/tls",
                                                    "name": "argocd-repo-server-tls"
                                                },
                                                {
                                                    "mountPath": "/tmp",
                                                    "name": "tmp"
                                                },
                                                {
                                                    "mountPath": "/helm-working-dir",
                                                    "name": "helm-working-dir"
                                                },
                                                {
                                                    "mountPath": "/home/argocd/cmp-server/plugins",
                                                    "name": "plugins"
                                                }
                                            ]
                                        }
                                    ],
                                    "initContainers": [
                                        {
                                            "command": [
                                                "cp",
                                                "-n",
                                                "/usr/local/bin/argocd",
                                                "/var/run/argocd/argocd-cmp-server"
                                            ],
                                            "image": "quay.io/argoproj/argocd:v2.2.0",
                                            "name": "copyutil",
                                            "volumeMounts": [
                                                {
                                                    "mountPath": "/var/run/argocd",
                                                    "name": "var-files"
                                                }
                                            ]
                                        }
                                    ],
                                    "volumes": [
                                        {
                                            "configMap": {
                                                "name": "argocd-ssh-known-hosts-cm"
                                            },
                                            "name": "ssh-known-hosts"
                                        },
                                        {
                                            "configMap": {
                                                "name": "argocd-tls-certs-cm"
                                            },
                                            "name": "tls-certs"
                                        },
                                        {
                                            "configMap": {
                                                "name": "argocd-gpg-keys-cm"
                                            },
                                            "name": "gpg-keys"
                                        },
                                        {
                                            "emptyDir": {},
                                            "name": "gpg-keyring"
                                        },
                                        {
                                            "emptyDir": {},
                                            "name": "tmp"
                                        },
                                        {
                                            "emptyDir": {},
                                            "name": "helm-working-dir"
                                        },
                                        {
                                            "name": "argocd-repo-server-tls",
                                            "secret": {
                                                "items": [
                                                    {
                                                        "key": "tls.crt",
                                                        "path": "tls.crt"
                                                    },
                                                    {
                                                        "key": "tls.key",
                                                        "path": "tls.key"
                                                    },
                                                    {
                                                        "key": "ca.crt",
                                                        "path": "ca.crt"
                                                    }
                                                ],
                                                "optional": true,
                                                "secretName": "argocd-repo-server-tls"
                                            }
                                        },
                                        {
                                            "emptyDir": {},
                                            "name": "var-files"
                                        },
                                        {
                                            "emptyDir": {},
                                            "name": "plugins"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "annotations": {
                            "deployment.kubernetes.io/revision": "1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"repo-server\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-repo-server\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-repo-server\",\"namespace\":\"argocd\"},\"spec\":{\"selector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-repo-server\"}},\"template\":{\"metadata\":{\"labels\":{\"app.kubernetes.io/name\":\"argocd-repo-server\"}},\"spec\":{\"affinity\":{\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-repo-server\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":100},{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/part-of\":\"argocd\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":5}]}},\"automountServiceAccountToken\":false,\"containers\":[{\"command\":[\"entrypoint.sh\",\"argocd-repo-server\",\"--redis\",\"argocd-redis:6379\"],\"env\":[{\"name\":\"ARGOCD_RECONCILIATION_TIMEOUT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"timeout.reconciliation\",\"name\":\"argocd-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_LOGFORMAT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.log.format\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_LOGLEVEL\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.log.level\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_PARALLELISM_LIMIT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.parallelism.limit\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_DISABLE_TLS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.disable.tls\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_TLS_MIN_VERSION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.tls.minversion\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_TLS_MAX_VERSION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.tls.maxversion\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_TLS_CIPHERS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.tls.ciphers\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_CACHE_EXPIRATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.repo.cache.expiration\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"REDIS_SERVER\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"redis.server\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"REDISDB\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"redis.db\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_DEFAULT_CACHE_EXPIRATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.default.cache.expiration\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"HELM_CACHE_HOME\",\"value\":\"/helm-working-dir\"},{\"name\":\"HELM_CONFIG_HOME\",\"value\":\"/helm-working-dir\"},{\"name\":\"HELM_DATA_HOME\",\"value\":\"/helm-working-dir\"}],\"image\":\"quay.io/argoproj/argocd:v2.2.0\",\"imagePullPolicy\":\"Always\",\"livenessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/healthz?full=true\",\"port\":8084},\"initialDelaySeconds\":30,\"periodSeconds\":5},\"name\":\"argocd-repo-server\",\"ports\":[{\"containerPort\":8081},{\"containerPort\":8084}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":8084},\"initialDelaySeconds\":5,\"periodSeconds\":10},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"all\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true},\"volumeMounts\":[{\"mountPath\":\"/app/config/ssh\",\"name\":\"ssh-known-hosts\"},{\"mountPath\":\"/app/config/tls\",\"name\":\"tls-certs\"},{\"mountPath\":\"/app/config/gpg/source\",\"name\":\"gpg-keys\"},{\"mountPath\":\"/app/config/gpg/keys\",\"name\":\"gpg-keyring\"},{\"mountPath\":\"/app/config/reposerver/tls\",\"name\":\"argocd-repo-server-tls\"},{\"mountPath\":\"/tmp\",\"name\":\"tmp\"},{\"mountPath\":\"/helm-working-dir\",\"name\":\"helm-working-dir\"},{\"mountPath\":\"/home/argocd/cmp-server/plugins\",\"name\":\"plugins\"}]}],\"initContainers\":[{\"command\":[\"cp\",\"-n\",\"/usr/local/bin/argocd\",\"/var/run/argocd/argocd-cmp-server\"],\"image\":\"quay.io/argoproj/argocd:v2.2.0\",\"name\":\"copyutil\",\"volumeMounts\":[{\"mountPath\":\"/var/run/argocd\",\"name\":\"var-files\"}]}],\"volumes\":[{\"configMap\":{\"name\":\"argocd-ssh-known-hosts-cm\"},\"name\":\"ssh-known-hosts\"},{\"configMap\":{\"name\":\"argocd-tls-certs-cm\"},\"name\":\"tls-certs\"},{\"configMap\":{\"name\":\"argocd-gpg-keys-cm\"},\"name\":\"gpg-keys\"},{\"emptyDir\":{},\"name\":\"gpg-keyring\"},{\"emptyDir\":{},\"name\":\"tmp\"},{\"emptyDir\":{},\"name\":\"helm-working-dir\"},{\"name\":\"argocd-repo-server-tls\",\"secret\":{\"items\":[{\"key\":\"tls.crt\",\"path\":\"tls.crt\"},{\"key\":\"tls.key\",\"path\":\"tls.key\"},{\"key\":\"ca.crt\",\"path\":\"ca.crt\"}],\"optional\":true,\"secretName\":\"argocd-repo-server-tls\"}},{\"emptyDir\":{},\"name\":\"var-files\"},{\"emptyDir\":{},\"name\":\"plugins\"}]}}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:49Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/component": "repo-server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-repo-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:progressDeadlineSeconds": {},
                                        "f:replicas": {},
                                        "f:revisionHistoryLimit": {},
                                        "f:selector": {},
                                        "f:strategy": {
                                            "f:rollingUpdate": {
                                                ".": {},
                                                "f:maxSurge": {},
                                                "f:maxUnavailable": {}
                                            },
                                            "f:type": {}
                                        },
                                        "f:template": {
                                            "f:metadata": {
                                                "f:labels": {
                                                    ".": {},
                                                    "f:app.kubernetes.io/name": {}
                                                }
                                            },
                                            "f:spec": {
                                                "f:affinity": {
                                                    ".": {},
                                                    "f:podAntiAffinity": {
                                                        ".": {},
                                                        "f:preferredDuringSchedulingIgnoredDuringExecution": {}
                                                    }
                                                },
                                                "f:automountServiceAccountToken": {},
                                                "f:containers": {
                                                    "k:{\"name\":\"argocd-repo-server\"}": {
                                                        ".": {},
                                                        "f:command": {},
                                                        "f:env": {
                                                            ".": {},
                                                            "k:{\"name\":\"ARGOCD_DEFAULT_CACHE_EXPIRATION\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_RECONCILIATION_TIMEOUT\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_REPO_CACHE_EXPIRATION\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_REPO_SERVER_DISABLE_TLS\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_REPO_SERVER_LOGFORMAT\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_REPO_SERVER_LOGLEVEL\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_REPO_SERVER_PARALLELISM_LIMIT\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_TLS_CIPHERS\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_TLS_MAX_VERSION\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_TLS_MIN_VERSION\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"HELM_CACHE_HOME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"HELM_CONFIG_HOME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"HELM_DATA_HOME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"REDISDB\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"REDIS_SERVER\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "f:image": {},
                                                        "f:imagePullPolicy": {},
                                                        "f:livenessProbe": {
                                                            ".": {},
                                                            "f:failureThreshold": {},
                                                            "f:httpGet": {
                                                                ".": {},
                                                                "f:path": {},
                                                                "f:port": {},
                                                                "f:scheme": {}
                                                            },
                                                            "f:initialDelaySeconds": {},
                                                            "f:periodSeconds": {},
                                                            "f:successThreshold": {},
                                                            "f:timeoutSeconds": {}
                                                        },
                                                        "f:name": {},
                                                        "f:ports": {
                                                            ".": {},
                                                            "k:{\"containerPort\":8081,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:protocol": {}
                                                            },
                                                            "k:{\"containerPort\":8084,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:protocol": {}
                                                            }
                                                        },
                                                        "f:readinessProbe": {
                                                            ".": {},
                                                            "f:failureThreshold": {},
                                                            "f:httpGet": {
                                                                ".": {},
                                                                "f:path": {},
                                                                "f:port": {},
                                                                "f:scheme": {}
                                                            },
                                                            "f:initialDelaySeconds": {},
                                                            "f:periodSeconds": {},
                                                            "f:successThreshold": {},
                                                            "f:timeoutSeconds": {}
                                                        },
                                                        "f:resources": {},
                                                        "f:securityContext": {
                                                            ".": {},
                                                            "f:allowPrivilegeEscalation": {},
                                                            "f:capabilities": {
                                                                ".": {},
                                                                "f:drop": {}
                                                            },
                                                            "f:readOnlyRootFilesystem": {},
                                                            "f:runAsNonRoot": {}
                                                        },
                                                        "f:terminationMessagePath": {},
                                                        "f:terminationMessagePolicy": {},
                                                        "f:volumeMounts": {
                                                            ".": {},
                                                            "k:{\"mountPath\":\"/app/config/gpg/keys\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            },
                                                            "k:{\"mountPath\":\"/app/config/gpg/source\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            },
                                                            "k:{\"mountPath\":\"/app/config/reposerver/tls\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            },
                                                            "k:{\"mountPath\":\"/app/config/ssh\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            },
                                                            "k:{\"mountPath\":\"/app/config/tls\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            },
                                                            "k:{\"mountPath\":\"/helm-working-dir\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            },
                                                            "k:{\"mountPath\":\"/home/argocd/cmp-server/plugins\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            },
                                                            "k:{\"mountPath\":\"/tmp\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            }
                                                        }
                                                    }
                                                },
                                                "f:dnsPolicy": {},
                                                "f:initContainers": {
                                                    ".": {},
                                                    "k:{\"name\":\"copyutil\"}": {
                                                        ".": {},
                                                        "f:command": {},
                                                        "f:image": {},
                                                        "f:imagePullPolicy": {},
                                                        "f:name": {},
                                                        "f:resources": {},
                                                        "f:terminationMessagePath": {},
                                                        "f:terminationMessagePolicy": {},
                                                        "f:volumeMounts": {
                                                            ".": {},
                                                            "k:{\"mountPath\":\"/var/run/argocd\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            }
                                                        }
                                                    }
                                                },
                                                "f:restartPolicy": {},
                                                "f:schedulerName": {},
                                                "f:securityContext": {},
                                                "f:terminationGracePeriodSeconds": {},
                                                "f:volumes": {
                                                    ".": {},
                                                    "k:{\"name\":\"argocd-repo-server-tls\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:secret": {
                                                            ".": {},
                                                            "f:defaultMode": {},
                                                            "f:items": {},
                                                            "f:optional": {},
                                                            "f:secretName": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"gpg-keyring\"}": {
                                                        ".": {},
                                                        "f:emptyDir": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"name\":\"gpg-keys\"}": {
                                                        ".": {},
                                                        "f:configMap": {
                                                            ".": {},
                                                            "f:defaultMode": {},
                                                            "f:name": {}
                                                        },
                                                        "f:name": {}
                                                    },
                                                    "k:{\"name\":\"helm-working-dir\"}": {
                                                        ".": {},
                                                        "f:emptyDir": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"name\":\"plugins\"}": {
                                                        ".": {},
                                                        "f:emptyDir": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"name\":\"ssh-known-hosts\"}": {
                                                        ".": {},
                                                        "f:configMap": {
                                                            ".": {},
                                                            "f:defaultMode": {},
                                                            "f:name": {}
                                                        },
                                                        "f:name": {}
                                                    },
                                                    "k:{\"name\":\"tls-certs\"}": {
                                                        ".": {},
                                                        "f:configMap": {
                                                            ".": {},
                                                            "f:defaultMode": {},
                                                            "f:name": {}
                                                        },
                                                        "f:name": {}
                                                    },
                                                    "k:{\"name\":\"tmp\"}": {
                                                        ".": {},
                                                        "f:emptyDir": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"name\":\"var-files\"}": {
                                                        ".": {},
                                                        "f:emptyDir": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:49Z"
                            },
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            "f:deployment.kubernetes.io/revision": {}
                                        }
                                    },
                                    "f:status": {
                                        "f:availableReplicas": {},
                                        "f:conditions": {
                                            ".": {},
                                            "k:{\"type\":\"Available\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"Progressing\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:observedGeneration": {},
                                        "f:readyReplicas": {},
                                        "f:replicas": {},
                                        "f:updatedReplicas": {}
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:59Z"
                            }
                        ],
                        "name": "argocd-repo-server",
                        "namespace": "argocd",
                        "resourceVersion": "105742",
                        "uid": "07f3ced7-0900-4e1b-8cf3-75097ae8865e"
                    },
                    "spec": {
                        "progressDeadlineSeconds": 600,
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-repo-server"
                            }
                        },
                        "strategy": {
                            "rollingUpdate": {
                                "maxSurge": "25%",
                                "maxUnavailable": "25%"
                            },
                            "type": "RollingUpdate"
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app.kubernetes.io/name": "argocd-repo-server"
                                }
                            },
                            "spec": {
                                "affinity": {
                                    "podAntiAffinity": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": [
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/name": "argocd-repo-server"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 100
                                            },
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/part-of": "argocd"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 5
                                            }
                                        ]
                                    }
                                },
                                "automountServiceAccountToken": false,
                                "containers": [
                                    {
                                        "command": [
                                            "entrypoint.sh",
                                            "argocd-repo-server",
                                            "--redis",
                                            "argocd-redis:6379"
                                        ],
                                        "env": [
                                            {
                                                "name": "ARGOCD_RECONCILIATION_TIMEOUT",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "timeout.reconciliation",
                                                        "name": "argocd-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_REPO_SERVER_LOGFORMAT",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.log.format",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_REPO_SERVER_LOGLEVEL",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.log.level",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_REPO_SERVER_PARALLELISM_LIMIT",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.parallelism.limit",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_REPO_SERVER_DISABLE_TLS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.disable.tls",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_TLS_MIN_VERSION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.tls.minversion",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_TLS_MAX_VERSION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.tls.maxversion",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_TLS_CIPHERS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.tls.ciphers",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_REPO_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.repo.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "REDIS_SERVER",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "redis.server",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "REDISDB",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "redis.db",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_DEFAULT_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "reposerver.default.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "HELM_CACHE_HOME",
                                                "value": "/helm-working-dir"
                                            },
                                            {
                                                "name": "HELM_CONFIG_HOME",
                                                "value": "/helm-working-dir"
                                            },
                                            {
                                                "name": "HELM_DATA_HOME",
                                                "value": "/helm-working-dir"
                                            }
                                        ],
                                        "image": "quay.io/argoproj/argocd:v2.2.0",
                                        "imagePullPolicy": "Always",
                                        "livenessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/healthz?full=true",
                                                "port": 8084,
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 30,
                                            "periodSeconds": 5,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 1
                                        },
                                        "name": "argocd-repo-server",
                                        "ports": [
                                            {
                                                "containerPort": 8081,
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 8084,
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/healthz",
                                                "port": 8084,
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 1
                                        },
                                        "resources": {},
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "capabilities": {
                                                "drop": [
                                                    "all"
                                                ]
                                            },
                                            "readOnlyRootFilesystem": true,
                                            "runAsNonRoot": true
                                        },
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/app/config/ssh",
                                                "name": "ssh-known-hosts"
                                            },
                                            {
                                                "mountPath": "/app/config/tls",
                                                "name": "tls-certs"
                                            },
                                            {
                                                "mountPath": "/app/config/gpg/source",
                                                "name": "gpg-keys"
                                            },
                                            {
                                                "mountPath": "/app/config/gpg/keys",
                                                "name": "gpg-keyring"
                                            },
                                            {
                                                "mountPath": "/app/config/reposerver/tls",
                                                "name": "argocd-repo-server-tls"
                                            },
                                            {
                                                "mountPath": "/tmp",
                                                "name": "tmp"
                                            },
                                            {
                                                "mountPath": "/helm-working-dir",
                                                "name": "helm-working-dir"
                                            },
                                            {
                                                "mountPath": "/home/argocd/cmp-server/plugins",
                                                "name": "plugins"
                                            }
                                        ]
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "initContainers": [
                                    {
                                        "command": [
                                            "cp",
                                            "-n",
                                            "/usr/local/bin/argocd",
                                            "/var/run/argocd/argocd-cmp-server"
                                        ],
                                        "image": "quay.io/argoproj/argocd:v2.2.0",
                                        "imagePullPolicy": "IfNotPresent",
                                        "name": "copyutil",
                                        "resources": {},
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/var/run/argocd",
                                                "name": "var-files"
                                            }
                                        ]
                                    }
                                ],
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {},
                                "terminationGracePeriodSeconds": 30,
                                "volumes": [
                                    {
                                        "configMap": {
                                            "defaultMode": 420,
                                            "name": "argocd-ssh-known-hosts-cm"
                                        },
                                        "name": "ssh-known-hosts"
                                    },
                                    {
                                        "configMap": {
                                            "defaultMode": 420,
                                            "name": "argocd-tls-certs-cm"
                                        },
                                        "name": "tls-certs"
                                    },
                                    {
                                        "configMap": {
                                            "defaultMode": 420,
                                            "name": "argocd-gpg-keys-cm"
                                        },
                                        "name": "gpg-keys"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "gpg-keyring"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "tmp"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "helm-working-dir"
                                    },
                                    {
                                        "name": "argocd-repo-server-tls",
                                        "secret": {
                                            "defaultMode": 420,
                                            "items": [
                                                {
                                                    "key": "tls.crt",
                                                    "path": "tls.crt"
                                                },
                                                {
                                                    "key": "tls.key",
                                                    "path": "tls.key"
                                                },
                                                {
                                                    "key": "ca.crt",
                                                    "path": "ca.crt"
                                                }
                                            ],
                                            "optional": true,
                                            "secretName": "argocd-repo-server-tls"
                                        }
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "var-files"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "plugins"
                                    }
                                ]
                            }
                        }
                    },
                    "status": {
                        "availableReplicas": 1,
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T00:10:59Z",
                                "lastUpdateTime": "2021-12-19T00:10:59Z",
                                "message": "Deployment has minimum availability.",
                                "reason": "MinimumReplicasAvailable",
                                "status": "True",
                                "type": "Available"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T00:10:49Z",
                                "lastUpdateTime": "2021-12-19T00:10:59Z",
                                "message": "ReplicaSet \"argocd-repo-server-789fcb455c\" has successfully progressed.",
                                "reason": "NewReplicaSetAvailable",
                                "status": "True",
                                "type": "Progressing"
                            }
                        ],
                        "observedGeneration": 1,
                        "readyReplicas": 1,
                        "replicas": 1,
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:apps/v1:Deployment::argocd/argocd-server",
                "custom": true,
                "id": "argocd/argocd-server",
                "type": "kubernetes:apps/v1:Deployment",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "argocd-server",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-server"
                            }
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app.kubernetes.io/name": "argocd-server"
                                }
                            },
                            "spec": {
                                "affinity": {
                                    "podAntiAffinity": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": [
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/name": "argocd-server"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 100
                                            },
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/part-of": "argocd"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 5
                                            }
                                        ]
                                    }
                                },
                                "containers": [
                                    {
                                        "command": [
                                            "argocd-server"
                                        ],
                                        "env": [
                                            {
                                                "name": "ARGOCD_SERVER_INSECURE",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.insecure",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_BASEHREF",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.basehref",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_ROOTPATH",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.rootpath",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_LOGFORMAT",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.log.format",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_REPO_SERVER_LOGLEVEL",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.log.level",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_REPO_SERVER",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "repo.server",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_DEX_SERVER",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.dex.server",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_DISABLE_AUTH",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.disable.auth",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_ENABLE_GZIP",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.enable.gzip",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.repo.server.timeout.seconds",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_X_FRAME_OPTIONS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.x.frame.options",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_REPO_SERVER_PLAINTEXT",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.repo.server.plaintext",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_REPO_SERVER_STRICT_TLS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.repo.server.strict.tls",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_TLS_MIN_VERSION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.tls.minversion",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_TLS_MAX_VERSION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.tls.maxversion",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_TLS_CIPHERS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.tls.ciphers",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.connection.status.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_OIDC_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.oidc.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.login.attempts.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_STATIC_ASSETS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.staticassets",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APP_STATE_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.app.state.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "REDIS_SERVER",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "redis.server",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "REDISDB",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "redis.db",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_DEFAULT_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.default.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_MAX_COOKIE_NUMBER",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.http.cookie.maxnumber",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            }
                                        ],
                                        "image": "quay.io/argoproj/argocd:v2.2.0",
                                        "imagePullPolicy": "Always",
                                        "livenessProbe": {
                                            "httpGet": {
                                                "path": "/healthz?full=true",
                                                "port": 8080
                                            },
                                            "initialDelaySeconds": 3,
                                            "periodSeconds": 30
                                        },
                                        "name": "argocd-server",
                                        "ports": [
                                            {
                                                "containerPort": 8080
                                            },
                                            {
                                                "containerPort": 8083
                                            }
                                        ],
                                        "readinessProbe": {
                                            "httpGet": {
                                                "path": "/healthz",
                                                "port": 8080
                                            },
                                            "initialDelaySeconds": 3,
                                            "periodSeconds": 30
                                        },
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "capabilities": {
                                                "drop": [
                                                    "all"
                                                ]
                                            },
                                            "readOnlyRootFilesystem": true,
                                            "runAsNonRoot": true
                                        },
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/app/config/ssh",
                                                "name": "ssh-known-hosts"
                                            },
                                            {
                                                "mountPath": "/app/config/tls",
                                                "name": "tls-certs"
                                            },
                                            {
                                                "mountPath": "/app/config/server/tls",
                                                "name": "argocd-repo-server-tls"
                                            },
                                            {
                                                "mountPath": "/home/argocd",
                                                "name": "plugins-home"
                                            },
                                            {
                                                "mountPath": "/tmp",
                                                "name": "tmp"
                                            }
                                        ]
                                    }
                                ],
                                "serviceAccountName": "argocd-server",
                                "volumes": [
                                    {
                                        "emptyDir": {},
                                        "name": "plugins-home"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "tmp"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "static-files"
                                    },
                                    {
                                        "configMap": {
                                            "name": "argocd-ssh-known-hosts-cm"
                                        },
                                        "name": "ssh-known-hosts"
                                    },
                                    {
                                        "configMap": {
                                            "name": "argocd-tls-certs-cm"
                                        },
                                        "name": "tls-certs"
                                    },
                                    {
                                        "name": "argocd-repo-server-tls",
                                        "secret": {
                                            "items": [
                                                {
                                                    "key": "tls.crt",
                                                    "path": "tls.crt"
                                                },
                                                {
                                                    "key": "tls.key",
                                                    "path": "tls.key"
                                                },
                                                {
                                                    "key": "ca.crt",
                                                    "path": "ca.crt"
                                                }
                                            ],
                                            "optional": true,
                                            "secretName": "argocd-repo-server-tls"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "server",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "argocd-server",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "argocd-server",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "selector": {
                                "matchLabels": {
                                    "app.kubernetes.io/name": "argocd-server"
                                }
                            },
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "app.kubernetes.io/name": "argocd-server"
                                    }
                                },
                                "spec": {
                                    "affinity": {
                                        "podAntiAffinity": {
                                            "preferredDuringSchedulingIgnoredDuringExecution": [
                                                {
                                                    "podAffinityTerm": {
                                                        "labelSelector": {
                                                            "matchLabels": {
                                                                "app.kubernetes.io/name": "argocd-server"
                                                            }
                                                        },
                                                        "topologyKey": "kubernetes.io/hostname"
                                                    },
                                                    "weight": 100
                                                },
                                                {
                                                    "podAffinityTerm": {
                                                        "labelSelector": {
                                                            "matchLabels": {
                                                                "app.kubernetes.io/part-of": "argocd"
                                                            }
                                                        },
                                                        "topologyKey": "kubernetes.io/hostname"
                                                    },
                                                    "weight": 5
                                                }
                                            ]
                                        }
                                    },
                                    "containers": [
                                        {
                                            "command": [
                                                "argocd-server"
                                            ],
                                            "env": [
                                                {
                                                    "name": "ARGOCD_SERVER_INSECURE",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.insecure",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_SERVER_BASEHREF",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.basehref",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_SERVER_ROOTPATH",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.rootpath",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_SERVER_LOGFORMAT",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.log.format",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_REPO_SERVER_LOGLEVEL",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.log.level",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_SERVER_REPO_SERVER",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "repo.server",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_SERVER_DEX_SERVER",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.dex.server",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_SERVER_DISABLE_AUTH",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.disable.auth",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_SERVER_ENABLE_GZIP",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.enable.gzip",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.repo.server.timeout.seconds",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_SERVER_X_FRAME_OPTIONS",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.x.frame.options",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_SERVER_REPO_SERVER_PLAINTEXT",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.repo.server.plaintext",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_SERVER_REPO_SERVER_STRICT_TLS",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.repo.server.strict.tls",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_TLS_MIN_VERSION",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.tls.minversion",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_TLS_MAX_VERSION",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.tls.maxversion",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_TLS_CIPHERS",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.tls.ciphers",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.connection.status.cache.expiration",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_SERVER_OIDC_CACHE_EXPIRATION",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.oidc.cache.expiration",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.login.attempts.expiration",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_SERVER_STATIC_ASSETS",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.staticassets",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_APP_STATE_CACHE_EXPIRATION",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.app.state.cache.expiration",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "REDIS_SERVER",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "redis.server",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "REDISDB",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "redis.db",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_DEFAULT_CACHE_EXPIRATION",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.default.cache.expiration",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "ARGOCD_MAX_COOKIE_NUMBER",
                                                    "valueFrom": {
                                                        "configMapKeyRef": {
                                                            "key": "server.http.cookie.maxnumber",
                                                            "name": "argocd-cmd-params-cm",
                                                            "optional": true
                                                        }
                                                    }
                                                }
                                            ],
                                            "image": "quay.io/argoproj/argocd:v2.2.0",
                                            "imagePullPolicy": "Always",
                                            "livenessProbe": {
                                                "httpGet": {
                                                    "path": "/healthz?full=true",
                                                    "port": 8080
                                                },
                                                "initialDelaySeconds": 3,
                                                "periodSeconds": 30
                                            },
                                            "name": "argocd-server",
                                            "ports": [
                                                {
                                                    "containerPort": 8080
                                                },
                                                {
                                                    "containerPort": 8083
                                                }
                                            ],
                                            "readinessProbe": {
                                                "httpGet": {
                                                    "path": "/healthz",
                                                    "port": 8080
                                                },
                                                "initialDelaySeconds": 3,
                                                "periodSeconds": 30
                                            },
                                            "securityContext": {
                                                "allowPrivilegeEscalation": false,
                                                "capabilities": {
                                                    "drop": [
                                                        "all"
                                                    ]
                                                },
                                                "readOnlyRootFilesystem": true,
                                                "runAsNonRoot": true
                                            },
                                            "volumeMounts": [
                                                {
                                                    "mountPath": "/app/config/ssh",
                                                    "name": "ssh-known-hosts"
                                                },
                                                {
                                                    "mountPath": "/app/config/tls",
                                                    "name": "tls-certs"
                                                },
                                                {
                                                    "mountPath": "/app/config/server/tls",
                                                    "name": "argocd-repo-server-tls"
                                                },
                                                {
                                                    "mountPath": "/home/argocd",
                                                    "name": "plugins-home"
                                                },
                                                {
                                                    "mountPath": "/tmp",
                                                    "name": "tmp"
                                                }
                                            ]
                                        }
                                    ],
                                    "serviceAccountName": "argocd-server",
                                    "volumes": [
                                        {
                                            "emptyDir": {},
                                            "name": "plugins-home"
                                        },
                                        {
                                            "emptyDir": {},
                                            "name": "tmp"
                                        },
                                        {
                                            "emptyDir": {},
                                            "name": "static-files"
                                        },
                                        {
                                            "configMap": {
                                                "name": "argocd-ssh-known-hosts-cm"
                                            },
                                            "name": "ssh-known-hosts"
                                        },
                                        {
                                            "configMap": {
                                                "name": "argocd-tls-certs-cm"
                                            },
                                            "name": "tls-certs"
                                        },
                                        {
                                            "name": "argocd-repo-server-tls",
                                            "secret": {
                                                "items": [
                                                    {
                                                        "key": "tls.crt",
                                                        "path": "tls.crt"
                                                    },
                                                    {
                                                        "key": "tls.key",
                                                        "path": "tls.key"
                                                    },
                                                    {
                                                        "key": "ca.crt",
                                                        "path": "ca.crt"
                                                    }
                                                ],
                                                "optional": true,
                                                "secretName": "argocd-repo-server-tls"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "annotations": {
                            "deployment.kubernetes.io/revision": "1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"server\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"argocd-server\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-server\",\"namespace\":\"argocd\"},\"spec\":{\"selector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-server\"}},\"template\":{\"metadata\":{\"labels\":{\"app.kubernetes.io/name\":\"argocd-server\"}},\"spec\":{\"affinity\":{\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-server\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":100},{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/part-of\":\"argocd\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":5}]}},\"containers\":[{\"command\":[\"argocd-server\"],\"env\":[{\"name\":\"ARGOCD_SERVER_INSECURE\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.insecure\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_BASEHREF\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.basehref\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_ROOTPATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.rootpath\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_LOGFORMAT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.log.format\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_LOGLEVEL\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.log.level\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_REPO_SERVER\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"repo.server\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_DEX_SERVER\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.dex.server\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_DISABLE_AUTH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.disable.auth\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_ENABLE_GZIP\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.enable.gzip\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.repo.server.timeout.seconds\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_X_FRAME_OPTIONS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.x.frame.options\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_REPO_SERVER_PLAINTEXT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.repo.server.plaintext\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_REPO_SERVER_STRICT_TLS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.repo.server.strict.tls\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_TLS_MIN_VERSION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.tls.minversion\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_TLS_MAX_VERSION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.tls.maxversion\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_TLS_CIPHERS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.tls.ciphers\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.connection.status.cache.expiration\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_OIDC_CACHE_EXPIRATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.oidc.cache.expiration\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.login.attempts.expiration\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_STATIC_ASSETS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.staticassets\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APP_STATE_CACHE_EXPIRATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.app.state.cache.expiration\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"REDIS_SERVER\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"redis.server\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"REDISDB\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"redis.db\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_DEFAULT_CACHE_EXPIRATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.default.cache.expiration\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_MAX_COOKIE_NUMBER\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.http.cookie.maxnumber\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}}],\"image\":\"quay.io/argoproj/argocd:v2.2.0\",\"imagePullPolicy\":\"Always\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/healthz?full=true\",\"port\":8080},\"initialDelaySeconds\":3,\"periodSeconds\":30},\"name\":\"argocd-server\",\"ports\":[{\"containerPort\":8080},{\"containerPort\":8083}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":8080},\"initialDelaySeconds\":3,\"periodSeconds\":30},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"all\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true},\"volumeMounts\":[{\"mountPath\":\"/app/config/ssh\",\"name\":\"ssh-known-hosts\"},{\"mountPath\":\"/app/config/tls\",\"name\":\"tls-certs\"},{\"mountPath\":\"/app/config/server/tls\",\"name\":\"argocd-repo-server-tls\"},{\"mountPath\":\"/home/argocd\",\"name\":\"plugins-home\"},{\"mountPath\":\"/tmp\",\"name\":\"tmp\"}]}],\"serviceAccountName\":\"argocd-server\",\"volumes\":[{\"emptyDir\":{},\"name\":\"plugins-home\"},{\"emptyDir\":{},\"name\":\"tmp\"},{\"emptyDir\":{},\"name\":\"static-files\"},{\"configMap\":{\"name\":\"argocd-ssh-known-hosts-cm\"},\"name\":\"ssh-known-hosts\"},{\"configMap\":{\"name\":\"argocd-tls-certs-cm\"},\"name\":\"tls-certs\"},{\"name\":\"argocd-repo-server-tls\",\"secret\":{\"items\":[{\"key\":\"tls.crt\",\"path\":\"tls.crt\"},{\"key\":\"tls.key\",\"path\":\"tls.key\"},{\"key\":\"ca.crt\",\"path\":\"ca.crt\"}],\"optional\":true,\"secretName\":\"argocd-repo-server-tls\"}}]}}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:49Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/component": "server",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "argocd-server",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:progressDeadlineSeconds": {},
                                        "f:replicas": {},
                                        "f:revisionHistoryLimit": {},
                                        "f:selector": {},
                                        "f:strategy": {
                                            "f:rollingUpdate": {
                                                ".": {},
                                                "f:maxSurge": {},
                                                "f:maxUnavailable": {}
                                            },
                                            "f:type": {}
                                        },
                                        "f:template": {
                                            "f:metadata": {
                                                "f:labels": {
                                                    ".": {},
                                                    "f:app.kubernetes.io/name": {}
                                                }
                                            },
                                            "f:spec": {
                                                "f:affinity": {
                                                    ".": {},
                                                    "f:podAntiAffinity": {
                                                        ".": {},
                                                        "f:preferredDuringSchedulingIgnoredDuringExecution": {}
                                                    }
                                                },
                                                "f:containers": {
                                                    "k:{\"name\":\"argocd-server\"}": {
                                                        ".": {},
                                                        "f:command": {},
                                                        "f:env": {
                                                            ".": {},
                                                            "k:{\"name\":\"ARGOCD_APP_STATE_CACHE_EXPIRATION\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_DEFAULT_CACHE_EXPIRATION\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_MAX_COOKIE_NUMBER\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_REPO_SERVER_LOGLEVEL\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_SERVER_BASEHREF\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_SERVER_DEX_SERVER\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_SERVER_DISABLE_AUTH\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_SERVER_ENABLE_GZIP\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_SERVER_INSECURE\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_SERVER_LOGFORMAT\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_SERVER_OIDC_CACHE_EXPIRATION\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_SERVER_REPO_SERVER\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_SERVER_REPO_SERVER_PLAINTEXT\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_SERVER_REPO_SERVER_STRICT_TLS\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_SERVER_ROOTPATH\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_SERVER_STATIC_ASSETS\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_SERVER_X_FRAME_OPTIONS\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_TLS_CIPHERS\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_TLS_MAX_VERSION\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"ARGOCD_TLS_MIN_VERSION\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"REDISDB\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"REDIS_SERVER\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:configMapKeyRef": {
                                                                        ".": {},
                                                                        "f:key": {},
                                                                        "f:name": {},
                                                                        "f:optional": {}
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "f:image": {},
                                                        "f:imagePullPolicy": {},
                                                        "f:livenessProbe": {
                                                            ".": {},
                                                            "f:failureThreshold": {},
                                                            "f:httpGet": {
                                                                ".": {},
                                                                "f:path": {},
                                                                "f:port": {},
                                                                "f:scheme": {}
                                                            },
                                                            "f:initialDelaySeconds": {},
                                                            "f:periodSeconds": {},
                                                            "f:successThreshold": {},
                                                            "f:timeoutSeconds": {}
                                                        },
                                                        "f:name": {},
                                                        "f:ports": {
                                                            ".": {},
                                                            "k:{\"containerPort\":8080,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:protocol": {}
                                                            },
                                                            "k:{\"containerPort\":8083,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:protocol": {}
                                                            }
                                                        },
                                                        "f:readinessProbe": {
                                                            ".": {},
                                                            "f:failureThreshold": {},
                                                            "f:httpGet": {
                                                                ".": {},
                                                                "f:path": {},
                                                                "f:port": {},
                                                                "f:scheme": {}
                                                            },
                                                            "f:initialDelaySeconds": {},
                                                            "f:periodSeconds": {},
                                                            "f:successThreshold": {},
                                                            "f:timeoutSeconds": {}
                                                        },
                                                        "f:resources": {},
                                                        "f:securityContext": {
                                                            ".": {},
                                                            "f:allowPrivilegeEscalation": {},
                                                            "f:capabilities": {
                                                                ".": {},
                                                                "f:drop": {}
                                                            },
                                                            "f:readOnlyRootFilesystem": {},
                                                            "f:runAsNonRoot": {}
                                                        },
                                                        "f:terminationMessagePath": {},
                                                        "f:terminationMessagePolicy": {},
                                                        "f:volumeMounts": {
                                                            ".": {},
                                                            "k:{\"mountPath\":\"/app/config/server/tls\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            },
                                                            "k:{\"mountPath\":\"/app/config/ssh\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            },
                                                            "k:{\"mountPath\":\"/app/config/tls\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            },
                                                            "k:{\"mountPath\":\"/home/argocd\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            },
                                                            "k:{\"mountPath\":\"/tmp\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            }
                                                        }
                                                    }
                                                },
                                                "f:dnsPolicy": {},
                                                "f:restartPolicy": {},
                                                "f:schedulerName": {},
                                                "f:securityContext": {},
                                                "f:serviceAccount": {},
                                                "f:serviceAccountName": {},
                                                "f:terminationGracePeriodSeconds": {},
                                                "f:volumes": {
                                                    ".": {},
                                                    "k:{\"name\":\"argocd-repo-server-tls\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:secret": {
                                                            ".": {},
                                                            "f:defaultMode": {},
                                                            "f:items": {},
                                                            "f:optional": {},
                                                            "f:secretName": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"plugins-home\"}": {
                                                        ".": {},
                                                        "f:emptyDir": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"name\":\"ssh-known-hosts\"}": {
                                                        ".": {},
                                                        "f:configMap": {
                                                            ".": {},
                                                            "f:defaultMode": {},
                                                            "f:name": {}
                                                        },
                                                        "f:name": {}
                                                    },
                                                    "k:{\"name\":\"static-files\"}": {
                                                        ".": {},
                                                        "f:emptyDir": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"name\":\"tls-certs\"}": {
                                                        ".": {},
                                                        "f:configMap": {
                                                            ".": {},
                                                            "f:defaultMode": {},
                                                            "f:name": {}
                                                        },
                                                        "f:name": {}
                                                    },
                                                    "k:{\"name\":\"tmp\"}": {
                                                        ".": {},
                                                        "f:emptyDir": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:49Z"
                            },
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            "f:deployment.kubernetes.io/revision": {}
                                        }
                                    },
                                    "f:status": {
                                        "f:availableReplicas": {},
                                        "f:conditions": {
                                            ".": {},
                                            "k:{\"type\":\"Available\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"Progressing\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:observedGeneration": {},
                                        "f:readyReplicas": {},
                                        "f:replicas": {},
                                        "f:updatedReplicas": {}
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T00:11:19Z"
                            }
                        ],
                        "name": "argocd-server",
                        "namespace": "argocd",
                        "resourceVersion": "105859",
                        "uid": "e419ab63-6033-4ac4-8384-0dd8ff9786ba"
                    },
                    "spec": {
                        "progressDeadlineSeconds": 600,
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/name": "argocd-server"
                            }
                        },
                        "strategy": {
                            "rollingUpdate": {
                                "maxSurge": "25%",
                                "maxUnavailable": "25%"
                            },
                            "type": "RollingUpdate"
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app.kubernetes.io/name": "argocd-server"
                                }
                            },
                            "spec": {
                                "affinity": {
                                    "podAntiAffinity": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": [
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/name": "argocd-server"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 100
                                            },
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/part-of": "argocd"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 5
                                            }
                                        ]
                                    }
                                },
                                "containers": [
                                    {
                                        "command": [
                                            "argocd-server"
                                        ],
                                        "env": [
                                            {
                                                "name": "ARGOCD_SERVER_INSECURE",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.insecure",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_BASEHREF",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.basehref",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_ROOTPATH",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.rootpath",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_LOGFORMAT",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.log.format",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_REPO_SERVER_LOGLEVEL",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.log.level",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_REPO_SERVER",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "repo.server",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_DEX_SERVER",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.dex.server",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_DISABLE_AUTH",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.disable.auth",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_ENABLE_GZIP",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.enable.gzip",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.repo.server.timeout.seconds",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_X_FRAME_OPTIONS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.x.frame.options",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_REPO_SERVER_PLAINTEXT",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.repo.server.plaintext",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_REPO_SERVER_STRICT_TLS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.repo.server.strict.tls",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_TLS_MIN_VERSION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.tls.minversion",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_TLS_MAX_VERSION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.tls.maxversion",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_TLS_CIPHERS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.tls.ciphers",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.connection.status.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_OIDC_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.oidc.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.login.attempts.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_SERVER_STATIC_ASSETS",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.staticassets",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_APP_STATE_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.app.state.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "REDIS_SERVER",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "redis.server",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "REDISDB",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "redis.db",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_DEFAULT_CACHE_EXPIRATION",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.default.cache.expiration",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARGOCD_MAX_COOKIE_NUMBER",
                                                "valueFrom": {
                                                    "configMapKeyRef": {
                                                        "key": "server.http.cookie.maxnumber",
                                                        "name": "argocd-cmd-params-cm",
                                                        "optional": true
                                                    }
                                                }
                                            }
                                        ],
                                        "image": "quay.io/argoproj/argocd:v2.2.0",
                                        "imagePullPolicy": "Always",
                                        "livenessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/healthz?full=true",
                                                "port": 8080,
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 3,
                                            "periodSeconds": 30,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 1
                                        },
                                        "name": "argocd-server",
                                        "ports": [
                                            {
                                                "containerPort": 8080,
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 8083,
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/healthz",
                                                "port": 8080,
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 3,
                                            "periodSeconds": 30,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 1
                                        },
                                        "resources": {},
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "capabilities": {
                                                "drop": [
                                                    "all"
                                                ]
                                            },
                                            "readOnlyRootFilesystem": true,
                                            "runAsNonRoot": true
                                        },
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/app/config/ssh",
                                                "name": "ssh-known-hosts"
                                            },
                                            {
                                                "mountPath": "/app/config/tls",
                                                "name": "tls-certs"
                                            },
                                            {
                                                "mountPath": "/app/config/server/tls",
                                                "name": "argocd-repo-server-tls"
                                            },
                                            {
                                                "mountPath": "/home/argocd",
                                                "name": "plugins-home"
                                            },
                                            {
                                                "mountPath": "/tmp",
                                                "name": "tmp"
                                            }
                                        ]
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {},
                                "serviceAccount": "argocd-server",
                                "serviceAccountName": "argocd-server",
                                "terminationGracePeriodSeconds": 30,
                                "volumes": [
                                    {
                                        "emptyDir": {},
                                        "name": "plugins-home"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "tmp"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "static-files"
                                    },
                                    {
                                        "configMap": {
                                            "defaultMode": 420,
                                            "name": "argocd-ssh-known-hosts-cm"
                                        },
                                        "name": "ssh-known-hosts"
                                    },
                                    {
                                        "configMap": {
                                            "defaultMode": 420,
                                            "name": "argocd-tls-certs-cm"
                                        },
                                        "name": "tls-certs"
                                    },
                                    {
                                        "name": "argocd-repo-server-tls",
                                        "secret": {
                                            "defaultMode": 420,
                                            "items": [
                                                {
                                                    "key": "tls.crt",
                                                    "path": "tls.crt"
                                                },
                                                {
                                                    "key": "tls.key",
                                                    "path": "tls.key"
                                                },
                                                {
                                                    "key": "ca.crt",
                                                    "path": "ca.crt"
                                                }
                                            ],
                                            "optional": true,
                                            "secretName": "argocd-repo-server-tls"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "status": {
                        "availableReplicas": 1,
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T00:11:19Z",
                                "lastUpdateTime": "2021-12-19T00:11:19Z",
                                "message": "Deployment has minimum availability.",
                                "reason": "MinimumReplicasAvailable",
                                "status": "True",
                                "type": "Available"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T00:10:49Z",
                                "lastUpdateTime": "2021-12-19T00:11:19Z",
                                "message": "ReplicaSet \"argocd-server-58f6f497dd\" has successfully progressed.",
                                "reason": "NewReplicaSetAvailable",
                                "status": "True",
                                "type": "Progressing"
                            }
                        ],
                        "observedGeneration": 1,
                        "readyReplicas": 1,
                        "replicas": 1,
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::configmap-pv",
                "custom": false,
                "type": "kubernetes:yaml:ConfigFile",
                "parent": "urn:pulumi:dev::cluster-resources::pulumi:pulumi:Stack::cluster-resources-dev"
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::argocd/applications.argoproj.io",
                "custom": true,
                "id": "applications.argoproj.io",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "applications.argoproj.io",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "name": "applications.argoproj.io",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "group": "argoproj.io",
                        "names": {
                            "kind": "Application",
                            "listKind": "ApplicationList",
                            "plural": "applications",
                            "shortNames": [
                                "app",
                                "apps"
                            ],
                            "singular": "application"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.sync.status",
                                        "name": "Sync Status",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.health.status",
                                        "name": "Health Status",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.sync.revision",
                                        "name": "Revision",
                                        "priority": 10,
                                        "type": "string"
                                    }
                                ],
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "Application is a definition of Application resource.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "operation": {
                                                "description": "Operation contains information about a requested or running operation",
                                                "properties": {
                                                    "info": {
                                                        "description": "Info is a list of informational items for this operation",
                                                        "items": {
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string"
                                                                },
                                                                "value": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "name",
                                                                "value"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "initiatedBy": {
                                                        "description": "InitiatedBy contains information about who initiated the operations",
                                                        "properties": {
                                                            "automated": {
                                                                "description": "Automated is set to true if operation was initiated automatically by the application controller.",
                                                                "type": "boolean"
                                                            },
                                                            "username": {
                                                                "description": "Username contains the name of a user who started operation",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "retry": {
                                                        "description": "Retry controls the strategy to apply if a sync fails",
                                                        "properties": {
                                                            "backoff": {
                                                                "description": "Backoff controls how to backoff on subsequent retries of failed syncs",
                                                                "properties": {
                                                                    "duration": {
                                                                        "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")",
                                                                        "type": "string"
                                                                    },
                                                                    "factor": {
                                                                        "description": "Factor is a factor to multiply the base duration after each failed retry",
                                                                        "format": "int64",
                                                                        "type": "integer"
                                                                    },
                                                                    "maxDuration": {
                                                                        "description": "MaxDuration is the maximum amount of time allowed for the backoff strategy",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "limit": {
                                                                "description": "Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.",
                                                                "format": "int64",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "sync": {
                                                        "description": "Sync contains parameters for the operation",
                                                        "properties": {
                                                            "dryRun": {
                                                                "description": "DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync",
                                                                "type": "boolean"
                                                            },
                                                            "manifests": {
                                                                "description": "Manifests is an optional field that overrides sync source with a local directory for development",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "prune": {
                                                                "description": "Prune specifies to delete resources from the cluster that are no longer tracked in git",
                                                                "type": "boolean"
                                                            },
                                                            "resources": {
                                                                "description": "Resources describes which resources shall be part of the sync",
                                                                "items": {
                                                                    "description": "SyncOperationResource contains resources to sync.",
                                                                    "properties": {
                                                                        "group": {
                                                                            "type": "string"
                                                                        },
                                                                        "kind": {
                                                                            "type": "string"
                                                                        },
                                                                        "name": {
                                                                            "type": "string"
                                                                        },
                                                                        "namespace": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "kind",
                                                                        "name"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "revision": {
                                                                "description": "Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.",
                                                                "type": "string"
                                                            },
                                                            "source": {
                                                                "description": "Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation",
                                                                "properties": {
                                                                    "chart": {
                                                                        "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                        "type": "string"
                                                                    },
                                                                    "directory": {
                                                                        "description": "Directory holds path/directory specific options",
                                                                        "properties": {
                                                                            "exclude": {
                                                                                "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                                "type": "string"
                                                                            },
                                                                            "include": {
                                                                                "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                                "type": "string"
                                                                            },
                                                                            "jsonnet": {
                                                                                "description": "Jsonnet holds options specific to Jsonnet",
                                                                                "properties": {
                                                                                    "extVars": {
                                                                                        "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                        "items": {
                                                                                            "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                            "properties": {
                                                                                                "code": {
                                                                                                    "type": "boolean"
                                                                                                },
                                                                                                "name": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "name",
                                                                                                "value"
                                                                                            ],
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "libs": {
                                                                                        "description": "Additional library search dirs",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "tlas": {
                                                                                        "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                        "items": {
                                                                                            "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                            "properties": {
                                                                                                "code": {
                                                                                                    "type": "boolean"
                                                                                                },
                                                                                                "name": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "name",
                                                                                                "value"
                                                                                            ],
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "recurse": {
                                                                                "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "helm": {
                                                                        "description": "Helm holds helm specific options",
                                                                        "properties": {
                                                                            "fileParameters": {
                                                                                "description": "FileParameters are file parameters to the helm template",
                                                                                "items": {
                                                                                    "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                                    "properties": {
                                                                                        "name": {
                                                                                            "description": "Name is the name of the Helm parameter",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "path": {
                                                                                            "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "parameters": {
                                                                                "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                                "items": {
                                                                                    "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                                    "properties": {
                                                                                        "forceString": {
                                                                                            "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "name": {
                                                                                            "description": "Name is the name of the Helm parameter",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "value": {
                                                                                            "description": "Value is the value for the Helm parameter",
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "passCredentials": {
                                                                                "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                                "type": "boolean"
                                                                            },
                                                                            "releaseName": {
                                                                                "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                                "type": "string"
                                                                            },
                                                                            "valueFiles": {
                                                                                "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "values": {
                                                                                "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                                "type": "string"
                                                                            },
                                                                            "version": {
                                                                                "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "ksonnet": {
                                                                        "description": "Ksonnet holds ksonnet specific options",
                                                                        "properties": {
                                                                            "environment": {
                                                                                "description": "Environment is a ksonnet application environment name",
                                                                                "type": "string"
                                                                            },
                                                                            "parameters": {
                                                                                "description": "Parameters are a list of ksonnet component parameter override values",
                                                                                "items": {
                                                                                    "description": "KsonnetParameter is a ksonnet component parameter",
                                                                                    "properties": {
                                                                                        "component": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "value": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "name",
                                                                                        "value"
                                                                                    ],
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "kustomize": {
                                                                        "description": "Kustomize holds kustomize specific options",
                                                                        "properties": {
                                                                            "commonAnnotations": {
                                                                                "additionalProperties": {
                                                                                    "type": "string"
                                                                                },
                                                                                "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                                "type": "object"
                                                                            },
                                                                            "commonLabels": {
                                                                                "additionalProperties": {
                                                                                    "type": "string"
                                                                                },
                                                                                "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                                "type": "object"
                                                                            },
                                                                            "forceCommonAnnotations": {
                                                                                "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                                "type": "boolean"
                                                                            },
                                                                            "forceCommonLabels": {
                                                                                "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                                "type": "boolean"
                                                                            },
                                                                            "images": {
                                                                                "description": "Images is a list of Kustomize image override specifications",
                                                                                "items": {
                                                                                    "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "namePrefix": {
                                                                                "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                                "type": "string"
                                                                            },
                                                                            "nameSuffix": {
                                                                                "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                                "type": "string"
                                                                            },
                                                                            "version": {
                                                                                "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "path": {
                                                                        "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                        "type": "string"
                                                                    },
                                                                    "plugin": {
                                                                        "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                        "properties": {
                                                                            "env": {
                                                                                "description": "Env is a list of environment variable entries",
                                                                                "items": {
                                                                                    "description": "EnvEntry represents an entry in the application's environment",
                                                                                    "properties": {
                                                                                        "name": {
                                                                                            "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "value": {
                                                                                            "description": "Value is the value of the variable",
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "name",
                                                                                        "value"
                                                                                    ],
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "name": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "repoURL": {
                                                                        "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                        "type": "string"
                                                                    },
                                                                    "targetRevision": {
                                                                        "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "repoURL"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "syncOptions": {
                                                                "description": "SyncOptions provide per-sync sync-options, e.g. Validate=false",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "syncStrategy": {
                                                                "description": "SyncStrategy describes how to perform the sync",
                                                                "properties": {
                                                                    "apply": {
                                                                        "description": "Apply will perform a `kubectl apply` to perform the sync.",
                                                                        "properties": {
                                                                            "force": {
                                                                                "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "hook": {
                                                                        "description": "Hook will submit any referenced resources to perform the sync. This is the default strategy",
                                                                        "properties": {
                                                                            "force": {
                                                                                "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.",
                                                "properties": {
                                                    "destination": {
                                                        "description": "Destination is a reference to the target Kubernetes server and namespace",
                                                        "properties": {
                                                            "name": {
                                                                "description": "Name is an alternate way of specifying the target cluster by its symbolic name",
                                                                "type": "string"
                                                            },
                                                            "namespace": {
                                                                "description": "Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace",
                                                                "type": "string"
                                                            },
                                                            "server": {
                                                                "description": "Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "ignoreDifferences": {
                                                        "description": "IgnoreDifferences is a list of resources and their fields which should be ignored during comparison",
                                                        "items": {
                                                            "description": "ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.",
                                                            "properties": {
                                                                "group": {
                                                                    "type": "string"
                                                                },
                                                                "jqPathExpressions": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "jsonPointers": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "kind": {
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "type": "string"
                                                                },
                                                                "namespace": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "kind"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "info": {
                                                        "description": "Info contains a list of information (URLs, email addresses, and plain text) that relates to the application",
                                                        "items": {
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string"
                                                                },
                                                                "value": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "name",
                                                                "value"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "project": {
                                                        "description": "Project is a reference to the project this application belongs to. The empty string means that application belongs to the 'default' project.",
                                                        "type": "string"
                                                    },
                                                    "revisionHistoryLimit": {
                                                        "description": "RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.",
                                                        "format": "int64",
                                                        "type": "integer"
                                                    },
                                                    "source": {
                                                        "description": "Source is a reference to the location of the application's manifests or chart",
                                                        "properties": {
                                                            "chart": {
                                                                "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                "type": "string"
                                                            },
                                                            "directory": {
                                                                "description": "Directory holds path/directory specific options",
                                                                "properties": {
                                                                    "exclude": {
                                                                        "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                        "type": "string"
                                                                    },
                                                                    "include": {
                                                                        "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                        "type": "string"
                                                                    },
                                                                    "jsonnet": {
                                                                        "description": "Jsonnet holds options specific to Jsonnet",
                                                                        "properties": {
                                                                            "extVars": {
                                                                                "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                "items": {
                                                                                    "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                    "properties": {
                                                                                        "code": {
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "value": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "name",
                                                                                        "value"
                                                                                    ],
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "libs": {
                                                                                "description": "Additional library search dirs",
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "tlas": {
                                                                                "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                "items": {
                                                                                    "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                    "properties": {
                                                                                        "code": {
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "value": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "name",
                                                                                        "value"
                                                                                    ],
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "recurse": {
                                                                        "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "helm": {
                                                                "description": "Helm holds helm specific options",
                                                                "properties": {
                                                                    "fileParameters": {
                                                                        "description": "FileParameters are file parameters to the helm template",
                                                                        "items": {
                                                                            "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                            "properties": {
                                                                                "name": {
                                                                                    "description": "Name is the name of the Helm parameter",
                                                                                    "type": "string"
                                                                                },
                                                                                "path": {
                                                                                    "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "parameters": {
                                                                        "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                        "items": {
                                                                            "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                            "properties": {
                                                                                "forceString": {
                                                                                    "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "name": {
                                                                                    "description": "Name is the name of the Helm parameter",
                                                                                    "type": "string"
                                                                                },
                                                                                "value": {
                                                                                    "description": "Value is the value for the Helm parameter",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "passCredentials": {
                                                                        "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                        "type": "boolean"
                                                                    },
                                                                    "releaseName": {
                                                                        "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                        "type": "string"
                                                                    },
                                                                    "valueFiles": {
                                                                        "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "values": {
                                                                        "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                        "type": "string"
                                                                    },
                                                                    "version": {
                                                                        "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "ksonnet": {
                                                                "description": "Ksonnet holds ksonnet specific options",
                                                                "properties": {
                                                                    "environment": {
                                                                        "description": "Environment is a ksonnet application environment name",
                                                                        "type": "string"
                                                                    },
                                                                    "parameters": {
                                                                        "description": "Parameters are a list of ksonnet component parameter override values",
                                                                        "items": {
                                                                            "description": "KsonnetParameter is a ksonnet component parameter",
                                                                            "properties": {
                                                                                "component": {
                                                                                    "type": "string"
                                                                                },
                                                                                "name": {
                                                                                    "type": "string"
                                                                                },
                                                                                "value": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "name",
                                                                                "value"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "kustomize": {
                                                                "description": "Kustomize holds kustomize specific options",
                                                                "properties": {
                                                                    "commonAnnotations": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                        "type": "object"
                                                                    },
                                                                    "commonLabels": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                        "type": "object"
                                                                    },
                                                                    "forceCommonAnnotations": {
                                                                        "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                        "type": "boolean"
                                                                    },
                                                                    "forceCommonLabels": {
                                                                        "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                        "type": "boolean"
                                                                    },
                                                                    "images": {
                                                                        "description": "Images is a list of Kustomize image override specifications",
                                                                        "items": {
                                                                            "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "namePrefix": {
                                                                        "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                        "type": "string"
                                                                    },
                                                                    "nameSuffix": {
                                                                        "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                        "type": "string"
                                                                    },
                                                                    "version": {
                                                                        "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "path": {
                                                                "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                "type": "string"
                                                            },
                                                            "plugin": {
                                                                "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                "properties": {
                                                                    "env": {
                                                                        "description": "Env is a list of environment variable entries",
                                                                        "items": {
                                                                            "description": "EnvEntry represents an entry in the application's environment",
                                                                            "properties": {
                                                                                "name": {
                                                                                    "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                    "type": "string"
                                                                                },
                                                                                "value": {
                                                                                    "description": "Value is the value of the variable",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "name",
                                                                                "value"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "name": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "repoURL": {
                                                                "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                "type": "string"
                                                            },
                                                            "targetRevision": {
                                                                "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "repoURL"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "syncPolicy": {
                                                        "description": "SyncPolicy controls when and how a sync will be performed",
                                                        "properties": {
                                                            "automated": {
                                                                "description": "Automated will keep an application synced to the target revision",
                                                                "properties": {
                                                                    "allowEmpty": {
                                                                        "description": "AllowEmpty allows apps have zero live resources (default: false)",
                                                                        "type": "boolean"
                                                                    },
                                                                    "prune": {
                                                                        "description": "Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)",
                                                                        "type": "boolean"
                                                                    },
                                                                    "selfHeal": {
                                                                        "description": "SelfHeal specifes whether to revert resources back to their desired state upon modification in the cluster (default: false)",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "retry": {
                                                                "description": "Retry controls failed sync retry behavior",
                                                                "properties": {
                                                                    "backoff": {
                                                                        "description": "Backoff controls how to backoff on subsequent retries of failed syncs",
                                                                        "properties": {
                                                                            "duration": {
                                                                                "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")",
                                                                                "type": "string"
                                                                            },
                                                                            "factor": {
                                                                                "description": "Factor is a factor to multiply the base duration after each failed retry",
                                                                                "format": "int64",
                                                                                "type": "integer"
                                                                            },
                                                                            "maxDuration": {
                                                                                "description": "MaxDuration is the maximum amount of time allowed for the backoff strategy",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "limit": {
                                                                        "description": "Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.",
                                                                        "format": "int64",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "syncOptions": {
                                                                "description": "Options allow you to specify whole app sync-options",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [
                                                    "destination",
                                                    "project",
                                                    "source"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "description": "ApplicationStatus contains status information for the application",
                                                "properties": {
                                                    "conditions": {
                                                        "description": "Conditions is a list of currently observed application conditions",
                                                        "items": {
                                                            "description": "ApplicationCondition contains details about an application condition, which is usally an error or warning",
                                                            "properties": {
                                                                "lastTransitionTime": {
                                                                    "description": "LastTransitionTime is the time the condition was last observed",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "message": {
                                                                    "description": "Message contains human-readable message indicating details about condition",
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Type is an application condition type",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "message",
                                                                "type"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "health": {
                                                        "description": "Health contains information about the application's current health status",
                                                        "properties": {
                                                            "message": {
                                                                "description": "Message is a human-readable informational message describing the health status",
                                                                "type": "string"
                                                            },
                                                            "status": {
                                                                "description": "Status holds the status code of the application or resource",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "history": {
                                                        "description": "History contains information about the application's sync history",
                                                        "items": {
                                                            "description": "RevisionHistory contains history information about a previous sync",
                                                            "properties": {
                                                                "deployStartedAt": {
                                                                    "description": "DeployStartedAt holds the time the sync operation started",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "deployedAt": {
                                                                    "description": "DeployedAt holds the time the sync operation completed",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "id": {
                                                                    "description": "ID is an auto incrementing identifier of the RevisionHistory",
                                                                    "format": "int64",
                                                                    "type": "integer"
                                                                },
                                                                "revision": {
                                                                    "description": "Revision holds the revision the sync was performed against",
                                                                    "type": "string"
                                                                },
                                                                "source": {
                                                                    "description": "Source is a reference to the application source used for the sync operation",
                                                                    "properties": {
                                                                        "chart": {
                                                                            "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                            "type": "string"
                                                                        },
                                                                        "directory": {
                                                                            "description": "Directory holds path/directory specific options",
                                                                            "properties": {
                                                                                "exclude": {
                                                                                    "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                                    "type": "string"
                                                                                },
                                                                                "include": {
                                                                                    "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                                    "type": "string"
                                                                                },
                                                                                "jsonnet": {
                                                                                    "description": "Jsonnet holds options specific to Jsonnet",
                                                                                    "properties": {
                                                                                        "extVars": {
                                                                                            "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                            "items": {
                                                                                                "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                "properties": {
                                                                                                    "code": {
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "name": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "value": {
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "required": [
                                                                                                    "name",
                                                                                                    "value"
                                                                                                ],
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "libs": {
                                                                                            "description": "Additional library search dirs",
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "tlas": {
                                                                                            "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                            "items": {
                                                                                                "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                "properties": {
                                                                                                    "code": {
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "name": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "value": {
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "required": [
                                                                                                    "name",
                                                                                                    "value"
                                                                                                ],
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "recurse": {
                                                                                    "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                                    "type": "boolean"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "helm": {
                                                                            "description": "Helm holds helm specific options",
                                                                            "properties": {
                                                                                "fileParameters": {
                                                                                    "description": "FileParameters are file parameters to the helm template",
                                                                                    "items": {
                                                                                        "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                                        "properties": {
                                                                                            "name": {
                                                                                                "description": "Name is the name of the Helm parameter",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "path": {
                                                                                                "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "parameters": {
                                                                                    "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                                    "items": {
                                                                                        "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                                        "properties": {
                                                                                            "forceString": {
                                                                                                "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "name": {
                                                                                                "description": "Name is the name of the Helm parameter",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "value": {
                                                                                                "description": "Value is the value for the Helm parameter",
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "passCredentials": {
                                                                                    "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "releaseName": {
                                                                                    "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                                    "type": "string"
                                                                                },
                                                                                "valueFiles": {
                                                                                    "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "values": {
                                                                                    "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                                    "type": "string"
                                                                                },
                                                                                "version": {
                                                                                    "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "ksonnet": {
                                                                            "description": "Ksonnet holds ksonnet specific options",
                                                                            "properties": {
                                                                                "environment": {
                                                                                    "description": "Environment is a ksonnet application environment name",
                                                                                    "type": "string"
                                                                                },
                                                                                "parameters": {
                                                                                    "description": "Parameters are a list of ksonnet component parameter override values",
                                                                                    "items": {
                                                                                        "description": "KsonnetParameter is a ksonnet component parameter",
                                                                                        "properties": {
                                                                                            "component": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "name": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "value": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "required": [
                                                                                            "name",
                                                                                            "value"
                                                                                        ],
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "kustomize": {
                                                                            "description": "Kustomize holds kustomize specific options",
                                                                            "properties": {
                                                                                "commonAnnotations": {
                                                                                    "additionalProperties": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                                    "type": "object"
                                                                                },
                                                                                "commonLabels": {
                                                                                    "additionalProperties": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                                    "type": "object"
                                                                                },
                                                                                "forceCommonAnnotations": {
                                                                                    "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "forceCommonLabels": {
                                                                                    "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "images": {
                                                                                    "description": "Images is a list of Kustomize image override specifications",
                                                                                    "items": {
                                                                                        "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "namePrefix": {
                                                                                    "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                                    "type": "string"
                                                                                },
                                                                                "nameSuffix": {
                                                                                    "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                                    "type": "string"
                                                                                },
                                                                                "version": {
                                                                                    "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "path": {
                                                                            "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                            "type": "string"
                                                                        },
                                                                        "plugin": {
                                                                            "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                            "properties": {
                                                                                "env": {
                                                                                    "description": "Env is a list of environment variable entries",
                                                                                    "items": {
                                                                                        "description": "EnvEntry represents an entry in the application's environment",
                                                                                        "properties": {
                                                                                            "name": {
                                                                                                "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "value": {
                                                                                                "description": "Value is the value of the variable",
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "required": [
                                                                                            "name",
                                                                                            "value"
                                                                                        ],
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "name": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "repoURL": {
                                                                            "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                            "type": "string"
                                                                        },
                                                                        "targetRevision": {
                                                                            "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "repoURL"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "required": [
                                                                "deployedAt",
                                                                "id",
                                                                "revision"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "observedAt": {
                                                        "description": "ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "operationState": {
                                                        "description": "OperationState contains information about any ongoing operations, such as a sync",
                                                        "properties": {
                                                            "finishedAt": {
                                                                "description": "FinishedAt contains time of operation completion",
                                                                "format": "date-time",
                                                                "type": "string"
                                                            },
                                                            "message": {
                                                                "description": "Message holds any pertinent messages when attempting to perform operation (typically errors).",
                                                                "type": "string"
                                                            },
                                                            "operation": {
                                                                "description": "Operation is the original requested operation",
                                                                "properties": {
                                                                    "info": {
                                                                        "description": "Info is a list of informational items for this operation",
                                                                        "items": {
                                                                            "properties": {
                                                                                "name": {
                                                                                    "type": "string"
                                                                                },
                                                                                "value": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "name",
                                                                                "value"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "initiatedBy": {
                                                                        "description": "InitiatedBy contains information about who initiated the operations",
                                                                        "properties": {
                                                                            "automated": {
                                                                                "description": "Automated is set to true if operation was initiated automatically by the application controller.",
                                                                                "type": "boolean"
                                                                            },
                                                                            "username": {
                                                                                "description": "Username contains the name of a user who started operation",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "retry": {
                                                                        "description": "Retry controls the strategy to apply if a sync fails",
                                                                        "properties": {
                                                                            "backoff": {
                                                                                "description": "Backoff controls how to backoff on subsequent retries of failed syncs",
                                                                                "properties": {
                                                                                    "duration": {
                                                                                        "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "factor": {
                                                                                        "description": "Factor is a factor to multiply the base duration after each failed retry",
                                                                                        "format": "int64",
                                                                                        "type": "integer"
                                                                                    },
                                                                                    "maxDuration": {
                                                                                        "description": "MaxDuration is the maximum amount of time allowed for the backoff strategy",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "limit": {
                                                                                "description": "Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.",
                                                                                "format": "int64",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "sync": {
                                                                        "description": "Sync contains parameters for the operation",
                                                                        "properties": {
                                                                            "dryRun": {
                                                                                "description": "DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync",
                                                                                "type": "boolean"
                                                                            },
                                                                            "manifests": {
                                                                                "description": "Manifests is an optional field that overrides sync source with a local directory for development",
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "prune": {
                                                                                "description": "Prune specifies to delete resources from the cluster that are no longer tracked in git",
                                                                                "type": "boolean"
                                                                            },
                                                                            "resources": {
                                                                                "description": "Resources describes which resources shall be part of the sync",
                                                                                "items": {
                                                                                    "description": "SyncOperationResource contains resources to sync.",
                                                                                    "properties": {
                                                                                        "group": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "kind": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "namespace": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "kind",
                                                                                        "name"
                                                                                    ],
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "revision": {
                                                                                "description": "Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.",
                                                                                "type": "string"
                                                                            },
                                                                            "source": {
                                                                                "description": "Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation",
                                                                                "properties": {
                                                                                    "chart": {
                                                                                        "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "directory": {
                                                                                        "description": "Directory holds path/directory specific options",
                                                                                        "properties": {
                                                                                            "exclude": {
                                                                                                "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "include": {
                                                                                                "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "jsonnet": {
                                                                                                "description": "Jsonnet holds options specific to Jsonnet",
                                                                                                "properties": {
                                                                                                    "extVars": {
                                                                                                        "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                                        "items": {
                                                                                                            "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                            "properties": {
                                                                                                                "code": {
                                                                                                                    "type": "boolean"
                                                                                                                },
                                                                                                                "name": {
                                                                                                                    "type": "string"
                                                                                                                },
                                                                                                                "value": {
                                                                                                                    "type": "string"
                                                                                                                }
                                                                                                            },
                                                                                                            "required": [
                                                                                                                "name",
                                                                                                                "value"
                                                                                                            ],
                                                                                                            "type": "object"
                                                                                                        },
                                                                                                        "type": "array"
                                                                                                    },
                                                                                                    "libs": {
                                                                                                        "description": "Additional library search dirs",
                                                                                                        "items": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "type": "array"
                                                                                                    },
                                                                                                    "tlas": {
                                                                                                        "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                                        "items": {
                                                                                                            "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                            "properties": {
                                                                                                                "code": {
                                                                                                                    "type": "boolean"
                                                                                                                },
                                                                                                                "name": {
                                                                                                                    "type": "string"
                                                                                                                },
                                                                                                                "value": {
                                                                                                                    "type": "string"
                                                                                                                }
                                                                                                            },
                                                                                                            "required": [
                                                                                                                "name",
                                                                                                                "value"
                                                                                                            ],
                                                                                                            "type": "object"
                                                                                                        },
                                                                                                        "type": "array"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "recurse": {
                                                                                                "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                                                "type": "boolean"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "helm": {
                                                                                        "description": "Helm holds helm specific options",
                                                                                        "properties": {
                                                                                            "fileParameters": {
                                                                                                "description": "FileParameters are file parameters to the helm template",
                                                                                                "items": {
                                                                                                    "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                                                    "properties": {
                                                                                                        "name": {
                                                                                                            "description": "Name is the name of the Helm parameter",
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "path": {
                                                                                                            "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "parameters": {
                                                                                                "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                                                "items": {
                                                                                                    "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                                                    "properties": {
                                                                                                        "forceString": {
                                                                                                            "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                                            "type": "boolean"
                                                                                                        },
                                                                                                        "name": {
                                                                                                            "description": "Name is the name of the Helm parameter",
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "description": "Value is the value for the Helm parameter",
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "passCredentials": {
                                                                                                "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "releaseName": {
                                                                                                "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "valueFiles": {
                                                                                                "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "values": {
                                                                                                "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "version": {
                                                                                                "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "ksonnet": {
                                                                                        "description": "Ksonnet holds ksonnet specific options",
                                                                                        "properties": {
                                                                                            "environment": {
                                                                                                "description": "Environment is a ksonnet application environment name",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "parameters": {
                                                                                                "description": "Parameters are a list of ksonnet component parameter override values",
                                                                                                "items": {
                                                                                                    "description": "KsonnetParameter is a ksonnet component parameter",
                                                                                                    "properties": {
                                                                                                        "component": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "name": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "required": [
                                                                                                        "name",
                                                                                                        "value"
                                                                                                    ],
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "kustomize": {
                                                                                        "description": "Kustomize holds kustomize specific options",
                                                                                        "properties": {
                                                                                            "commonAnnotations": {
                                                                                                "additionalProperties": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                                                "type": "object"
                                                                                            },
                                                                                            "commonLabels": {
                                                                                                "additionalProperties": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                                                "type": "object"
                                                                                            },
                                                                                            "forceCommonAnnotations": {
                                                                                                "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "forceCommonLabels": {
                                                                                                "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "images": {
                                                                                                "description": "Images is a list of Kustomize image override specifications",
                                                                                                "items": {
                                                                                                    "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "namePrefix": {
                                                                                                "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "nameSuffix": {
                                                                                                "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "version": {
                                                                                                "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "path": {
                                                                                        "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "plugin": {
                                                                                        "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                                        "properties": {
                                                                                            "env": {
                                                                                                "description": "Env is a list of environment variable entries",
                                                                                                "items": {
                                                                                                    "description": "EnvEntry represents an entry in the application's environment",
                                                                                                    "properties": {
                                                                                                        "name": {
                                                                                                            "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "description": "Value is the value of the variable",
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "required": [
                                                                                                        "name",
                                                                                                        "value"
                                                                                                    ],
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "name": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "repoURL": {
                                                                                        "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "targetRevision": {
                                                                                        "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "repoURL"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "syncOptions": {
                                                                                "description": "SyncOptions provide per-sync sync-options, e.g. Validate=false",
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "syncStrategy": {
                                                                                "description": "SyncStrategy describes how to perform the sync",
                                                                                "properties": {
                                                                                    "apply": {
                                                                                        "description": "Apply will perform a `kubectl apply` to perform the sync.",
                                                                                        "properties": {
                                                                                            "force": {
                                                                                                "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                                                                                                "type": "boolean"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "hook": {
                                                                                        "description": "Hook will submit any referenced resources to perform the sync. This is the default strategy",
                                                                                        "properties": {
                                                                                            "force": {
                                                                                                "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                                                                                                "type": "boolean"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "phase": {
                                                                "description": "Phase is the current phase of the operation",
                                                                "type": "string"
                                                            },
                                                            "retryCount": {
                                                                "description": "RetryCount contains time of operation retries",
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "startedAt": {
                                                                "description": "StartedAt contains time of operation start",
                                                                "format": "date-time",
                                                                "type": "string"
                                                            },
                                                            "syncResult": {
                                                                "description": "SyncResult is the result of a Sync operation",
                                                                "properties": {
                                                                    "resources": {
                                                                        "description": "Resources contains a list of sync result items for each individual resource in a sync operation",
                                                                        "items": {
                                                                            "description": "ResourceResult holds the operation result details of a specific resource",
                                                                            "properties": {
                                                                                "group": {
                                                                                    "description": "Group specifies the API group of the resource",
                                                                                    "type": "string"
                                                                                },
                                                                                "hookPhase": {
                                                                                    "description": "HookPhase contains the state of any operation associated with this resource OR hook This can also contain values for non-hook resources.",
                                                                                    "type": "string"
                                                                                },
                                                                                "hookType": {
                                                                                    "description": "HookType specifies the type of the hook. Empty for non-hook resources",
                                                                                    "type": "string"
                                                                                },
                                                                                "kind": {
                                                                                    "description": "Kind specifies the API kind of the resource",
                                                                                    "type": "string"
                                                                                },
                                                                                "message": {
                                                                                    "description": "Message contains an informational or error message for the last sync OR operation",
                                                                                    "type": "string"
                                                                                },
                                                                                "name": {
                                                                                    "description": "Name specifies the name of the resource",
                                                                                    "type": "string"
                                                                                },
                                                                                "namespace": {
                                                                                    "description": "Namespace specifies the target namespace of the resource",
                                                                                    "type": "string"
                                                                                },
                                                                                "status": {
                                                                                    "description": "Status holds the final result of the sync. Will be empty if the resources is yet to be applied/pruned and is always zero-value for hooks",
                                                                                    "type": "string"
                                                                                },
                                                                                "syncPhase": {
                                                                                    "description": "SyncPhase indicates the particular phase of the sync that this result was acquired in",
                                                                                    "type": "string"
                                                                                },
                                                                                "version": {
                                                                                    "description": "Version specifies the API version of the resource",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "group",
                                                                                "kind",
                                                                                "name",
                                                                                "namespace",
                                                                                "version"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "revision": {
                                                                        "description": "Revision holds the revision this sync operation was performed to",
                                                                        "type": "string"
                                                                    },
                                                                    "source": {
                                                                        "description": "Source records the application source information of the sync, used for comparing auto-sync",
                                                                        "properties": {
                                                                            "chart": {
                                                                                "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                                "type": "string"
                                                                            },
                                                                            "directory": {
                                                                                "description": "Directory holds path/directory specific options",
                                                                                "properties": {
                                                                                    "exclude": {
                                                                                        "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "include": {
                                                                                        "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "jsonnet": {
                                                                                        "description": "Jsonnet holds options specific to Jsonnet",
                                                                                        "properties": {
                                                                                            "extVars": {
                                                                                                "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                                "items": {
                                                                                                    "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                    "properties": {
                                                                                                        "code": {
                                                                                                            "type": "boolean"
                                                                                                        },
                                                                                                        "name": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "required": [
                                                                                                        "name",
                                                                                                        "value"
                                                                                                    ],
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "libs": {
                                                                                                "description": "Additional library search dirs",
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "tlas": {
                                                                                                "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                                "items": {
                                                                                                    "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                    "properties": {
                                                                                                        "code": {
                                                                                                            "type": "boolean"
                                                                                                        },
                                                                                                        "name": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "required": [
                                                                                                        "name",
                                                                                                        "value"
                                                                                                    ],
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "recurse": {
                                                                                        "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                                        "type": "boolean"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "helm": {
                                                                                "description": "Helm holds helm specific options",
                                                                                "properties": {
                                                                                    "fileParameters": {
                                                                                        "description": "FileParameters are file parameters to the helm template",
                                                                                        "items": {
                                                                                            "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                                            "properties": {
                                                                                                "name": {
                                                                                                    "description": "Name is the name of the Helm parameter",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "path": {
                                                                                                    "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "parameters": {
                                                                                        "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                                        "items": {
                                                                                            "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                                            "properties": {
                                                                                                "forceString": {
                                                                                                    "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                                    "type": "boolean"
                                                                                                },
                                                                                                "name": {
                                                                                                    "description": "Name is the name of the Helm parameter",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "description": "Value is the value for the Helm parameter",
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "passCredentials": {
                                                                                        "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "releaseName": {
                                                                                        "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "valueFiles": {
                                                                                        "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "values": {
                                                                                        "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "version": {
                                                                                        "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "ksonnet": {
                                                                                "description": "Ksonnet holds ksonnet specific options",
                                                                                "properties": {
                                                                                    "environment": {
                                                                                        "description": "Environment is a ksonnet application environment name",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "parameters": {
                                                                                        "description": "Parameters are a list of ksonnet component parameter override values",
                                                                                        "items": {
                                                                                            "description": "KsonnetParameter is a ksonnet component parameter",
                                                                                            "properties": {
                                                                                                "component": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "name": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "name",
                                                                                                "value"
                                                                                            ],
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "kustomize": {
                                                                                "description": "Kustomize holds kustomize specific options",
                                                                                "properties": {
                                                                                    "commonAnnotations": {
                                                                                        "additionalProperties": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                                        "type": "object"
                                                                                    },
                                                                                    "commonLabels": {
                                                                                        "additionalProperties": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                                        "type": "object"
                                                                                    },
                                                                                    "forceCommonAnnotations": {
                                                                                        "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "forceCommonLabels": {
                                                                                        "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "images": {
                                                                                        "description": "Images is a list of Kustomize image override specifications",
                                                                                        "items": {
                                                                                            "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "namePrefix": {
                                                                                        "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "nameSuffix": {
                                                                                        "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "version": {
                                                                                        "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "path": {
                                                                                "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                                "type": "string"
                                                                            },
                                                                            "plugin": {
                                                                                "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                                "properties": {
                                                                                    "env": {
                                                                                        "description": "Env is a list of environment variable entries",
                                                                                        "items": {
                                                                                            "description": "EnvEntry represents an entry in the application's environment",
                                                                                            "properties": {
                                                                                                "name": {
                                                                                                    "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "description": "Value is the value of the variable",
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "name",
                                                                                                "value"
                                                                                            ],
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "repoURL": {
                                                                                "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                                "type": "string"
                                                                            },
                                                                            "targetRevision": {
                                                                                "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "repoURL"
                                                                        ],
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "revision"
                                                                ],
                                                                "type": "object"
                                                            }
                                                        },
                                                        "required": [
                                                            "operation",
                                                            "phase",
                                                            "startedAt"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "reconciledAt": {
                                                        "description": "ReconciledAt indicates when the application state was reconciled using the latest git version",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "resources": {
                                                        "description": "Resources is a list of Kubernetes resources managed by this application",
                                                        "items": {
                                                            "description": "ResourceStatus holds the current sync and health status of a resource TODO: describe members of this type",
                                                            "properties": {
                                                                "group": {
                                                                    "type": "string"
                                                                },
                                                                "health": {
                                                                    "description": "HealthStatus contains information about the currently observed health state of an application or resource",
                                                                    "properties": {
                                                                        "message": {
                                                                            "description": "Message is a human-readable informational message describing the health status",
                                                                            "type": "string"
                                                                        },
                                                                        "status": {
                                                                            "description": "Status holds the status code of the application or resource",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "hook": {
                                                                    "type": "boolean"
                                                                },
                                                                "kind": {
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "type": "string"
                                                                },
                                                                "namespace": {
                                                                    "type": "string"
                                                                },
                                                                "requiresPruning": {
                                                                    "type": "boolean"
                                                                },
                                                                "status": {
                                                                    "description": "SyncStatusCode is a type which represents possible comparison results",
                                                                    "type": "string"
                                                                },
                                                                "version": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "sourceType": {
                                                        "description": "SourceType specifies the type of this application",
                                                        "type": "string"
                                                    },
                                                    "summary": {
                                                        "description": "Summary contains a list of URLs and container images used by this application",
                                                        "properties": {
                                                            "externalURLs": {
                                                                "description": "ExternalURLs holds all external URLs of application child resources.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "images": {
                                                                "description": "Images holds all images of application child resources.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "sync": {
                                                        "description": "Sync contains information about the application's current sync status",
                                                        "properties": {
                                                            "comparedTo": {
                                                                "description": "ComparedTo contains information about what has been compared",
                                                                "properties": {
                                                                    "destination": {
                                                                        "description": "Destination is a reference to the application's destination used for comparison",
                                                                        "properties": {
                                                                            "name": {
                                                                                "description": "Name is an alternate way of specifying the target cluster by its symbolic name",
                                                                                "type": "string"
                                                                            },
                                                                            "namespace": {
                                                                                "description": "Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace",
                                                                                "type": "string"
                                                                            },
                                                                            "server": {
                                                                                "description": "Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "source": {
                                                                        "description": "Source is a reference to the application's source used for comparison",
                                                                        "properties": {
                                                                            "chart": {
                                                                                "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                                "type": "string"
                                                                            },
                                                                            "directory": {
                                                                                "description": "Directory holds path/directory specific options",
                                                                                "properties": {
                                                                                    "exclude": {
                                                                                        "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "include": {
                                                                                        "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "jsonnet": {
                                                                                        "description": "Jsonnet holds options specific to Jsonnet",
                                                                                        "properties": {
                                                                                            "extVars": {
                                                                                                "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                                "items": {
                                                                                                    "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                    "properties": {
                                                                                                        "code": {
                                                                                                            "type": "boolean"
                                                                                                        },
                                                                                                        "name": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "required": [
                                                                                                        "name",
                                                                                                        "value"
                                                                                                    ],
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "libs": {
                                                                                                "description": "Additional library search dirs",
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "tlas": {
                                                                                                "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                                "items": {
                                                                                                    "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                    "properties": {
                                                                                                        "code": {
                                                                                                            "type": "boolean"
                                                                                                        },
                                                                                                        "name": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "required": [
                                                                                                        "name",
                                                                                                        "value"
                                                                                                    ],
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "recurse": {
                                                                                        "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                                        "type": "boolean"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "helm": {
                                                                                "description": "Helm holds helm specific options",
                                                                                "properties": {
                                                                                    "fileParameters": {
                                                                                        "description": "FileParameters are file parameters to the helm template",
                                                                                        "items": {
                                                                                            "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                                            "properties": {
                                                                                                "name": {
                                                                                                    "description": "Name is the name of the Helm parameter",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "path": {
                                                                                                    "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "parameters": {
                                                                                        "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                                        "items": {
                                                                                            "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                                            "properties": {
                                                                                                "forceString": {
                                                                                                    "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                                    "type": "boolean"
                                                                                                },
                                                                                                "name": {
                                                                                                    "description": "Name is the name of the Helm parameter",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "description": "Value is the value for the Helm parameter",
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "passCredentials": {
                                                                                        "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "releaseName": {
                                                                                        "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "valueFiles": {
                                                                                        "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "values": {
                                                                                        "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "version": {
                                                                                        "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "ksonnet": {
                                                                                "description": "Ksonnet holds ksonnet specific options",
                                                                                "properties": {
                                                                                    "environment": {
                                                                                        "description": "Environment is a ksonnet application environment name",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "parameters": {
                                                                                        "description": "Parameters are a list of ksonnet component parameter override values",
                                                                                        "items": {
                                                                                            "description": "KsonnetParameter is a ksonnet component parameter",
                                                                                            "properties": {
                                                                                                "component": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "name": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "name",
                                                                                                "value"
                                                                                            ],
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "kustomize": {
                                                                                "description": "Kustomize holds kustomize specific options",
                                                                                "properties": {
                                                                                    "commonAnnotations": {
                                                                                        "additionalProperties": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                                        "type": "object"
                                                                                    },
                                                                                    "commonLabels": {
                                                                                        "additionalProperties": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                                        "type": "object"
                                                                                    },
                                                                                    "forceCommonAnnotations": {
                                                                                        "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "forceCommonLabels": {
                                                                                        "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "images": {
                                                                                        "description": "Images is a list of Kustomize image override specifications",
                                                                                        "items": {
                                                                                            "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "namePrefix": {
                                                                                        "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "nameSuffix": {
                                                                                        "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "version": {
                                                                                        "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "path": {
                                                                                "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                                "type": "string"
                                                                            },
                                                                            "plugin": {
                                                                                "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                                "properties": {
                                                                                    "env": {
                                                                                        "description": "Env is a list of environment variable entries",
                                                                                        "items": {
                                                                                            "description": "EnvEntry represents an entry in the application's environment",
                                                                                            "properties": {
                                                                                                "name": {
                                                                                                    "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "description": "Value is the value of the variable",
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "name",
                                                                                                "value"
                                                                                            ],
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "repoURL": {
                                                                                "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                                "type": "string"
                                                                            },
                                                                            "targetRevision": {
                                                                                "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "repoURL"
                                                                        ],
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "destination",
                                                                    "source"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "revision": {
                                                                "description": "Revision contains information about the revision the comparison has been performed to",
                                                                "type": "string"
                                                            },
                                                            "status": {
                                                                "description": "Status is the sync state of the comparison",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "status"
                                                        ],
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {}
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "applications.argoproj.io",
                                "app.kubernetes.io/part-of": "argocd"
                            },
                            "name": "applications.argoproj.io",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "group": "argoproj.io",
                            "names": {
                                "kind": "Application",
                                "listKind": "ApplicationList",
                                "plural": "applications",
                                "shortNames": [
                                    "app",
                                    "apps"
                                ],
                                "singular": "application"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "additionalPrinterColumns": [
                                        {
                                            "jsonPath": ".status.sync.status",
                                            "name": "Sync Status",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.health.status",
                                            "name": "Health Status",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.sync.revision",
                                            "name": "Revision",
                                            "priority": 10,
                                            "type": "string"
                                        }
                                    ],
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "Application is a definition of Application resource.",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "operation": {
                                                    "description": "Operation contains information about a requested or running operation",
                                                    "properties": {
                                                        "info": {
                                                            "description": "Info is a list of informational items for this operation",
                                                            "items": {
                                                                "properties": {
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "value": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "name",
                                                                    "value"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "initiatedBy": {
                                                            "description": "InitiatedBy contains information about who initiated the operations",
                                                            "properties": {
                                                                "automated": {
                                                                    "description": "Automated is set to true if operation was initiated automatically by the application controller.",
                                                                    "type": "boolean"
                                                                },
                                                                "username": {
                                                                    "description": "Username contains the name of a user who started operation",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "retry": {
                                                            "description": "Retry controls the strategy to apply if a sync fails",
                                                            "properties": {
                                                                "backoff": {
                                                                    "description": "Backoff controls how to backoff on subsequent retries of failed syncs",
                                                                    "properties": {
                                                                        "duration": {
                                                                            "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")",
                                                                            "type": "string"
                                                                        },
                                                                        "factor": {
                                                                            "description": "Factor is a factor to multiply the base duration after each failed retry",
                                                                            "format": "int64",
                                                                            "type": "integer"
                                                                        },
                                                                        "maxDuration": {
                                                                            "description": "MaxDuration is the maximum amount of time allowed for the backoff strategy",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "limit": {
                                                                    "description": "Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.",
                                                                    "format": "int64",
                                                                    "type": "integer"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "sync": {
                                                            "description": "Sync contains parameters for the operation",
                                                            "properties": {
                                                                "dryRun": {
                                                                    "description": "DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync",
                                                                    "type": "boolean"
                                                                },
                                                                "manifests": {
                                                                    "description": "Manifests is an optional field that overrides sync source with a local directory for development",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "prune": {
                                                                    "description": "Prune specifies to delete resources from the cluster that are no longer tracked in git",
                                                                    "type": "boolean"
                                                                },
                                                                "resources": {
                                                                    "description": "Resources describes which resources shall be part of the sync",
                                                                    "items": {
                                                                        "description": "SyncOperationResource contains resources to sync.",
                                                                        "properties": {
                                                                            "group": {
                                                                                "type": "string"
                                                                            },
                                                                            "kind": {
                                                                                "type": "string"
                                                                            },
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "namespace": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "kind",
                                                                            "name"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "revision": {
                                                                    "description": "Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.",
                                                                    "type": "string"
                                                                },
                                                                "source": {
                                                                    "description": "Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation",
                                                                    "properties": {
                                                                        "chart": {
                                                                            "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                            "type": "string"
                                                                        },
                                                                        "directory": {
                                                                            "description": "Directory holds path/directory specific options",
                                                                            "properties": {
                                                                                "exclude": {
                                                                                    "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                                    "type": "string"
                                                                                },
                                                                                "include": {
                                                                                    "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                                    "type": "string"
                                                                                },
                                                                                "jsonnet": {
                                                                                    "description": "Jsonnet holds options specific to Jsonnet",
                                                                                    "properties": {
                                                                                        "extVars": {
                                                                                            "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                            "items": {
                                                                                                "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                "properties": {
                                                                                                    "code": {
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "name": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "value": {
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "required": [
                                                                                                    "name",
                                                                                                    "value"
                                                                                                ],
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "libs": {
                                                                                            "description": "Additional library search dirs",
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "tlas": {
                                                                                            "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                            "items": {
                                                                                                "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                "properties": {
                                                                                                    "code": {
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "name": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "value": {
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "required": [
                                                                                                    "name",
                                                                                                    "value"
                                                                                                ],
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "recurse": {
                                                                                    "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                                    "type": "boolean"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "helm": {
                                                                            "description": "Helm holds helm specific options",
                                                                            "properties": {
                                                                                "fileParameters": {
                                                                                    "description": "FileParameters are file parameters to the helm template",
                                                                                    "items": {
                                                                                        "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                                        "properties": {
                                                                                            "name": {
                                                                                                "description": "Name is the name of the Helm parameter",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "path": {
                                                                                                "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "parameters": {
                                                                                    "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                                    "items": {
                                                                                        "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                                        "properties": {
                                                                                            "forceString": {
                                                                                                "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "name": {
                                                                                                "description": "Name is the name of the Helm parameter",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "value": {
                                                                                                "description": "Value is the value for the Helm parameter",
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "passCredentials": {
                                                                                    "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "releaseName": {
                                                                                    "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                                    "type": "string"
                                                                                },
                                                                                "valueFiles": {
                                                                                    "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "values": {
                                                                                    "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                                    "type": "string"
                                                                                },
                                                                                "version": {
                                                                                    "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "ksonnet": {
                                                                            "description": "Ksonnet holds ksonnet specific options",
                                                                            "properties": {
                                                                                "environment": {
                                                                                    "description": "Environment is a ksonnet application environment name",
                                                                                    "type": "string"
                                                                                },
                                                                                "parameters": {
                                                                                    "description": "Parameters are a list of ksonnet component parameter override values",
                                                                                    "items": {
                                                                                        "description": "KsonnetParameter is a ksonnet component parameter",
                                                                                        "properties": {
                                                                                            "component": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "name": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "value": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "required": [
                                                                                            "name",
                                                                                            "value"
                                                                                        ],
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "kustomize": {
                                                                            "description": "Kustomize holds kustomize specific options",
                                                                            "properties": {
                                                                                "commonAnnotations": {
                                                                                    "additionalProperties": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                                    "type": "object"
                                                                                },
                                                                                "commonLabels": {
                                                                                    "additionalProperties": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                                    "type": "object"
                                                                                },
                                                                                "forceCommonAnnotations": {
                                                                                    "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "forceCommonLabels": {
                                                                                    "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "images": {
                                                                                    "description": "Images is a list of Kustomize image override specifications",
                                                                                    "items": {
                                                                                        "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "namePrefix": {
                                                                                    "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                                    "type": "string"
                                                                                },
                                                                                "nameSuffix": {
                                                                                    "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                                    "type": "string"
                                                                                },
                                                                                "version": {
                                                                                    "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "path": {
                                                                            "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                            "type": "string"
                                                                        },
                                                                        "plugin": {
                                                                            "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                            "properties": {
                                                                                "env": {
                                                                                    "description": "Env is a list of environment variable entries",
                                                                                    "items": {
                                                                                        "description": "EnvEntry represents an entry in the application's environment",
                                                                                        "properties": {
                                                                                            "name": {
                                                                                                "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "value": {
                                                                                                "description": "Value is the value of the variable",
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "required": [
                                                                                            "name",
                                                                                            "value"
                                                                                        ],
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "name": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "repoURL": {
                                                                            "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                            "type": "string"
                                                                        },
                                                                        "targetRevision": {
                                                                            "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "repoURL"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "syncOptions": {
                                                                    "description": "SyncOptions provide per-sync sync-options, e.g. Validate=false",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "syncStrategy": {
                                                                    "description": "SyncStrategy describes how to perform the sync",
                                                                    "properties": {
                                                                        "apply": {
                                                                            "description": "Apply will perform a `kubectl apply` to perform the sync.",
                                                                            "properties": {
                                                                                "force": {
                                                                                    "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                                                                                    "type": "boolean"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "hook": {
                                                                            "description": "Hook will submit any referenced resources to perform the sync. This is the default strategy",
                                                                            "properties": {
                                                                                "force": {
                                                                                    "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                                                                                    "type": "boolean"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.",
                                                    "properties": {
                                                        "destination": {
                                                            "description": "Destination is a reference to the target Kubernetes server and namespace",
                                                            "properties": {
                                                                "name": {
                                                                    "description": "Name is an alternate way of specifying the target cluster by its symbolic name",
                                                                    "type": "string"
                                                                },
                                                                "namespace": {
                                                                    "description": "Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace",
                                                                    "type": "string"
                                                                },
                                                                "server": {
                                                                    "description": "Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "ignoreDifferences": {
                                                            "description": "IgnoreDifferences is a list of resources and their fields which should be ignored during comparison",
                                                            "items": {
                                                                "description": "ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.",
                                                                "properties": {
                                                                    "group": {
                                                                        "type": "string"
                                                                    },
                                                                    "jqPathExpressions": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "jsonPointers": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "kind": {
                                                                        "type": "string"
                                                                    },
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "namespace": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "kind"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "info": {
                                                            "description": "Info contains a list of information (URLs, email addresses, and plain text) that relates to the application",
                                                            "items": {
                                                                "properties": {
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "value": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "name",
                                                                    "value"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "project": {
                                                            "description": "Project is a reference to the project this application belongs to. The empty string means that application belongs to the 'default' project.",
                                                            "type": "string"
                                                        },
                                                        "revisionHistoryLimit": {
                                                            "description": "RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.",
                                                            "format": "int64",
                                                            "type": "integer"
                                                        },
                                                        "source": {
                                                            "description": "Source is a reference to the location of the application's manifests or chart",
                                                            "properties": {
                                                                "chart": {
                                                                    "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                    "type": "string"
                                                                },
                                                                "directory": {
                                                                    "description": "Directory holds path/directory specific options",
                                                                    "properties": {
                                                                        "exclude": {
                                                                            "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                            "type": "string"
                                                                        },
                                                                        "include": {
                                                                            "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                            "type": "string"
                                                                        },
                                                                        "jsonnet": {
                                                                            "description": "Jsonnet holds options specific to Jsonnet",
                                                                            "properties": {
                                                                                "extVars": {
                                                                                    "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                    "items": {
                                                                                        "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                        "properties": {
                                                                                            "code": {
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "name": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "value": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "required": [
                                                                                            "name",
                                                                                            "value"
                                                                                        ],
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "libs": {
                                                                                    "description": "Additional library search dirs",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "tlas": {
                                                                                    "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                    "items": {
                                                                                        "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                        "properties": {
                                                                                            "code": {
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "name": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "value": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "required": [
                                                                                            "name",
                                                                                            "value"
                                                                                        ],
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "recurse": {
                                                                            "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                            "type": "boolean"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "helm": {
                                                                    "description": "Helm holds helm specific options",
                                                                    "properties": {
                                                                        "fileParameters": {
                                                                            "description": "FileParameters are file parameters to the helm template",
                                                                            "items": {
                                                                                "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                                "properties": {
                                                                                    "name": {
                                                                                        "description": "Name is the name of the Helm parameter",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "path": {
                                                                                        "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        },
                                                                        "parameters": {
                                                                            "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                            "items": {
                                                                                "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                                "properties": {
                                                                                    "forceString": {
                                                                                        "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "name": {
                                                                                        "description": "Name is the name of the Helm parameter",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "value": {
                                                                                        "description": "Value is the value for the Helm parameter",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        },
                                                                        "passCredentials": {
                                                                            "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                            "type": "boolean"
                                                                        },
                                                                        "releaseName": {
                                                                            "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                            "type": "string"
                                                                        },
                                                                        "valueFiles": {
                                                                            "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array"
                                                                        },
                                                                        "values": {
                                                                            "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                            "type": "string"
                                                                        },
                                                                        "version": {
                                                                            "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "ksonnet": {
                                                                    "description": "Ksonnet holds ksonnet specific options",
                                                                    "properties": {
                                                                        "environment": {
                                                                            "description": "Environment is a ksonnet application environment name",
                                                                            "type": "string"
                                                                        },
                                                                        "parameters": {
                                                                            "description": "Parameters are a list of ksonnet component parameter override values",
                                                                            "items": {
                                                                                "description": "KsonnetParameter is a ksonnet component parameter",
                                                                                "properties": {
                                                                                    "component": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "value": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "name",
                                                                                    "value"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "kustomize": {
                                                                    "description": "Kustomize holds kustomize specific options",
                                                                    "properties": {
                                                                        "commonAnnotations": {
                                                                            "additionalProperties": {
                                                                                "type": "string"
                                                                            },
                                                                            "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                            "type": "object"
                                                                        },
                                                                        "commonLabels": {
                                                                            "additionalProperties": {
                                                                                "type": "string"
                                                                            },
                                                                            "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                            "type": "object"
                                                                        },
                                                                        "forceCommonAnnotations": {
                                                                            "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                            "type": "boolean"
                                                                        },
                                                                        "forceCommonLabels": {
                                                                            "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                            "type": "boolean"
                                                                        },
                                                                        "images": {
                                                                            "description": "Images is a list of Kustomize image override specifications",
                                                                            "items": {
                                                                                "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array"
                                                                        },
                                                                        "namePrefix": {
                                                                            "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                            "type": "string"
                                                                        },
                                                                        "nameSuffix": {
                                                                            "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                            "type": "string"
                                                                        },
                                                                        "version": {
                                                                            "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "path": {
                                                                    "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                    "type": "string"
                                                                },
                                                                "plugin": {
                                                                    "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                    "properties": {
                                                                        "env": {
                                                                            "description": "Env is a list of environment variable entries",
                                                                            "items": {
                                                                                "description": "EnvEntry represents an entry in the application's environment",
                                                                                "properties": {
                                                                                    "name": {
                                                                                        "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "value": {
                                                                                        "description": "Value is the value of the variable",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "name",
                                                                                    "value"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        },
                                                                        "name": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "repoURL": {
                                                                    "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                    "type": "string"
                                                                },
                                                                "targetRevision": {
                                                                    "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "repoURL"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "syncPolicy": {
                                                            "description": "SyncPolicy controls when and how a sync will be performed",
                                                            "properties": {
                                                                "automated": {
                                                                    "description": "Automated will keep an application synced to the target revision",
                                                                    "properties": {
                                                                        "allowEmpty": {
                                                                            "description": "AllowEmpty allows apps have zero live resources (default: false)",
                                                                            "type": "boolean"
                                                                        },
                                                                        "prune": {
                                                                            "description": "Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)",
                                                                            "type": "boolean"
                                                                        },
                                                                        "selfHeal": {
                                                                            "description": "SelfHeal specifes whether to revert resources back to their desired state upon modification in the cluster (default: false)",
                                                                            "type": "boolean"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "retry": {
                                                                    "description": "Retry controls failed sync retry behavior",
                                                                    "properties": {
                                                                        "backoff": {
                                                                            "description": "Backoff controls how to backoff on subsequent retries of failed syncs",
                                                                            "properties": {
                                                                                "duration": {
                                                                                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")",
                                                                                    "type": "string"
                                                                                },
                                                                                "factor": {
                                                                                    "description": "Factor is a factor to multiply the base duration after each failed retry",
                                                                                    "format": "int64",
                                                                                    "type": "integer"
                                                                                },
                                                                                "maxDuration": {
                                                                                    "description": "MaxDuration is the maximum amount of time allowed for the backoff strategy",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "limit": {
                                                                            "description": "Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.",
                                                                            "format": "int64",
                                                                            "type": "integer"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "syncOptions": {
                                                                    "description": "Options allow you to specify whole app sync-options",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "required": [
                                                        "destination",
                                                        "project",
                                                        "source"
                                                    ],
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "ApplicationStatus contains status information for the application",
                                                    "properties": {
                                                        "conditions": {
                                                            "description": "Conditions is a list of currently observed application conditions",
                                                            "items": {
                                                                "description": "ApplicationCondition contains details about an application condition, which is usally an error or warning",
                                                                "properties": {
                                                                    "lastTransitionTime": {
                                                                        "description": "LastTransitionTime is the time the condition was last observed",
                                                                        "format": "date-time",
                                                                        "type": "string"
                                                                    },
                                                                    "message": {
                                                                        "description": "Message contains human-readable message indicating details about condition",
                                                                        "type": "string"
                                                                    },
                                                                    "type": {
                                                                        "description": "Type is an application condition type",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "message",
                                                                    "type"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "health": {
                                                            "description": "Health contains information about the application's current health status",
                                                            "properties": {
                                                                "message": {
                                                                    "description": "Message is a human-readable informational message describing the health status",
                                                                    "type": "string"
                                                                },
                                                                "status": {
                                                                    "description": "Status holds the status code of the application or resource",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "history": {
                                                            "description": "History contains information about the application's sync history",
                                                            "items": {
                                                                "description": "RevisionHistory contains history information about a previous sync",
                                                                "properties": {
                                                                    "deployStartedAt": {
                                                                        "description": "DeployStartedAt holds the time the sync operation started",
                                                                        "format": "date-time",
                                                                        "type": "string"
                                                                    },
                                                                    "deployedAt": {
                                                                        "description": "DeployedAt holds the time the sync operation completed",
                                                                        "format": "date-time",
                                                                        "type": "string"
                                                                    },
                                                                    "id": {
                                                                        "description": "ID is an auto incrementing identifier of the RevisionHistory",
                                                                        "format": "int64",
                                                                        "type": "integer"
                                                                    },
                                                                    "revision": {
                                                                        "description": "Revision holds the revision the sync was performed against",
                                                                        "type": "string"
                                                                    },
                                                                    "source": {
                                                                        "description": "Source is a reference to the application source used for the sync operation",
                                                                        "properties": {
                                                                            "chart": {
                                                                                "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                                "type": "string"
                                                                            },
                                                                            "directory": {
                                                                                "description": "Directory holds path/directory specific options",
                                                                                "properties": {
                                                                                    "exclude": {
                                                                                        "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "include": {
                                                                                        "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "jsonnet": {
                                                                                        "description": "Jsonnet holds options specific to Jsonnet",
                                                                                        "properties": {
                                                                                            "extVars": {
                                                                                                "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                                "items": {
                                                                                                    "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                    "properties": {
                                                                                                        "code": {
                                                                                                            "type": "boolean"
                                                                                                        },
                                                                                                        "name": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "required": [
                                                                                                        "name",
                                                                                                        "value"
                                                                                                    ],
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "libs": {
                                                                                                "description": "Additional library search dirs",
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "tlas": {
                                                                                                "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                                "items": {
                                                                                                    "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                    "properties": {
                                                                                                        "code": {
                                                                                                            "type": "boolean"
                                                                                                        },
                                                                                                        "name": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "required": [
                                                                                                        "name",
                                                                                                        "value"
                                                                                                    ],
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "recurse": {
                                                                                        "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                                        "type": "boolean"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "helm": {
                                                                                "description": "Helm holds helm specific options",
                                                                                "properties": {
                                                                                    "fileParameters": {
                                                                                        "description": "FileParameters are file parameters to the helm template",
                                                                                        "items": {
                                                                                            "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                                            "properties": {
                                                                                                "name": {
                                                                                                    "description": "Name is the name of the Helm parameter",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "path": {
                                                                                                    "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "parameters": {
                                                                                        "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                                        "items": {
                                                                                            "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                                            "properties": {
                                                                                                "forceString": {
                                                                                                    "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                                    "type": "boolean"
                                                                                                },
                                                                                                "name": {
                                                                                                    "description": "Name is the name of the Helm parameter",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "description": "Value is the value for the Helm parameter",
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "passCredentials": {
                                                                                        "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "releaseName": {
                                                                                        "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "valueFiles": {
                                                                                        "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "values": {
                                                                                        "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "version": {
                                                                                        "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "ksonnet": {
                                                                                "description": "Ksonnet holds ksonnet specific options",
                                                                                "properties": {
                                                                                    "environment": {
                                                                                        "description": "Environment is a ksonnet application environment name",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "parameters": {
                                                                                        "description": "Parameters are a list of ksonnet component parameter override values",
                                                                                        "items": {
                                                                                            "description": "KsonnetParameter is a ksonnet component parameter",
                                                                                            "properties": {
                                                                                                "component": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "name": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "name",
                                                                                                "value"
                                                                                            ],
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "kustomize": {
                                                                                "description": "Kustomize holds kustomize specific options",
                                                                                "properties": {
                                                                                    "commonAnnotations": {
                                                                                        "additionalProperties": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                                        "type": "object"
                                                                                    },
                                                                                    "commonLabels": {
                                                                                        "additionalProperties": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                                        "type": "object"
                                                                                    },
                                                                                    "forceCommonAnnotations": {
                                                                                        "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "forceCommonLabels": {
                                                                                        "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "images": {
                                                                                        "description": "Images is a list of Kustomize image override specifications",
                                                                                        "items": {
                                                                                            "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "namePrefix": {
                                                                                        "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "nameSuffix": {
                                                                                        "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "version": {
                                                                                        "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "path": {
                                                                                "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                                "type": "string"
                                                                            },
                                                                            "plugin": {
                                                                                "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                                "properties": {
                                                                                    "env": {
                                                                                        "description": "Env is a list of environment variable entries",
                                                                                        "items": {
                                                                                            "description": "EnvEntry represents an entry in the application's environment",
                                                                                            "properties": {
                                                                                                "name": {
                                                                                                    "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "description": "Value is the value of the variable",
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "name",
                                                                                                "value"
                                                                                            ],
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "repoURL": {
                                                                                "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                                "type": "string"
                                                                            },
                                                                            "targetRevision": {
                                                                                "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "repoURL"
                                                                        ],
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "deployedAt",
                                                                    "id",
                                                                    "revision"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "observedAt": {
                                                            "description": "ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "operationState": {
                                                            "description": "OperationState contains information about any ongoing operations, such as a sync",
                                                            "properties": {
                                                                "finishedAt": {
                                                                    "description": "FinishedAt contains time of operation completion",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "message": {
                                                                    "description": "Message holds any pertinent messages when attempting to perform operation (typically errors).",
                                                                    "type": "string"
                                                                },
                                                                "operation": {
                                                                    "description": "Operation is the original requested operation",
                                                                    "properties": {
                                                                        "info": {
                                                                            "description": "Info is a list of informational items for this operation",
                                                                            "items": {
                                                                                "properties": {
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "value": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "name",
                                                                                    "value"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        },
                                                                        "initiatedBy": {
                                                                            "description": "InitiatedBy contains information about who initiated the operations",
                                                                            "properties": {
                                                                                "automated": {
                                                                                    "description": "Automated is set to true if operation was initiated automatically by the application controller.",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "username": {
                                                                                    "description": "Username contains the name of a user who started operation",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "retry": {
                                                                            "description": "Retry controls the strategy to apply if a sync fails",
                                                                            "properties": {
                                                                                "backoff": {
                                                                                    "description": "Backoff controls how to backoff on subsequent retries of failed syncs",
                                                                                    "properties": {
                                                                                        "duration": {
                                                                                            "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "factor": {
                                                                                            "description": "Factor is a factor to multiply the base duration after each failed retry",
                                                                                            "format": "int64",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "maxDuration": {
                                                                                            "description": "MaxDuration is the maximum amount of time allowed for the backoff strategy",
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "limit": {
                                                                                    "description": "Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.",
                                                                                    "format": "int64",
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "sync": {
                                                                            "description": "Sync contains parameters for the operation",
                                                                            "properties": {
                                                                                "dryRun": {
                                                                                    "description": "DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "manifests": {
                                                                                    "description": "Manifests is an optional field that overrides sync source with a local directory for development",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "prune": {
                                                                                    "description": "Prune specifies to delete resources from the cluster that are no longer tracked in git",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "resources": {
                                                                                    "description": "Resources describes which resources shall be part of the sync",
                                                                                    "items": {
                                                                                        "description": "SyncOperationResource contains resources to sync.",
                                                                                        "properties": {
                                                                                            "group": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "kind": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "name": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "namespace": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "required": [
                                                                                            "kind",
                                                                                            "name"
                                                                                        ],
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "revision": {
                                                                                    "description": "Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.",
                                                                                    "type": "string"
                                                                                },
                                                                                "source": {
                                                                                    "description": "Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation",
                                                                                    "properties": {
                                                                                        "chart": {
                                                                                            "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "directory": {
                                                                                            "description": "Directory holds path/directory specific options",
                                                                                            "properties": {
                                                                                                "exclude": {
                                                                                                    "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "include": {
                                                                                                    "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "jsonnet": {
                                                                                                    "description": "Jsonnet holds options specific to Jsonnet",
                                                                                                    "properties": {
                                                                                                        "extVars": {
                                                                                                            "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                                            "items": {
                                                                                                                "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                                "properties": {
                                                                                                                    "code": {
                                                                                                                        "type": "boolean"
                                                                                                                    },
                                                                                                                    "name": {
                                                                                                                        "type": "string"
                                                                                                                    },
                                                                                                                    "value": {
                                                                                                                        "type": "string"
                                                                                                                    }
                                                                                                                },
                                                                                                                "required": [
                                                                                                                    "name",
                                                                                                                    "value"
                                                                                                                ],
                                                                                                                "type": "object"
                                                                                                            },
                                                                                                            "type": "array"
                                                                                                        },
                                                                                                        "libs": {
                                                                                                            "description": "Additional library search dirs",
                                                                                                            "items": {
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "type": "array"
                                                                                                        },
                                                                                                        "tlas": {
                                                                                                            "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                                            "items": {
                                                                                                                "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                                "properties": {
                                                                                                                    "code": {
                                                                                                                        "type": "boolean"
                                                                                                                    },
                                                                                                                    "name": {
                                                                                                                        "type": "string"
                                                                                                                    },
                                                                                                                    "value": {
                                                                                                                        "type": "string"
                                                                                                                    }
                                                                                                                },
                                                                                                                "required": [
                                                                                                                    "name",
                                                                                                                    "value"
                                                                                                                ],
                                                                                                                "type": "object"
                                                                                                            },
                                                                                                            "type": "array"
                                                                                                        }
                                                                                                    },
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "recurse": {
                                                                                                    "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                                                    "type": "boolean"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "helm": {
                                                                                            "description": "Helm holds helm specific options",
                                                                                            "properties": {
                                                                                                "fileParameters": {
                                                                                                    "description": "FileParameters are file parameters to the helm template",
                                                                                                    "items": {
                                                                                                        "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                                                        "properties": {
                                                                                                            "name": {
                                                                                                                "description": "Name is the name of the Helm parameter",
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "path": {
                                                                                                                "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                },
                                                                                                "parameters": {
                                                                                                    "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                                                    "items": {
                                                                                                        "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                                                        "properties": {
                                                                                                            "forceString": {
                                                                                                                "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                                                "type": "boolean"
                                                                                                            },
                                                                                                            "name": {
                                                                                                                "description": "Name is the name of the Helm parameter",
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "value": {
                                                                                                                "description": "Value is the value for the Helm parameter",
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                },
                                                                                                "passCredentials": {
                                                                                                    "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                                                    "type": "boolean"
                                                                                                },
                                                                                                "releaseName": {
                                                                                                    "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "valueFiles": {
                                                                                                    "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                                                    "items": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                },
                                                                                                "values": {
                                                                                                    "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "version": {
                                                                                                    "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "ksonnet": {
                                                                                            "description": "Ksonnet holds ksonnet specific options",
                                                                                            "properties": {
                                                                                                "environment": {
                                                                                                    "description": "Environment is a ksonnet application environment name",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "parameters": {
                                                                                                    "description": "Parameters are a list of ksonnet component parameter override values",
                                                                                                    "items": {
                                                                                                        "description": "KsonnetParameter is a ksonnet component parameter",
                                                                                                        "properties": {
                                                                                                            "component": {
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "name": {
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "value": {
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "required": [
                                                                                                            "name",
                                                                                                            "value"
                                                                                                        ],
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "kustomize": {
                                                                                            "description": "Kustomize holds kustomize specific options",
                                                                                            "properties": {
                                                                                                "commonAnnotations": {
                                                                                                    "additionalProperties": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "commonLabels": {
                                                                                                    "additionalProperties": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "forceCommonAnnotations": {
                                                                                                    "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                                                    "type": "boolean"
                                                                                                },
                                                                                                "forceCommonLabels": {
                                                                                                    "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                                                    "type": "boolean"
                                                                                                },
                                                                                                "images": {
                                                                                                    "description": "Images is a list of Kustomize image override specifications",
                                                                                                    "items": {
                                                                                                        "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                },
                                                                                                "namePrefix": {
                                                                                                    "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "nameSuffix": {
                                                                                                    "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "version": {
                                                                                                    "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "path": {
                                                                                            "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "plugin": {
                                                                                            "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                                            "properties": {
                                                                                                "env": {
                                                                                                    "description": "Env is a list of environment variable entries",
                                                                                                    "items": {
                                                                                                        "description": "EnvEntry represents an entry in the application's environment",
                                                                                                        "properties": {
                                                                                                            "name": {
                                                                                                                "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "value": {
                                                                                                                "description": "Value is the value of the variable",
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "required": [
                                                                                                            "name",
                                                                                                            "value"
                                                                                                        ],
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                },
                                                                                                "name": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "repoURL": {
                                                                                            "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "targetRevision": {
                                                                                            "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "repoURL"
                                                                                    ],
                                                                                    "type": "object"
                                                                                },
                                                                                "syncOptions": {
                                                                                    "description": "SyncOptions provide per-sync sync-options, e.g. Validate=false",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "syncStrategy": {
                                                                                    "description": "SyncStrategy describes how to perform the sync",
                                                                                    "properties": {
                                                                                        "apply": {
                                                                                            "description": "Apply will perform a `kubectl apply` to perform the sync.",
                                                                                            "properties": {
                                                                                                "force": {
                                                                                                    "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                                                                                                    "type": "boolean"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "hook": {
                                                                                            "description": "Hook will submit any referenced resources to perform the sync. This is the default strategy",
                                                                                            "properties": {
                                                                                                "force": {
                                                                                                    "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                                                                                                    "type": "boolean"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "phase": {
                                                                    "description": "Phase is the current phase of the operation",
                                                                    "type": "string"
                                                                },
                                                                "retryCount": {
                                                                    "description": "RetryCount contains time of operation retries",
                                                                    "format": "int64",
                                                                    "type": "integer"
                                                                },
                                                                "startedAt": {
                                                                    "description": "StartedAt contains time of operation start",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "syncResult": {
                                                                    "description": "SyncResult is the result of a Sync operation",
                                                                    "properties": {
                                                                        "resources": {
                                                                            "description": "Resources contains a list of sync result items for each individual resource in a sync operation",
                                                                            "items": {
                                                                                "description": "ResourceResult holds the operation result details of a specific resource",
                                                                                "properties": {
                                                                                    "group": {
                                                                                        "description": "Group specifies the API group of the resource",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "hookPhase": {
                                                                                        "description": "HookPhase contains the state of any operation associated with this resource OR hook This can also contain values for non-hook resources.",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "hookType": {
                                                                                        "description": "HookType specifies the type of the hook. Empty for non-hook resources",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "kind": {
                                                                                        "description": "Kind specifies the API kind of the resource",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "message": {
                                                                                        "description": "Message contains an informational or error message for the last sync OR operation",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "name": {
                                                                                        "description": "Name specifies the name of the resource",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "namespace": {
                                                                                        "description": "Namespace specifies the target namespace of the resource",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "status": {
                                                                                        "description": "Status holds the final result of the sync. Will be empty if the resources is yet to be applied/pruned and is always zero-value for hooks",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "syncPhase": {
                                                                                        "description": "SyncPhase indicates the particular phase of the sync that this result was acquired in",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "version": {
                                                                                        "description": "Version specifies the API version of the resource",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "group",
                                                                                    "kind",
                                                                                    "name",
                                                                                    "namespace",
                                                                                    "version"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        },
                                                                        "revision": {
                                                                            "description": "Revision holds the revision this sync operation was performed to",
                                                                            "type": "string"
                                                                        },
                                                                        "source": {
                                                                            "description": "Source records the application source information of the sync, used for comparing auto-sync",
                                                                            "properties": {
                                                                                "chart": {
                                                                                    "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                                    "type": "string"
                                                                                },
                                                                                "directory": {
                                                                                    "description": "Directory holds path/directory specific options",
                                                                                    "properties": {
                                                                                        "exclude": {
                                                                                            "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "include": {
                                                                                            "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "jsonnet": {
                                                                                            "description": "Jsonnet holds options specific to Jsonnet",
                                                                                            "properties": {
                                                                                                "extVars": {
                                                                                                    "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                                    "items": {
                                                                                                        "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                        "properties": {
                                                                                                            "code": {
                                                                                                                "type": "boolean"
                                                                                                            },
                                                                                                            "name": {
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "value": {
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "required": [
                                                                                                            "name",
                                                                                                            "value"
                                                                                                        ],
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                },
                                                                                                "libs": {
                                                                                                    "description": "Additional library search dirs",
                                                                                                    "items": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                },
                                                                                                "tlas": {
                                                                                                    "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                                    "items": {
                                                                                                        "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                        "properties": {
                                                                                                            "code": {
                                                                                                                "type": "boolean"
                                                                                                            },
                                                                                                            "name": {
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "value": {
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "required": [
                                                                                                            "name",
                                                                                                            "value"
                                                                                                        ],
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "recurse": {
                                                                                            "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                                            "type": "boolean"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "helm": {
                                                                                    "description": "Helm holds helm specific options",
                                                                                    "properties": {
                                                                                        "fileParameters": {
                                                                                            "description": "FileParameters are file parameters to the helm template",
                                                                                            "items": {
                                                                                                "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                                                "properties": {
                                                                                                    "name": {
                                                                                                        "description": "Name is the name of the Helm parameter",
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "path": {
                                                                                                        "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "parameters": {
                                                                                            "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                                            "items": {
                                                                                                "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                                                "properties": {
                                                                                                    "forceString": {
                                                                                                        "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "name": {
                                                                                                        "description": "Name is the name of the Helm parameter",
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "value": {
                                                                                                        "description": "Value is the value for the Helm parameter",
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "passCredentials": {
                                                                                            "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "releaseName": {
                                                                                            "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "valueFiles": {
                                                                                            "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "values": {
                                                                                            "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "version": {
                                                                                            "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "ksonnet": {
                                                                                    "description": "Ksonnet holds ksonnet specific options",
                                                                                    "properties": {
                                                                                        "environment": {
                                                                                            "description": "Environment is a ksonnet application environment name",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "parameters": {
                                                                                            "description": "Parameters are a list of ksonnet component parameter override values",
                                                                                            "items": {
                                                                                                "description": "KsonnetParameter is a ksonnet component parameter",
                                                                                                "properties": {
                                                                                                    "component": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "name": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "value": {
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "required": [
                                                                                                    "name",
                                                                                                    "value"
                                                                                                ],
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "kustomize": {
                                                                                    "description": "Kustomize holds kustomize specific options",
                                                                                    "properties": {
                                                                                        "commonAnnotations": {
                                                                                            "additionalProperties": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                                            "type": "object"
                                                                                        },
                                                                                        "commonLabels": {
                                                                                            "additionalProperties": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                                            "type": "object"
                                                                                        },
                                                                                        "forceCommonAnnotations": {
                                                                                            "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "forceCommonLabels": {
                                                                                            "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "images": {
                                                                                            "description": "Images is a list of Kustomize image override specifications",
                                                                                            "items": {
                                                                                                "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "namePrefix": {
                                                                                            "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "nameSuffix": {
                                                                                            "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "version": {
                                                                                            "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "path": {
                                                                                    "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                                    "type": "string"
                                                                                },
                                                                                "plugin": {
                                                                                    "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                                    "properties": {
                                                                                        "env": {
                                                                                            "description": "Env is a list of environment variable entries",
                                                                                            "items": {
                                                                                                "description": "EnvEntry represents an entry in the application's environment",
                                                                                                "properties": {
                                                                                                    "name": {
                                                                                                        "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "value": {
                                                                                                        "description": "Value is the value of the variable",
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "required": [
                                                                                                    "name",
                                                                                                    "value"
                                                                                                ],
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "repoURL": {
                                                                                    "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                                    "type": "string"
                                                                                },
                                                                                "targetRevision": {
                                                                                    "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "repoURL"
                                                                            ],
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "revision"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "required": [
                                                                "operation",
                                                                "phase",
                                                                "startedAt"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "reconciledAt": {
                                                            "description": "ReconciledAt indicates when the application state was reconciled using the latest git version",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "resources": {
                                                            "description": "Resources is a list of Kubernetes resources managed by this application",
                                                            "items": {
                                                                "description": "ResourceStatus holds the current sync and health status of a resource TODO: describe members of this type",
                                                                "properties": {
                                                                    "group": {
                                                                        "type": "string"
                                                                    },
                                                                    "health": {
                                                                        "description": "HealthStatus contains information about the currently observed health state of an application or resource",
                                                                        "properties": {
                                                                            "message": {
                                                                                "description": "Message is a human-readable informational message describing the health status",
                                                                                "type": "string"
                                                                            },
                                                                            "status": {
                                                                                "description": "Status holds the status code of the application or resource",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "hook": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "kind": {
                                                                        "type": "string"
                                                                    },
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "namespace": {
                                                                        "type": "string"
                                                                    },
                                                                    "requiresPruning": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "status": {
                                                                        "description": "SyncStatusCode is a type which represents possible comparison results",
                                                                        "type": "string"
                                                                    },
                                                                    "version": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "sourceType": {
                                                            "description": "SourceType specifies the type of this application",
                                                            "type": "string"
                                                        },
                                                        "summary": {
                                                            "description": "Summary contains a list of URLs and container images used by this application",
                                                            "properties": {
                                                                "externalURLs": {
                                                                    "description": "ExternalURLs holds all external URLs of application child resources.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "images": {
                                                                    "description": "Images holds all images of application child resources.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "sync": {
                                                            "description": "Sync contains information about the application's current sync status",
                                                            "properties": {
                                                                "comparedTo": {
                                                                    "description": "ComparedTo contains information about what has been compared",
                                                                    "properties": {
                                                                        "destination": {
                                                                            "description": "Destination is a reference to the application's destination used for comparison",
                                                                            "properties": {
                                                                                "name": {
                                                                                    "description": "Name is an alternate way of specifying the target cluster by its symbolic name",
                                                                                    "type": "string"
                                                                                },
                                                                                "namespace": {
                                                                                    "description": "Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace",
                                                                                    "type": "string"
                                                                                },
                                                                                "server": {
                                                                                    "description": "Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "source": {
                                                                            "description": "Source is a reference to the application's source used for comparison",
                                                                            "properties": {
                                                                                "chart": {
                                                                                    "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                                    "type": "string"
                                                                                },
                                                                                "directory": {
                                                                                    "description": "Directory holds path/directory specific options",
                                                                                    "properties": {
                                                                                        "exclude": {
                                                                                            "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "include": {
                                                                                            "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "jsonnet": {
                                                                                            "description": "Jsonnet holds options specific to Jsonnet",
                                                                                            "properties": {
                                                                                                "extVars": {
                                                                                                    "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                                    "items": {
                                                                                                        "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                        "properties": {
                                                                                                            "code": {
                                                                                                                "type": "boolean"
                                                                                                            },
                                                                                                            "name": {
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "value": {
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "required": [
                                                                                                            "name",
                                                                                                            "value"
                                                                                                        ],
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                },
                                                                                                "libs": {
                                                                                                    "description": "Additional library search dirs",
                                                                                                    "items": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                },
                                                                                                "tlas": {
                                                                                                    "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                                    "items": {
                                                                                                        "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                        "properties": {
                                                                                                            "code": {
                                                                                                                "type": "boolean"
                                                                                                            },
                                                                                                            "name": {
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "value": {
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "required": [
                                                                                                            "name",
                                                                                                            "value"
                                                                                                        ],
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "recurse": {
                                                                                            "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                                            "type": "boolean"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "helm": {
                                                                                    "description": "Helm holds helm specific options",
                                                                                    "properties": {
                                                                                        "fileParameters": {
                                                                                            "description": "FileParameters are file parameters to the helm template",
                                                                                            "items": {
                                                                                                "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                                                "properties": {
                                                                                                    "name": {
                                                                                                        "description": "Name is the name of the Helm parameter",
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "path": {
                                                                                                        "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "parameters": {
                                                                                            "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                                            "items": {
                                                                                                "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                                                "properties": {
                                                                                                    "forceString": {
                                                                                                        "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "name": {
                                                                                                        "description": "Name is the name of the Helm parameter",
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "value": {
                                                                                                        "description": "Value is the value for the Helm parameter",
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "passCredentials": {
                                                                                            "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "releaseName": {
                                                                                            "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "valueFiles": {
                                                                                            "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "values": {
                                                                                            "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "version": {
                                                                                            "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "ksonnet": {
                                                                                    "description": "Ksonnet holds ksonnet specific options",
                                                                                    "properties": {
                                                                                        "environment": {
                                                                                            "description": "Environment is a ksonnet application environment name",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "parameters": {
                                                                                            "description": "Parameters are a list of ksonnet component parameter override values",
                                                                                            "items": {
                                                                                                "description": "KsonnetParameter is a ksonnet component parameter",
                                                                                                "properties": {
                                                                                                    "component": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "name": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "value": {
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "required": [
                                                                                                    "name",
                                                                                                    "value"
                                                                                                ],
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "kustomize": {
                                                                                    "description": "Kustomize holds kustomize specific options",
                                                                                    "properties": {
                                                                                        "commonAnnotations": {
                                                                                            "additionalProperties": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                                            "type": "object"
                                                                                        },
                                                                                        "commonLabels": {
                                                                                            "additionalProperties": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                                            "type": "object"
                                                                                        },
                                                                                        "forceCommonAnnotations": {
                                                                                            "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "forceCommonLabels": {
                                                                                            "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "images": {
                                                                                            "description": "Images is a list of Kustomize image override specifications",
                                                                                            "items": {
                                                                                                "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "namePrefix": {
                                                                                            "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "nameSuffix": {
                                                                                            "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "version": {
                                                                                            "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "path": {
                                                                                    "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                                    "type": "string"
                                                                                },
                                                                                "plugin": {
                                                                                    "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                                    "properties": {
                                                                                        "env": {
                                                                                            "description": "Env is a list of environment variable entries",
                                                                                            "items": {
                                                                                                "description": "EnvEntry represents an entry in the application's environment",
                                                                                                "properties": {
                                                                                                    "name": {
                                                                                                        "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "value": {
                                                                                                        "description": "Value is the value of the variable",
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "required": [
                                                                                                    "name",
                                                                                                    "value"
                                                                                                ],
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "repoURL": {
                                                                                    "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                                    "type": "string"
                                                                                },
                                                                                "targetRevision": {
                                                                                    "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "repoURL"
                                                                            ],
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "destination",
                                                                        "source"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "revision": {
                                                                    "description": "Revision contains information about the revision the comparison has been performed to",
                                                                    "type": "string"
                                                                },
                                                                "status": {
                                                                    "description": "Status is the sync state of the comparison",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "status"
                                                            ],
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "metadata",
                                                "spec"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {}
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"applications.argoproj.io\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"applications.argoproj.io\",\"namespace\":\"argocd\"},\"spec\":{\"group\":\"argoproj.io\",\"names\":{\"kind\":\"Application\",\"listKind\":\"ApplicationList\",\"plural\":\"applications\",\"shortNames\":[\"app\",\"apps\"],\"singular\":\"application\"},\"scope\":\"Namespaced\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.sync.status\",\"name\":\"Sync Status\",\"type\":\"string\"},{\"jsonPath\":\".status.health.status\",\"name\":\"Health Status\",\"type\":\"string\"},{\"jsonPath\":\".status.sync.revision\",\"name\":\"Revision\",\"priority\":10,\"type\":\"string\"}],\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"Application is a definition of Application resource.\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"operation\":{\"description\":\"Operation contains information about a requested or running operation\",\"properties\":{\"info\":{\"description\":\"Info is a list of informational items for this operation\",\"items\":{\"properties\":{\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"},\"initiatedBy\":{\"description\":\"InitiatedBy contains information about who initiated the operations\",\"properties\":{\"automated\":{\"description\":\"Automated is set to true if operation was initiated automatically by the application controller.\",\"type\":\"boolean\"},\"username\":{\"description\":\"Username contains the name of a user who started operation\",\"type\":\"string\"}},\"type\":\"object\"},\"retry\":{\"description\":\"Retry controls the strategy to apply if a sync fails\",\"properties\":{\"backoff\":{\"description\":\"Backoff controls how to backoff on subsequent retries of failed syncs\",\"properties\":{\"duration\":{\"description\":\"Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \\\"2m\\\", \\\"1h\\\")\",\"type\":\"string\"},\"factor\":{\"description\":\"Factor is a factor to multiply the base duration after each failed retry\",\"format\":\"int64\",\"type\":\"integer\"},\"maxDuration\":{\"description\":\"MaxDuration is the maximum amount of time allowed for the backoff strategy\",\"type\":\"string\"}},\"type\":\"object\"},\"limit\":{\"description\":\"Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\",\"format\":\"int64\",\"type\":\"integer\"}},\"type\":\"object\"},\"sync\":{\"description\":\"Sync contains parameters for the operation\",\"properties\":{\"dryRun\":{\"description\":\"DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync\",\"type\":\"boolean\"},\"manifests\":{\"description\":\"Manifests is an optional field that overrides sync source with a local directory for development\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"prune\":{\"description\":\"Prune specifies to delete resources from the cluster that are no longer tracked in git\",\"type\":\"boolean\"},\"resources\":{\"description\":\"Resources describes which resources shall be part of the sync\",\"items\":{\"description\":\"SyncOperationResource contains resources to sync.\",\"properties\":{\"group\":{\"type\":\"string\"},\"kind\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\"},\"type\":\"array\"},\"revision\":{\"description\":\"Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.\",\"type\":\"string\"},\"source\":{\"description\":\"Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation\",\"properties\":{\"chart\":{\"description\":\"Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.\",\"type\":\"string\"},\"directory\":{\"description\":\"Directory holds path/directory specific options\",\"properties\":{\"exclude\":{\"description\":\"Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation\",\"type\":\"string\"},\"include\":{\"description\":\"Include contains a glob pattern to match paths against that should be explicitly included during manifest generation\",\"type\":\"string\"},\"jsonnet\":{\"description\":\"Jsonnet holds options specific to Jsonnet\",\"properties\":{\"extVars\":{\"description\":\"ExtVars is a list of Jsonnet External Variables\",\"items\":{\"description\":\"JsonnetVar represents a variable to be passed to jsonnet during manifest generation\",\"properties\":{\"code\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"},\"libs\":{\"description\":\"Additional library search dirs\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"tlas\":{\"description\":\"TLAS is a list of Jsonnet Top-level Arguments\",\"items\":{\"description\":\"JsonnetVar represents a variable to be passed to jsonnet during manifest generation\",\"properties\":{\"code\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"recurse\":{\"description\":\"Recurse specifies whether to scan a directory recursively for manifests\",\"type\":\"boolean\"}},\"type\":\"object\"},\"helm\":{\"description\":\"Helm holds helm specific options\",\"properties\":{\"fileParameters\":{\"description\":\"FileParameters are file parameters to the helm template\",\"items\":{\"description\":\"HelmFileParameter is a file parameter that's passed to helm template during manifest generation\",\"properties\":{\"name\":{\"description\":\"Name is the name of the Helm parameter\",\"type\":\"string\"},\"path\":{\"description\":\"Path is the path to the file containing the values for the Helm parameter\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"parameters\":{\"description\":\"Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation\",\"items\":{\"description\":\"HelmParameter is a parameter that's passed to helm template during manifest generation\",\"properties\":{\"forceString\":{\"description\":\"ForceString determines whether to tell Helm to interpret booleans and numbers as strings\",\"type\":\"boolean\"},\"name\":{\"description\":\"Name is the name of the Helm parameter\",\"type\":\"string\"},\"value\":{\"description\":\"Value is the value for the Helm parameter\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"passCredentials\":{\"description\":\"PassCredentials pass credentials to all domains (Helm's --pass-credentials)\",\"type\":\"boolean\"},\"releaseName\":{\"description\":\"ReleaseName is the Helm release name to use. If omitted it will use the application name\",\"type\":\"string\"},\"valueFiles\":{\"description\":\"ValuesFiles is a list of Helm value files to use when generating a template\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"values\":{\"description\":\"Values specifies Helm values to be passed to helm template, typically defined as a block\",\"type\":\"string\"},\"version\":{\"description\":\"Version is the Helm version to use for templating (either \\\"2\\\" or \\\"3\\\")\",\"type\":\"string\"}},\"type\":\"object\"},\"ksonnet\":{\"description\":\"Ksonnet holds ksonnet specific options\",\"properties\":{\"environment\":{\"description\":\"Environment is a ksonnet application environment name\",\"type\":\"string\"},\"parameters\":{\"description\":\"Parameters are a list of ksonnet component parameter override values\",\"items\":{\"description\":\"KsonnetParameter is a ksonnet component parameter\",\"properties\":{\"component\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"kustomize\":{\"description\":\"Kustomize holds kustomize specific options\",\"properties\":{\"commonAnnotations\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"CommonAnnotations is a list of additional annotations to add to rendered manifests\",\"type\":\"object\"},\"commonLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"CommonLabels is a list of additional labels to add to rendered manifests\",\"type\":\"object\"},\"forceCommonAnnotations\":{\"description\":\"ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps\",\"type\":\"boolean\"},\"forceCommonLabels\":{\"description\":\"ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps\",\"type\":\"boolean\"},\"images\":{\"description\":\"Images is a list of Kustomize image override specifications\",\"items\":{\"description\":\"KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\\u003cimage_name\\u003e:\\u003cimage_tag\\u003e\",\"type\":\"string\"},\"type\":\"array\"},\"namePrefix\":{\"description\":\"NamePrefix is a prefix appended to resources for Kustomize apps\",\"type\":\"string\"},\"nameSuffix\":{\"description\":\"NameSuffix is a suffix appended to resources for Kustomize apps\",\"type\":\"string\"},\"version\":{\"description\":\"Version controls which version of Kustomize to use for rendering manifests\",\"type\":\"string\"}},\"type\":\"object\"},\"path\":{\"description\":\"Path is a directory path within the Git repository, and is only valid for applications sourced from Git.\",\"type\":\"string\"},\"plugin\":{\"description\":\"ConfigManagementPlugin holds config management plugin specific options\",\"properties\":{\"env\":{\"description\":\"Env is a list of environment variable entries\",\"items\":{\"description\":\"EnvEntry represents an entry in the application's environment\",\"properties\":{\"name\":{\"description\":\"Name is the name of the variable, usually expressed in uppercase\",\"type\":\"string\"},\"value\":{\"description\":\"Value is the value of the variable\",\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"},\"name\":{\"type\":\"string\"}},\"type\":\"object\"},\"repoURL\":{\"description\":\"RepoURL is the URL to the repository (Git or Helm) that contains the application manifests\",\"type\":\"string\"},\"targetRevision\":{\"description\":\"TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\",\"type\":\"string\"}},\"required\":[\"repoURL\"],\"type\":\"object\"},\"syncOptions\":{\"description\":\"SyncOptions provide per-sync sync-options, e.g. Validate=false\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"syncStrategy\":{\"description\":\"SyncStrategy describes how to perform the sync\",\"properties\":{\"apply\":{\"description\":\"Apply will perform a `kubectl apply` to perform the sync.\",\"properties\":{\"force\":{\"description\":\"Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.\",\"type\":\"boolean\"}},\"type\":\"object\"},\"hook\":{\"description\":\"Hook will submit any referenced resources to perform the sync. This is the default strategy\",\"properties\":{\"force\":{\"description\":\"Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.\",\"type\":\"boolean\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"spec\":{\"description\":\"ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.\",\"properties\":{\"destination\":{\"description\":\"Destination is a reference to the target Kubernetes server and namespace\",\"properties\":{\"name\":{\"description\":\"Name is an alternate way of specifying the target cluster by its symbolic name\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace\",\"type\":\"string\"},\"server\":{\"description\":\"Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API\",\"type\":\"string\"}},\"type\":\"object\"},\"ignoreDifferences\":{\"description\":\"IgnoreDifferences is a list of resources and their fields which should be ignored during comparison\",\"items\":{\"description\":\"ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.\",\"properties\":{\"group\":{\"type\":\"string\"},\"jqPathExpressions\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"jsonPointers\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"kind\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"required\":[\"kind\"],\"type\":\"object\"},\"type\":\"array\"},\"info\":{\"description\":\"Info contains a list of information (URLs, email addresses, and plain text) that relates to the application\",\"items\":{\"properties\":{\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"},\"project\":{\"description\":\"Project is a reference to the project this application belongs to. The empty string means that application belongs to the 'default' project.\",\"type\":\"string\"},\"revisionHistoryLimit\":{\"description\":\"RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\",\"format\":\"int64\",\"type\":\"integer\"},\"source\":{\"description\":\"Source is a reference to the location of the application's manifests or chart\",\"properties\":{\"chart\":{\"description\":\"Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.\",\"type\":\"string\"},\"directory\":{\"description\":\"Directory holds path/directory specific options\",\"properties\":{\"exclude\":{\"description\":\"Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation\",\"type\":\"string\"},\"include\":{\"description\":\"Include contains a glob pattern to match paths against that should be explicitly included during manifest generation\",\"type\":\"string\"},\"jsonnet\":{\"description\":\"Jsonnet holds options specific to Jsonnet\",\"properties\":{\"extVars\":{\"description\":\"ExtVars is a list of Jsonnet External Variables\",\"items\":{\"description\":\"JsonnetVar represents a variable to be passed to jsonnet during manifest generation\",\"properties\":{\"code\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"},\"libs\":{\"description\":\"Additional library search dirs\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"tlas\":{\"description\":\"TLAS is a list of Jsonnet Top-level Arguments\",\"items\":{\"description\":\"JsonnetVar represents a variable to be passed to jsonnet during manifest generation\",\"properties\":{\"code\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"recurse\":{\"description\":\"Recurse specifies whether to scan a directory recursively for manifests\",\"type\":\"boolean\"}},\"type\":\"object\"},\"helm\":{\"description\":\"Helm holds helm specific options\",\"properties\":{\"fileParameters\":{\"description\":\"FileParameters are file parameters to the helm template\",\"items\":{\"description\":\"HelmFileParameter is a file parameter that's passed to helm template during manifest generation\",\"properties\":{\"name\":{\"description\":\"Name is the name of the Helm parameter\",\"type\":\"string\"},\"path\":{\"description\":\"Path is the path to the file containing the values for the Helm parameter\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"parameters\":{\"description\":\"Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation\",\"items\":{\"description\":\"HelmParameter is a parameter that's passed to helm template during manifest generation\",\"properties\":{\"forceString\":{\"description\":\"ForceString determines whether to tell Helm to interpret booleans and numbers as strings\",\"type\":\"boolean\"},\"name\":{\"description\":\"Name is the name of the Helm parameter\",\"type\":\"string\"},\"value\":{\"description\":\"Value is the value for the Helm parameter\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"passCredentials\":{\"description\":\"PassCredentials pass credentials to all domains (Helm's --pass-credentials)\",\"type\":\"boolean\"},\"releaseName\":{\"description\":\"ReleaseName is the Helm release name to use. If omitted it will use the application name\",\"type\":\"string\"},\"valueFiles\":{\"description\":\"ValuesFiles is a list of Helm value files to use when generating a template\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"values\":{\"description\":\"Values specifies Helm values to be passed to helm template, typically defined as a block\",\"type\":\"string\"},\"version\":{\"description\":\"Version is the Helm version to use for templating (either \\\"2\\\" or \\\"3\\\")\",\"type\":\"string\"}},\"type\":\"object\"},\"ksonnet\":{\"description\":\"Ksonnet holds ksonnet specific options\",\"properties\":{\"environment\":{\"description\":\"Environment is a ksonnet application environment name\",\"type\":\"string\"},\"parameters\":{\"description\":\"Parameters are a list of ksonnet component parameter override values\",\"items\":{\"description\":\"KsonnetParameter is a ksonnet component parameter\",\"properties\":{\"component\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"kustomize\":{\"description\":\"Kustomize holds kustomize specific options\",\"properties\":{\"commonAnnotations\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"CommonAnnotations is a list of additional annotations to add to rendered manifests\",\"type\":\"object\"},\"commonLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"CommonLabels is a list of additional labels to add to rendered manifests\",\"type\":\"object\"},\"forceCommonAnnotations\":{\"description\":\"ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps\",\"type\":\"boolean\"},\"forceCommonLabels\":{\"description\":\"ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps\",\"type\":\"boolean\"},\"images\":{\"description\":\"Images is a list of Kustomize image override specifications\",\"items\":{\"description\":\"KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\\u003cimage_name\\u003e:\\u003cimage_tag\\u003e\",\"type\":\"string\"},\"type\":\"array\"},\"namePrefix\":{\"description\":\"NamePrefix is a prefix appended to resources for Kustomize apps\",\"type\":\"string\"},\"nameSuffix\":{\"description\":\"NameSuffix is a suffix appended to resources for Kustomize apps\",\"type\":\"string\"},\"version\":{\"description\":\"Version controls which version of Kustomize to use for rendering manifests\",\"type\":\"string\"}},\"type\":\"object\"},\"path\":{\"description\":\"Path is a directory path within the Git repository, and is only valid for applications sourced from Git.\",\"type\":\"string\"},\"plugin\":{\"description\":\"ConfigManagementPlugin holds config management plugin specific options\",\"properties\":{\"env\":{\"description\":\"Env is a list of environment variable entries\",\"items\":{\"description\":\"EnvEntry represents an entry in the application's environment\",\"properties\":{\"name\":{\"description\":\"Name is the name of the variable, usually expressed in uppercase\",\"type\":\"string\"},\"value\":{\"description\":\"Value is the value of the variable\",\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"},\"name\":{\"type\":\"string\"}},\"type\":\"object\"},\"repoURL\":{\"description\":\"RepoURL is the URL to the repository (Git or Helm) that contains the application manifests\",\"type\":\"string\"},\"targetRevision\":{\"description\":\"TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\",\"type\":\"string\"}},\"required\":[\"repoURL\"],\"type\":\"object\"},\"syncPolicy\":{\"description\":\"SyncPolicy controls when and how a sync will be performed\",\"properties\":{\"automated\":{\"description\":\"Automated will keep an application synced to the target revision\",\"properties\":{\"allowEmpty\":{\"description\":\"AllowEmpty allows apps have zero live resources (default: false)\",\"type\":\"boolean\"},\"prune\":{\"description\":\"Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)\",\"type\":\"boolean\"},\"selfHeal\":{\"description\":\"SelfHeal specifes whether to revert resources back to their desired state upon modification in the cluster (default: false)\",\"type\":\"boolean\"}},\"type\":\"object\"},\"retry\":{\"description\":\"Retry controls failed sync retry behavior\",\"properties\":{\"backoff\":{\"description\":\"Backoff controls how to backoff on subsequent retries of failed syncs\",\"properties\":{\"duration\":{\"description\":\"Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \\\"2m\\\", \\\"1h\\\")\",\"type\":\"string\"},\"factor\":{\"description\":\"Factor is a factor to multiply the base duration after each failed retry\",\"format\":\"int64\",\"type\":\"integer\"},\"maxDuration\":{\"description\":\"MaxDuration is the maximum amount of time allowed for the backoff strategy\",\"type\":\"string\"}},\"type\":\"object\"},\"limit\":{\"description\":\"Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\",\"format\":\"int64\",\"type\":\"integer\"}},\"type\":\"object\"},\"syncOptions\":{\"description\":\"Options allow you to specify whole app sync-options\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"}},\"required\":[\"destination\",\"project\",\"source\"],\"type\":\"object\"},\"status\":{\"description\":\"ApplicationStatus contains status information for the application\",\"properties\":{\"conditions\":{\"description\":\"Conditions is a list of currently observed application conditions\",\"items\":{\"description\":\"ApplicationCondition contains details about an application condition, which is usally an error or warning\",\"properties\":{\"lastTransitionTime\":{\"description\":\"LastTransitionTime is the time the condition was last observed\",\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"description\":\"Message contains human-readable message indicating details about condition\",\"type\":\"string\"},\"type\":{\"description\":\"Type is an application condition type\",\"type\":\"string\"}},\"required\":[\"message\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"health\":{\"description\":\"Health contains information about the application's current health status\",\"properties\":{\"message\":{\"description\":\"Message is a human-readable informational message describing the health status\",\"type\":\"string\"},\"status\":{\"description\":\"Status holds the status code of the application or resource\",\"type\":\"string\"}},\"type\":\"object\"},\"history\":{\"description\":\"History contains information about the application's sync history\",\"items\":{\"description\":\"RevisionHistory contains history information about a previous sync\",\"properties\":{\"deployStartedAt\":{\"description\":\"DeployStartedAt holds the time the sync operation started\",\"format\":\"date-time\",\"type\":\"string\"},\"deployedAt\":{\"description\":\"DeployedAt holds the time the sync operation completed\",\"format\":\"date-time\",\"type\":\"string\"},\"id\":{\"description\":\"ID is an auto incrementing identifier of the RevisionHistory\",\"format\":\"int64\",\"type\":\"integer\"},\"revision\":{\"description\":\"Revision holds the revision the sync was performed against\",\"type\":\"string\"},\"source\":{\"description\":\"Source is a reference to the application source used for the sync operation\",\"properties\":{\"chart\":{\"description\":\"Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.\",\"type\":\"string\"},\"directory\":{\"description\":\"Directory holds path/directory specific options\",\"properties\":{\"exclude\":{\"description\":\"Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation\",\"type\":\"string\"},\"include\":{\"description\":\"Include contains a glob pattern to match paths against that should be explicitly included during manifest generation\",\"type\":\"string\"},\"jsonnet\":{\"description\":\"Jsonnet holds options specific to Jsonnet\",\"properties\":{\"extVars\":{\"description\":\"ExtVars is a list of Jsonnet External Variables\",\"items\":{\"description\":\"JsonnetVar represents a variable to be passed to jsonnet during manifest generation\",\"properties\":{\"code\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"},\"libs\":{\"description\":\"Additional library search dirs\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"tlas\":{\"description\":\"TLAS is a list of Jsonnet Top-level Arguments\",\"items\":{\"description\":\"JsonnetVar represents a variable to be passed to jsonnet during manifest generation\",\"properties\":{\"code\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"recurse\":{\"description\":\"Recurse specifies whether to scan a directory recursively for manifests\",\"type\":\"boolean\"}},\"type\":\"object\"},\"helm\":{\"description\":\"Helm holds helm specific options\",\"properties\":{\"fileParameters\":{\"description\":\"FileParameters are file parameters to the helm template\",\"items\":{\"description\":\"HelmFileParameter is a file parameter that's passed to helm template during manifest generation\",\"properties\":{\"name\":{\"description\":\"Name is the name of the Helm parameter\",\"type\":\"string\"},\"path\":{\"description\":\"Path is the path to the file containing the values for the Helm parameter\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"parameters\":{\"description\":\"Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation\",\"items\":{\"description\":\"HelmParameter is a parameter that's passed to helm template during manifest generation\",\"properties\":{\"forceString\":{\"description\":\"ForceString determines whether to tell Helm to interpret booleans and numbers as strings\",\"type\":\"boolean\"},\"name\":{\"description\":\"Name is the name of the Helm parameter\",\"type\":\"string\"},\"value\":{\"description\":\"Value is the value for the Helm parameter\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"passCredentials\":{\"description\":\"PassCredentials pass credentials to all domains (Helm's --pass-credentials)\",\"type\":\"boolean\"},\"releaseName\":{\"description\":\"ReleaseName is the Helm release name to use. If omitted it will use the application name\",\"type\":\"string\"},\"valueFiles\":{\"description\":\"ValuesFiles is a list of Helm value files to use when generating a template\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"values\":{\"description\":\"Values specifies Helm values to be passed to helm template, typically defined as a block\",\"type\":\"string\"},\"version\":{\"description\":\"Version is the Helm version to use for templating (either \\\"2\\\" or \\\"3\\\")\",\"type\":\"string\"}},\"type\":\"object\"},\"ksonnet\":{\"description\":\"Ksonnet holds ksonnet specific options\",\"properties\":{\"environment\":{\"description\":\"Environment is a ksonnet application environment name\",\"type\":\"string\"},\"parameters\":{\"description\":\"Parameters are a list of ksonnet component parameter override values\",\"items\":{\"description\":\"KsonnetParameter is a ksonnet component parameter\",\"properties\":{\"component\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"kustomize\":{\"description\":\"Kustomize holds kustomize specific options\",\"properties\":{\"commonAnnotations\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"CommonAnnotations is a list of additional annotations to add to rendered manifests\",\"type\":\"object\"},\"commonLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"CommonLabels is a list of additional labels to add to rendered manifests\",\"type\":\"object\"},\"forceCommonAnnotations\":{\"description\":\"ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps\",\"type\":\"boolean\"},\"forceCommonLabels\":{\"description\":\"ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps\",\"type\":\"boolean\"},\"images\":{\"description\":\"Images is a list of Kustomize image override specifications\",\"items\":{\"description\":\"KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\\u003cimage_name\\u003e:\\u003cimage_tag\\u003e\",\"type\":\"string\"},\"type\":\"array\"},\"namePrefix\":{\"description\":\"NamePrefix is a prefix appended to resources for Kustomize apps\",\"type\":\"string\"},\"nameSuffix\":{\"description\":\"NameSuffix is a suffix appended to resources for Kustomize apps\",\"type\":\"string\"},\"version\":{\"description\":\"Version controls which version of Kustomize to use for rendering manifests\",\"type\":\"string\"}},\"type\":\"object\"},\"path\":{\"description\":\"Path is a directory path within the Git repository, and is only valid for applications sourced from Git.\",\"type\":\"string\"},\"plugin\":{\"description\":\"ConfigManagementPlugin holds config management plugin specific options\",\"properties\":{\"env\":{\"description\":\"Env is a list of environment variable entries\",\"items\":{\"description\":\"EnvEntry represents an entry in the application's environment\",\"properties\":{\"name\":{\"description\":\"Name is the name of the variable, usually expressed in uppercase\",\"type\":\"string\"},\"value\":{\"description\":\"Value is the value of the variable\",\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"},\"name\":{\"type\":\"string\"}},\"type\":\"object\"},\"repoURL\":{\"description\":\"RepoURL is the URL to the repository (Git or Helm) that contains the application manifests\",\"type\":\"string\"},\"targetRevision\":{\"description\":\"TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\",\"type\":\"string\"}},\"required\":[\"repoURL\"],\"type\":\"object\"}},\"required\":[\"deployedAt\",\"id\",\"revision\"],\"type\":\"object\"},\"type\":\"array\"},\"observedAt\":{\"description\":\"ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field\",\"format\":\"date-time\",\"type\":\"string\"},\"operationState\":{\"description\":\"OperationState contains information about any ongoing operations, such as a sync\",\"properties\":{\"finishedAt\":{\"description\":\"FinishedAt contains time of operation completion\",\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"description\":\"Message holds any pertinent messages when attempting to perform operation (typically errors).\",\"type\":\"string\"},\"operation\":{\"description\":\"Operation is the original requested operation\",\"properties\":{\"info\":{\"description\":\"Info is a list of informational items for this operation\",\"items\":{\"properties\":{\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"},\"initiatedBy\":{\"description\":\"InitiatedBy contains information about who initiated the operations\",\"properties\":{\"automated\":{\"description\":\"Automated is set to true if operation was initiated automatically by the application controller.\",\"type\":\"boolean\"},\"username\":{\"description\":\"Username contains the name of a user who started operation\",\"type\":\"string\"}},\"type\":\"object\"},\"retry\":{\"description\":\"Retry controls the strategy to apply if a sync fails\",\"properties\":{\"backoff\":{\"description\":\"Backoff controls how to backoff on subsequent retries of failed syncs\",\"properties\":{\"duration\":{\"description\":\"Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \\\"2m\\\", \\\"1h\\\")\",\"type\":\"string\"},\"factor\":{\"description\":\"Factor is a factor to multiply the base duration after each failed retry\",\"format\":\"int64\",\"type\":\"integer\"},\"maxDuration\":{\"description\":\"MaxDuration is the maximum amount of time allowed for the backoff strategy\",\"type\":\"string\"}},\"type\":\"object\"},\"limit\":{\"description\":\"Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\",\"format\":\"int64\",\"type\":\"integer\"}},\"type\":\"object\"},\"sync\":{\"description\":\"Sync contains parameters for the operation\",\"properties\":{\"dryRun\":{\"description\":\"DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync\",\"type\":\"boolean\"},\"manifests\":{\"description\":\"Manifests is an optional field that overrides sync source with a local directory for development\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"prune\":{\"description\":\"Prune specifies to delete resources from the cluster that are no longer tracked in git\",\"type\":\"boolean\"},\"resources\":{\"description\":\"Resources describes which resources shall be part of the sync\",\"items\":{\"description\":\"SyncOperationResource contains resources to sync.\",\"properties\":{\"group\":{\"type\":\"string\"},\"kind\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\"},\"type\":\"array\"},\"revision\":{\"description\":\"Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.\",\"type\":\"string\"},\"source\":{\"description\":\"Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation\",\"properties\":{\"chart\":{\"description\":\"Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.\",\"type\":\"string\"},\"directory\":{\"description\":\"Directory holds path/directory specific options\",\"properties\":{\"exclude\":{\"description\":\"Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation\",\"type\":\"string\"},\"include\":{\"description\":\"Include contains a glob pattern to match paths against that should be explicitly included during manifest generation\",\"type\":\"string\"},\"jsonnet\":{\"description\":\"Jsonnet holds options specific to Jsonnet\",\"properties\":{\"extVars\":{\"description\":\"ExtVars is a list of Jsonnet External Variables\",\"items\":{\"description\":\"JsonnetVar represents a variable to be passed to jsonnet during manifest generation\",\"properties\":{\"code\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"},\"libs\":{\"description\":\"Additional library search dirs\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"tlas\":{\"description\":\"TLAS is a list of Jsonnet Top-level Arguments\",\"items\":{\"description\":\"JsonnetVar represents a variable to be passed to jsonnet during manifest generation\",\"properties\":{\"code\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"recurse\":{\"description\":\"Recurse specifies whether to scan a directory recursively for manifests\",\"type\":\"boolean\"}},\"type\":\"object\"},\"helm\":{\"description\":\"Helm holds helm specific options\",\"properties\":{\"fileParameters\":{\"description\":\"FileParameters are file parameters to the helm template\",\"items\":{\"description\":\"HelmFileParameter is a file parameter that's passed to helm template during manifest generation\",\"properties\":{\"name\":{\"description\":\"Name is the name of the Helm parameter\",\"type\":\"string\"},\"path\":{\"description\":\"Path is the path to the file containing the values for the Helm parameter\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"parameters\":{\"description\":\"Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation\",\"items\":{\"description\":\"HelmParameter is a parameter that's passed to helm template during manifest generation\",\"properties\":{\"forceString\":{\"description\":\"ForceString determines whether to tell Helm to interpret booleans and numbers as strings\",\"type\":\"boolean\"},\"name\":{\"description\":\"Name is the name of the Helm parameter\",\"type\":\"string\"},\"value\":{\"description\":\"Value is the value for the Helm parameter\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"passCredentials\":{\"description\":\"PassCredentials pass credentials to all domains (Helm's --pass-credentials)\",\"type\":\"boolean\"},\"releaseName\":{\"description\":\"ReleaseName is the Helm release name to use. If omitted it will use the application name\",\"type\":\"string\"},\"valueFiles\":{\"description\":\"ValuesFiles is a list of Helm value files to use when generating a template\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"values\":{\"description\":\"Values specifies Helm values to be passed to helm template, typically defined as a block\",\"type\":\"string\"},\"version\":{\"description\":\"Version is the Helm version to use for templating (either \\\"2\\\" or \\\"3\\\")\",\"type\":\"string\"}},\"type\":\"object\"},\"ksonnet\":{\"description\":\"Ksonnet holds ksonnet specific options\",\"properties\":{\"environment\":{\"description\":\"Environment is a ksonnet application environment name\",\"type\":\"string\"},\"parameters\":{\"description\":\"Parameters are a list of ksonnet component parameter override values\",\"items\":{\"description\":\"KsonnetParameter is a ksonnet component parameter\",\"properties\":{\"component\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"kustomize\":{\"description\":\"Kustomize holds kustomize specific options\",\"properties\":{\"commonAnnotations\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"CommonAnnotations is a list of additional annotations to add to rendered manifests\",\"type\":\"object\"},\"commonLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"CommonLabels is a list of additional labels to add to rendered manifests\",\"type\":\"object\"},\"forceCommonAnnotations\":{\"description\":\"ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps\",\"type\":\"boolean\"},\"forceCommonLabels\":{\"description\":\"ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps\",\"type\":\"boolean\"},\"images\":{\"description\":\"Images is a list of Kustomize image override specifications\",\"items\":{\"description\":\"KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\\u003cimage_name\\u003e:\\u003cimage_tag\\u003e\",\"type\":\"string\"},\"type\":\"array\"},\"namePrefix\":{\"description\":\"NamePrefix is a prefix appended to resources for Kustomize apps\",\"type\":\"string\"},\"nameSuffix\":{\"description\":\"NameSuffix is a suffix appended to resources for Kustomize apps\",\"type\":\"string\"},\"version\":{\"description\":\"Version controls which version of Kustomize to use for rendering manifests\",\"type\":\"string\"}},\"type\":\"object\"},\"path\":{\"description\":\"Path is a directory path within the Git repository, and is only valid for applications sourced from Git.\",\"type\":\"string\"},\"plugin\":{\"description\":\"ConfigManagementPlugin holds config management plugin specific options\",\"properties\":{\"env\":{\"description\":\"Env is a list of environment variable entries\",\"items\":{\"description\":\"EnvEntry represents an entry in the application's environment\",\"properties\":{\"name\":{\"description\":\"Name is the name of the variable, usually expressed in uppercase\",\"type\":\"string\"},\"value\":{\"description\":\"Value is the value of the variable\",\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"},\"name\":{\"type\":\"string\"}},\"type\":\"object\"},\"repoURL\":{\"description\":\"RepoURL is the URL to the repository (Git or Helm) that contains the application manifests\",\"type\":\"string\"},\"targetRevision\":{\"description\":\"TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\",\"type\":\"string\"}},\"required\":[\"repoURL\"],\"type\":\"object\"},\"syncOptions\":{\"description\":\"SyncOptions provide per-sync sync-options, e.g. Validate=false\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"syncStrategy\":{\"description\":\"SyncStrategy describes how to perform the sync\",\"properties\":{\"apply\":{\"description\":\"Apply will perform a `kubectl apply` to perform the sync.\",\"properties\":{\"force\":{\"description\":\"Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.\",\"type\":\"boolean\"}},\"type\":\"object\"},\"hook\":{\"description\":\"Hook will submit any referenced resources to perform the sync. This is the default strategy\",\"properties\":{\"force\":{\"description\":\"Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.\",\"type\":\"boolean\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"phase\":{\"description\":\"Phase is the current phase of the operation\",\"type\":\"string\"},\"retryCount\":{\"description\":\"RetryCount contains time of operation retries\",\"format\":\"int64\",\"type\":\"integer\"},\"startedAt\":{\"description\":\"StartedAt contains time of operation start\",\"format\":\"date-time\",\"type\":\"string\"},\"syncResult\":{\"description\":\"SyncResult is the result of a Sync operation\",\"properties\":{\"resources\":{\"description\":\"Resources contains a list of sync result items for each individual resource in a sync operation\",\"items\":{\"description\":\"ResourceResult holds the operation result details of a specific resource\",\"properties\":{\"group\":{\"description\":\"Group specifies the API group of the resource\",\"type\":\"string\"},\"hookPhase\":{\"description\":\"HookPhase contains the state of any operation associated with this resource OR hook This can also contain values for non-hook resources.\",\"type\":\"string\"},\"hookType\":{\"description\":\"HookType specifies the type of the hook. Empty for non-hook resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind specifies the API kind of the resource\",\"type\":\"string\"},\"message\":{\"description\":\"Message contains an informational or error message for the last sync OR operation\",\"type\":\"string\"},\"name\":{\"description\":\"Name specifies the name of the resource\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace specifies the target namespace of the resource\",\"type\":\"string\"},\"status\":{\"description\":\"Status holds the final result of the sync. Will be empty if the resources is yet to be applied/pruned and is always zero-value for hooks\",\"type\":\"string\"},\"syncPhase\":{\"description\":\"SyncPhase indicates the particular phase of the sync that this result was acquired in\",\"type\":\"string\"},\"version\":{\"description\":\"Version specifies the API version of the resource\",\"type\":\"string\"}},\"required\":[\"group\",\"kind\",\"name\",\"namespace\",\"version\"],\"type\":\"object\"},\"type\":\"array\"},\"revision\":{\"description\":\"Revision holds the revision this sync operation was performed to\",\"type\":\"string\"},\"source\":{\"description\":\"Source records the application source information of the sync, used for comparing auto-sync\",\"properties\":{\"chart\":{\"description\":\"Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.\",\"type\":\"string\"},\"directory\":{\"description\":\"Directory holds path/directory specific options\",\"properties\":{\"exclude\":{\"description\":\"Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation\",\"type\":\"string\"},\"include\":{\"description\":\"Include contains a glob pattern to match paths against that should be explicitly included during manifest generation\",\"type\":\"string\"},\"jsonnet\":{\"description\":\"Jsonnet holds options specific to Jsonnet\",\"properties\":{\"extVars\":{\"description\":\"ExtVars is a list of Jsonnet External Variables\",\"items\":{\"description\":\"JsonnetVar represents a variable to be passed to jsonnet during manifest generation\",\"properties\":{\"code\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"},\"libs\":{\"description\":\"Additional library search dirs\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"tlas\":{\"description\":\"TLAS is a list of Jsonnet Top-level Arguments\",\"items\":{\"description\":\"JsonnetVar represents a variable to be passed to jsonnet during manifest generation\",\"properties\":{\"code\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"recurse\":{\"description\":\"Recurse specifies whether to scan a directory recursively for manifests\",\"type\":\"boolean\"}},\"type\":\"object\"},\"helm\":{\"description\":\"Helm holds helm specific options\",\"properties\":{\"fileParameters\":{\"description\":\"FileParameters are file parameters to the helm template\",\"items\":{\"description\":\"HelmFileParameter is a file parameter that's passed to helm template during manifest generation\",\"properties\":{\"name\":{\"description\":\"Name is the name of the Helm parameter\",\"type\":\"string\"},\"path\":{\"description\":\"Path is the path to the file containing the values for the Helm parameter\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"parameters\":{\"description\":\"Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation\",\"items\":{\"description\":\"HelmParameter is a parameter that's passed to helm template during manifest generation\",\"properties\":{\"forceString\":{\"description\":\"ForceString determines whether to tell Helm to interpret booleans and numbers as strings\",\"type\":\"boolean\"},\"name\":{\"description\":\"Name is the name of the Helm parameter\",\"type\":\"string\"},\"value\":{\"description\":\"Value is the value for the Helm parameter\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"passCredentials\":{\"description\":\"PassCredentials pass credentials to all domains (Helm's --pass-credentials)\",\"type\":\"boolean\"},\"releaseName\":{\"description\":\"ReleaseName is the Helm release name to use. If omitted it will use the application name\",\"type\":\"string\"},\"valueFiles\":{\"description\":\"ValuesFiles is a list of Helm value files to use when generating a template\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"values\":{\"description\":\"Values specifies Helm values to be passed to helm template, typically defined as a block\",\"type\":\"string\"},\"version\":{\"description\":\"Version is the Helm version to use for templating (either \\\"2\\\" or \\\"3\\\")\",\"type\":\"string\"}},\"type\":\"object\"},\"ksonnet\":{\"description\":\"Ksonnet holds ksonnet specific options\",\"properties\":{\"environment\":{\"description\":\"Environment is a ksonnet application environment name\",\"type\":\"string\"},\"parameters\":{\"description\":\"Parameters are a list of ksonnet component parameter override values\",\"items\":{\"description\":\"KsonnetParameter is a ksonnet component parameter\",\"properties\":{\"component\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"kustomize\":{\"description\":\"Kustomize holds kustomize specific options\",\"properties\":{\"commonAnnotations\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"CommonAnnotations is a list of additional annotations to add to rendered manifests\",\"type\":\"object\"},\"commonLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"CommonLabels is a list of additional labels to add to rendered manifests\",\"type\":\"object\"},\"forceCommonAnnotations\":{\"description\":\"ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps\",\"type\":\"boolean\"},\"forceCommonLabels\":{\"description\":\"ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps\",\"type\":\"boolean\"},\"images\":{\"description\":\"Images is a list of Kustomize image override specifications\",\"items\":{\"description\":\"KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\\u003cimage_name\\u003e:\\u003cimage_tag\\u003e\",\"type\":\"string\"},\"type\":\"array\"},\"namePrefix\":{\"description\":\"NamePrefix is a prefix appended to resources for Kustomize apps\",\"type\":\"string\"},\"nameSuffix\":{\"description\":\"NameSuffix is a suffix appended to resources for Kustomize apps\",\"type\":\"string\"},\"version\":{\"description\":\"Version controls which version of Kustomize to use for rendering manifests\",\"type\":\"string\"}},\"type\":\"object\"},\"path\":{\"description\":\"Path is a directory path within the Git repository, and is only valid for applications sourced from Git.\",\"type\":\"string\"},\"plugin\":{\"description\":\"ConfigManagementPlugin holds config management plugin specific options\",\"properties\":{\"env\":{\"description\":\"Env is a list of environment variable entries\",\"items\":{\"description\":\"EnvEntry represents an entry in the application's environment\",\"properties\":{\"name\":{\"description\":\"Name is the name of the variable, usually expressed in uppercase\",\"type\":\"string\"},\"value\":{\"description\":\"Value is the value of the variable\",\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"},\"name\":{\"type\":\"string\"}},\"type\":\"object\"},\"repoURL\":{\"description\":\"RepoURL is the URL to the repository (Git or Helm) that contains the application manifests\",\"type\":\"string\"},\"targetRevision\":{\"description\":\"TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\",\"type\":\"string\"}},\"required\":[\"repoURL\"],\"type\":\"object\"}},\"required\":[\"revision\"],\"type\":\"object\"}},\"required\":[\"operation\",\"phase\",\"startedAt\"],\"type\":\"object\"},\"reconciledAt\":{\"description\":\"ReconciledAt indicates when the application state was reconciled using the latest git version\",\"format\":\"date-time\",\"type\":\"string\"},\"resources\":{\"description\":\"Resources is a list of Kubernetes resources managed by this application\",\"items\":{\"description\":\"ResourceStatus holds the current sync and health status of a resource TODO: describe members of this type\",\"properties\":{\"group\":{\"type\":\"string\"},\"health\":{\"description\":\"HealthStatus contains information about the currently observed health state of an application or resource\",\"properties\":{\"message\":{\"description\":\"Message is a human-readable informational message describing the health status\",\"type\":\"string\"},\"status\":{\"description\":\"Status holds the status code of the application or resource\",\"type\":\"string\"}},\"type\":\"object\"},\"hook\":{\"type\":\"boolean\"},\"kind\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"},\"requiresPruning\":{\"type\":\"boolean\"},\"status\":{\"description\":\"SyncStatusCode is a type which represents possible comparison results\",\"type\":\"string\"},\"version\":{\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"sourceType\":{\"description\":\"SourceType specifies the type of this application\",\"type\":\"string\"},\"summary\":{\"description\":\"Summary contains a list of URLs and container images used by this application\",\"properties\":{\"externalURLs\":{\"description\":\"ExternalURLs holds all external URLs of application child resources.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"images\":{\"description\":\"Images holds all images of application child resources.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"},\"sync\":{\"description\":\"Sync contains information about the application's current sync status\",\"properties\":{\"comparedTo\":{\"description\":\"ComparedTo contains information about what has been compared\",\"properties\":{\"destination\":{\"description\":\"Destination is a reference to the application's destination used for comparison\",\"properties\":{\"name\":{\"description\":\"Name is an alternate way of specifying the target cluster by its symbolic name\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace\",\"type\":\"string\"},\"server\":{\"description\":\"Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API\",\"type\":\"string\"}},\"type\":\"object\"},\"source\":{\"description\":\"Source is a reference to the application's source used for comparison\",\"properties\":{\"chart\":{\"description\":\"Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.\",\"type\":\"string\"},\"directory\":{\"description\":\"Directory holds path/directory specific options\",\"properties\":{\"exclude\":{\"description\":\"Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation\",\"type\":\"string\"},\"include\":{\"description\":\"Include contains a glob pattern to match paths against that should be explicitly included during manifest generation\",\"type\":\"string\"},\"jsonnet\":{\"description\":\"Jsonnet holds options specific to Jsonnet\",\"properties\":{\"extVars\":{\"description\":\"ExtVars is a list of Jsonnet External Variables\",\"items\":{\"description\":\"JsonnetVar represents a variable to be passed to jsonnet during manifest generation\",\"properties\":{\"code\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"},\"libs\":{\"description\":\"Additional library search dirs\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"tlas\":{\"description\":\"TLAS is a list of Jsonnet Top-level Arguments\",\"items\":{\"description\":\"JsonnetVar represents a variable to be passed to jsonnet during manifest generation\",\"properties\":{\"code\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"recurse\":{\"description\":\"Recurse specifies whether to scan a directory recursively for manifests\",\"type\":\"boolean\"}},\"type\":\"object\"},\"helm\":{\"description\":\"Helm holds helm specific options\",\"properties\":{\"fileParameters\":{\"description\":\"FileParameters are file parameters to the helm template\",\"items\":{\"description\":\"HelmFileParameter is a file parameter that's passed to helm template during manifest generation\",\"properties\":{\"name\":{\"description\":\"Name is the name of the Helm parameter\",\"type\":\"string\"},\"path\":{\"description\":\"Path is the path to the file containing the values for the Helm parameter\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"parameters\":{\"description\":\"Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation\",\"items\":{\"description\":\"HelmParameter is a parameter that's passed to helm template during manifest generation\",\"properties\":{\"forceString\":{\"description\":\"ForceString determines whether to tell Helm to interpret booleans and numbers as strings\",\"type\":\"boolean\"},\"name\":{\"description\":\"Name is the name of the Helm parameter\",\"type\":\"string\"},\"value\":{\"description\":\"Value is the value for the Helm parameter\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"passCredentials\":{\"description\":\"PassCredentials pass credentials to all domains (Helm's --pass-credentials)\",\"type\":\"boolean\"},\"releaseName\":{\"description\":\"ReleaseName is the Helm release name to use. If omitted it will use the application name\",\"type\":\"string\"},\"valueFiles\":{\"description\":\"ValuesFiles is a list of Helm value files to use when generating a template\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"values\":{\"description\":\"Values specifies Helm values to be passed to helm template, typically defined as a block\",\"type\":\"string\"},\"version\":{\"description\":\"Version is the Helm version to use for templating (either \\\"2\\\" or \\\"3\\\")\",\"type\":\"string\"}},\"type\":\"object\"},\"ksonnet\":{\"description\":\"Ksonnet holds ksonnet specific options\",\"properties\":{\"environment\":{\"description\":\"Environment is a ksonnet application environment name\",\"type\":\"string\"},\"parameters\":{\"description\":\"Parameters are a list of ksonnet component parameter override values\",\"items\":{\"description\":\"KsonnetParameter is a ksonnet component parameter\",\"properties\":{\"component\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"kustomize\":{\"description\":\"Kustomize holds kustomize specific options\",\"properties\":{\"commonAnnotations\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"CommonAnnotations is a list of additional annotations to add to rendered manifests\",\"type\":\"object\"},\"commonLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"CommonLabels is a list of additional labels to add to rendered manifests\",\"type\":\"object\"},\"forceCommonAnnotations\":{\"description\":\"ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps\",\"type\":\"boolean\"},\"forceCommonLabels\":{\"description\":\"ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps\",\"type\":\"boolean\"},\"images\":{\"description\":\"Images is a list of Kustomize image override specifications\",\"items\":{\"description\":\"KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\\u003cimage_name\\u003e:\\u003cimage_tag\\u003e\",\"type\":\"string\"},\"type\":\"array\"},\"namePrefix\":{\"description\":\"NamePrefix is a prefix appended to resources for Kustomize apps\",\"type\":\"string\"},\"nameSuffix\":{\"description\":\"NameSuffix is a suffix appended to resources for Kustomize apps\",\"type\":\"string\"},\"version\":{\"description\":\"Version controls which version of Kustomize to use for rendering manifests\",\"type\":\"string\"}},\"type\":\"object\"},\"path\":{\"description\":\"Path is a directory path within the Git repository, and is only valid for applications sourced from Git.\",\"type\":\"string\"},\"plugin\":{\"description\":\"ConfigManagementPlugin holds config management plugin specific options\",\"properties\":{\"env\":{\"description\":\"Env is a list of environment variable entries\",\"items\":{\"description\":\"EnvEntry represents an entry in the application's environment\",\"properties\":{\"name\":{\"description\":\"Name is the name of the variable, usually expressed in uppercase\",\"type\":\"string\"},\"value\":{\"description\":\"Value is the value of the variable\",\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\"},\"name\":{\"type\":\"string\"}},\"type\":\"object\"},\"repoURL\":{\"description\":\"RepoURL is the URL to the repository (Git or Helm) that contains the application manifests\",\"type\":\"string\"},\"targetRevision\":{\"description\":\"TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\",\"type\":\"string\"}},\"required\":[\"repoURL\"],\"type\":\"object\"}},\"required\":[\"destination\",\"source\"],\"type\":\"object\"},\"revision\":{\"description\":\"Revision contains information about the revision the comparison has been performed to\",\"type\":\"string\"},\"status\":{\"description\":\"Status is the sync state of the comparison\",\"type\":\"string\"}},\"required\":[\"status\"],\"type\":\"object\"}},\"type\":\"object\"}},\"required\":[\"metadata\",\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true,\"subresources\":{}}]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T00:10:50Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "applications.argoproj.io",
                            "app.kubernetes.io/part-of": "argocd"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:50Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:50Z"
                            }
                        ],
                        "name": "applications.argoproj.io",
                        "resourceVersion": "105676",
                        "uid": "3b5b8c6e-7c6f-494b-92b7-da9b83d3400b"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "argoproj.io",
                        "names": {
                            "kind": "Application",
                            "listKind": "ApplicationList",
                            "plural": "applications",
                            "shortNames": [
                                "app",
                                "apps"
                            ],
                            "singular": "application"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.sync.status",
                                        "name": "Sync Status",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.health.status",
                                        "name": "Health Status",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.sync.revision",
                                        "name": "Revision",
                                        "priority": 10,
                                        "type": "string"
                                    }
                                ],
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "Application is a definition of Application resource.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "operation": {
                                                "description": "Operation contains information about a requested or running operation",
                                                "properties": {
                                                    "info": {
                                                        "description": "Info is a list of informational items for this operation",
                                                        "items": {
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string"
                                                                },
                                                                "value": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "name",
                                                                "value"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "initiatedBy": {
                                                        "description": "InitiatedBy contains information about who initiated the operations",
                                                        "properties": {
                                                            "automated": {
                                                                "description": "Automated is set to true if operation was initiated automatically by the application controller.",
                                                                "type": "boolean"
                                                            },
                                                            "username": {
                                                                "description": "Username contains the name of a user who started operation",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "retry": {
                                                        "description": "Retry controls the strategy to apply if a sync fails",
                                                        "properties": {
                                                            "backoff": {
                                                                "description": "Backoff controls how to backoff on subsequent retries of failed syncs",
                                                                "properties": {
                                                                    "duration": {
                                                                        "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")",
                                                                        "type": "string"
                                                                    },
                                                                    "factor": {
                                                                        "description": "Factor is a factor to multiply the base duration after each failed retry",
                                                                        "format": "int64",
                                                                        "type": "integer"
                                                                    },
                                                                    "maxDuration": {
                                                                        "description": "MaxDuration is the maximum amount of time allowed for the backoff strategy",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "limit": {
                                                                "description": "Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.",
                                                                "format": "int64",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "sync": {
                                                        "description": "Sync contains parameters for the operation",
                                                        "properties": {
                                                            "dryRun": {
                                                                "description": "DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync",
                                                                "type": "boolean"
                                                            },
                                                            "manifests": {
                                                                "description": "Manifests is an optional field that overrides sync source with a local directory for development",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "prune": {
                                                                "description": "Prune specifies to delete resources from the cluster that are no longer tracked in git",
                                                                "type": "boolean"
                                                            },
                                                            "resources": {
                                                                "description": "Resources describes which resources shall be part of the sync",
                                                                "items": {
                                                                    "description": "SyncOperationResource contains resources to sync.",
                                                                    "properties": {
                                                                        "group": {
                                                                            "type": "string"
                                                                        },
                                                                        "kind": {
                                                                            "type": "string"
                                                                        },
                                                                        "name": {
                                                                            "type": "string"
                                                                        },
                                                                        "namespace": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "kind",
                                                                        "name"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "revision": {
                                                                "description": "Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.",
                                                                "type": "string"
                                                            },
                                                            "source": {
                                                                "description": "Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation",
                                                                "properties": {
                                                                    "chart": {
                                                                        "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                        "type": "string"
                                                                    },
                                                                    "directory": {
                                                                        "description": "Directory holds path/directory specific options",
                                                                        "properties": {
                                                                            "exclude": {
                                                                                "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                                "type": "string"
                                                                            },
                                                                            "include": {
                                                                                "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                                "type": "string"
                                                                            },
                                                                            "jsonnet": {
                                                                                "description": "Jsonnet holds options specific to Jsonnet",
                                                                                "properties": {
                                                                                    "extVars": {
                                                                                        "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                        "items": {
                                                                                            "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                            "properties": {
                                                                                                "code": {
                                                                                                    "type": "boolean"
                                                                                                },
                                                                                                "name": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "name",
                                                                                                "value"
                                                                                            ],
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "libs": {
                                                                                        "description": "Additional library search dirs",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "tlas": {
                                                                                        "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                        "items": {
                                                                                            "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                            "properties": {
                                                                                                "code": {
                                                                                                    "type": "boolean"
                                                                                                },
                                                                                                "name": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "name",
                                                                                                "value"
                                                                                            ],
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "recurse": {
                                                                                "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "helm": {
                                                                        "description": "Helm holds helm specific options",
                                                                        "properties": {
                                                                            "fileParameters": {
                                                                                "description": "FileParameters are file parameters to the helm template",
                                                                                "items": {
                                                                                    "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                                    "properties": {
                                                                                        "name": {
                                                                                            "description": "Name is the name of the Helm parameter",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "path": {
                                                                                            "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "parameters": {
                                                                                "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                                "items": {
                                                                                    "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                                    "properties": {
                                                                                        "forceString": {
                                                                                            "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "name": {
                                                                                            "description": "Name is the name of the Helm parameter",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "value": {
                                                                                            "description": "Value is the value for the Helm parameter",
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "passCredentials": {
                                                                                "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                                "type": "boolean"
                                                                            },
                                                                            "releaseName": {
                                                                                "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                                "type": "string"
                                                                            },
                                                                            "valueFiles": {
                                                                                "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "values": {
                                                                                "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                                "type": "string"
                                                                            },
                                                                            "version": {
                                                                                "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "ksonnet": {
                                                                        "description": "Ksonnet holds ksonnet specific options",
                                                                        "properties": {
                                                                            "environment": {
                                                                                "description": "Environment is a ksonnet application environment name",
                                                                                "type": "string"
                                                                            },
                                                                            "parameters": {
                                                                                "description": "Parameters are a list of ksonnet component parameter override values",
                                                                                "items": {
                                                                                    "description": "KsonnetParameter is a ksonnet component parameter",
                                                                                    "properties": {
                                                                                        "component": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "value": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "name",
                                                                                        "value"
                                                                                    ],
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "kustomize": {
                                                                        "description": "Kustomize holds kustomize specific options",
                                                                        "properties": {
                                                                            "commonAnnotations": {
                                                                                "additionalProperties": {
                                                                                    "type": "string"
                                                                                },
                                                                                "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                                "type": "object"
                                                                            },
                                                                            "commonLabels": {
                                                                                "additionalProperties": {
                                                                                    "type": "string"
                                                                                },
                                                                                "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                                "type": "object"
                                                                            },
                                                                            "forceCommonAnnotations": {
                                                                                "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                                "type": "boolean"
                                                                            },
                                                                            "forceCommonLabels": {
                                                                                "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                                "type": "boolean"
                                                                            },
                                                                            "images": {
                                                                                "description": "Images is a list of Kustomize image override specifications",
                                                                                "items": {
                                                                                    "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "namePrefix": {
                                                                                "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                                "type": "string"
                                                                            },
                                                                            "nameSuffix": {
                                                                                "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                                "type": "string"
                                                                            },
                                                                            "version": {
                                                                                "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "path": {
                                                                        "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                        "type": "string"
                                                                    },
                                                                    "plugin": {
                                                                        "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                        "properties": {
                                                                            "env": {
                                                                                "description": "Env is a list of environment variable entries",
                                                                                "items": {
                                                                                    "description": "EnvEntry represents an entry in the application's environment",
                                                                                    "properties": {
                                                                                        "name": {
                                                                                            "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "value": {
                                                                                            "description": "Value is the value of the variable",
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "name",
                                                                                        "value"
                                                                                    ],
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "name": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "repoURL": {
                                                                        "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                        "type": "string"
                                                                    },
                                                                    "targetRevision": {
                                                                        "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "repoURL"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "syncOptions": {
                                                                "description": "SyncOptions provide per-sync sync-options, e.g. Validate=false",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "syncStrategy": {
                                                                "description": "SyncStrategy describes how to perform the sync",
                                                                "properties": {
                                                                    "apply": {
                                                                        "description": "Apply will perform a `kubectl apply` to perform the sync.",
                                                                        "properties": {
                                                                            "force": {
                                                                                "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "hook": {
                                                                        "description": "Hook will submit any referenced resources to perform the sync. This is the default strategy",
                                                                        "properties": {
                                                                            "force": {
                                                                                "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.",
                                                "properties": {
                                                    "destination": {
                                                        "description": "Destination is a reference to the target Kubernetes server and namespace",
                                                        "properties": {
                                                            "name": {
                                                                "description": "Name is an alternate way of specifying the target cluster by its symbolic name",
                                                                "type": "string"
                                                            },
                                                            "namespace": {
                                                                "description": "Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace",
                                                                "type": "string"
                                                            },
                                                            "server": {
                                                                "description": "Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "ignoreDifferences": {
                                                        "description": "IgnoreDifferences is a list of resources and their fields which should be ignored during comparison",
                                                        "items": {
                                                            "description": "ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.",
                                                            "properties": {
                                                                "group": {
                                                                    "type": "string"
                                                                },
                                                                "jqPathExpressions": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "jsonPointers": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "kind": {
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "type": "string"
                                                                },
                                                                "namespace": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "kind"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "info": {
                                                        "description": "Info contains a list of information (URLs, email addresses, and plain text) that relates to the application",
                                                        "items": {
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string"
                                                                },
                                                                "value": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "name",
                                                                "value"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "project": {
                                                        "description": "Project is a reference to the project this application belongs to. The empty string means that application belongs to the 'default' project.",
                                                        "type": "string"
                                                    },
                                                    "revisionHistoryLimit": {
                                                        "description": "RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.",
                                                        "format": "int64",
                                                        "type": "integer"
                                                    },
                                                    "source": {
                                                        "description": "Source is a reference to the location of the application's manifests or chart",
                                                        "properties": {
                                                            "chart": {
                                                                "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                "type": "string"
                                                            },
                                                            "directory": {
                                                                "description": "Directory holds path/directory specific options",
                                                                "properties": {
                                                                    "exclude": {
                                                                        "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                        "type": "string"
                                                                    },
                                                                    "include": {
                                                                        "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                        "type": "string"
                                                                    },
                                                                    "jsonnet": {
                                                                        "description": "Jsonnet holds options specific to Jsonnet",
                                                                        "properties": {
                                                                            "extVars": {
                                                                                "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                "items": {
                                                                                    "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                    "properties": {
                                                                                        "code": {
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "value": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "name",
                                                                                        "value"
                                                                                    ],
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "libs": {
                                                                                "description": "Additional library search dirs",
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "tlas": {
                                                                                "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                "items": {
                                                                                    "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                    "properties": {
                                                                                        "code": {
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "value": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "name",
                                                                                        "value"
                                                                                    ],
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "recurse": {
                                                                        "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "helm": {
                                                                "description": "Helm holds helm specific options",
                                                                "properties": {
                                                                    "fileParameters": {
                                                                        "description": "FileParameters are file parameters to the helm template",
                                                                        "items": {
                                                                            "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                            "properties": {
                                                                                "name": {
                                                                                    "description": "Name is the name of the Helm parameter",
                                                                                    "type": "string"
                                                                                },
                                                                                "path": {
                                                                                    "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "parameters": {
                                                                        "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                        "items": {
                                                                            "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                            "properties": {
                                                                                "forceString": {
                                                                                    "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "name": {
                                                                                    "description": "Name is the name of the Helm parameter",
                                                                                    "type": "string"
                                                                                },
                                                                                "value": {
                                                                                    "description": "Value is the value for the Helm parameter",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "passCredentials": {
                                                                        "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                        "type": "boolean"
                                                                    },
                                                                    "releaseName": {
                                                                        "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                        "type": "string"
                                                                    },
                                                                    "valueFiles": {
                                                                        "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "values": {
                                                                        "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                        "type": "string"
                                                                    },
                                                                    "version": {
                                                                        "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "ksonnet": {
                                                                "description": "Ksonnet holds ksonnet specific options",
                                                                "properties": {
                                                                    "environment": {
                                                                        "description": "Environment is a ksonnet application environment name",
                                                                        "type": "string"
                                                                    },
                                                                    "parameters": {
                                                                        "description": "Parameters are a list of ksonnet component parameter override values",
                                                                        "items": {
                                                                            "description": "KsonnetParameter is a ksonnet component parameter",
                                                                            "properties": {
                                                                                "component": {
                                                                                    "type": "string"
                                                                                },
                                                                                "name": {
                                                                                    "type": "string"
                                                                                },
                                                                                "value": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "name",
                                                                                "value"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "kustomize": {
                                                                "description": "Kustomize holds kustomize specific options",
                                                                "properties": {
                                                                    "commonAnnotations": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                        "type": "object"
                                                                    },
                                                                    "commonLabels": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                        "type": "object"
                                                                    },
                                                                    "forceCommonAnnotations": {
                                                                        "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                        "type": "boolean"
                                                                    },
                                                                    "forceCommonLabels": {
                                                                        "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                        "type": "boolean"
                                                                    },
                                                                    "images": {
                                                                        "description": "Images is a list of Kustomize image override specifications",
                                                                        "items": {
                                                                            "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "namePrefix": {
                                                                        "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                        "type": "string"
                                                                    },
                                                                    "nameSuffix": {
                                                                        "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                        "type": "string"
                                                                    },
                                                                    "version": {
                                                                        "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "path": {
                                                                "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                "type": "string"
                                                            },
                                                            "plugin": {
                                                                "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                "properties": {
                                                                    "env": {
                                                                        "description": "Env is a list of environment variable entries",
                                                                        "items": {
                                                                            "description": "EnvEntry represents an entry in the application's environment",
                                                                            "properties": {
                                                                                "name": {
                                                                                    "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                    "type": "string"
                                                                                },
                                                                                "value": {
                                                                                    "description": "Value is the value of the variable",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "name",
                                                                                "value"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "name": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "repoURL": {
                                                                "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                "type": "string"
                                                            },
                                                            "targetRevision": {
                                                                "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "repoURL"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "syncPolicy": {
                                                        "description": "SyncPolicy controls when and how a sync will be performed",
                                                        "properties": {
                                                            "automated": {
                                                                "description": "Automated will keep an application synced to the target revision",
                                                                "properties": {
                                                                    "allowEmpty": {
                                                                        "description": "AllowEmpty allows apps have zero live resources (default: false)",
                                                                        "type": "boolean"
                                                                    },
                                                                    "prune": {
                                                                        "description": "Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)",
                                                                        "type": "boolean"
                                                                    },
                                                                    "selfHeal": {
                                                                        "description": "SelfHeal specifes whether to revert resources back to their desired state upon modification in the cluster (default: false)",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "retry": {
                                                                "description": "Retry controls failed sync retry behavior",
                                                                "properties": {
                                                                    "backoff": {
                                                                        "description": "Backoff controls how to backoff on subsequent retries of failed syncs",
                                                                        "properties": {
                                                                            "duration": {
                                                                                "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")",
                                                                                "type": "string"
                                                                            },
                                                                            "factor": {
                                                                                "description": "Factor is a factor to multiply the base duration after each failed retry",
                                                                                "format": "int64",
                                                                                "type": "integer"
                                                                            },
                                                                            "maxDuration": {
                                                                                "description": "MaxDuration is the maximum amount of time allowed for the backoff strategy",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "limit": {
                                                                        "description": "Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.",
                                                                        "format": "int64",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "syncOptions": {
                                                                "description": "Options allow you to specify whole app sync-options",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [
                                                    "destination",
                                                    "project",
                                                    "source"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "description": "ApplicationStatus contains status information for the application",
                                                "properties": {
                                                    "conditions": {
                                                        "description": "Conditions is a list of currently observed application conditions",
                                                        "items": {
                                                            "description": "ApplicationCondition contains details about an application condition, which is usally an error or warning",
                                                            "properties": {
                                                                "lastTransitionTime": {
                                                                    "description": "LastTransitionTime is the time the condition was last observed",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "message": {
                                                                    "description": "Message contains human-readable message indicating details about condition",
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Type is an application condition type",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "message",
                                                                "type"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "health": {
                                                        "description": "Health contains information about the application's current health status",
                                                        "properties": {
                                                            "message": {
                                                                "description": "Message is a human-readable informational message describing the health status",
                                                                "type": "string"
                                                            },
                                                            "status": {
                                                                "description": "Status holds the status code of the application or resource",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "history": {
                                                        "description": "History contains information about the application's sync history",
                                                        "items": {
                                                            "description": "RevisionHistory contains history information about a previous sync",
                                                            "properties": {
                                                                "deployStartedAt": {
                                                                    "description": "DeployStartedAt holds the time the sync operation started",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "deployedAt": {
                                                                    "description": "DeployedAt holds the time the sync operation completed",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "id": {
                                                                    "description": "ID is an auto incrementing identifier of the RevisionHistory",
                                                                    "format": "int64",
                                                                    "type": "integer"
                                                                },
                                                                "revision": {
                                                                    "description": "Revision holds the revision the sync was performed against",
                                                                    "type": "string"
                                                                },
                                                                "source": {
                                                                    "description": "Source is a reference to the application source used for the sync operation",
                                                                    "properties": {
                                                                        "chart": {
                                                                            "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                            "type": "string"
                                                                        },
                                                                        "directory": {
                                                                            "description": "Directory holds path/directory specific options",
                                                                            "properties": {
                                                                                "exclude": {
                                                                                    "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                                    "type": "string"
                                                                                },
                                                                                "include": {
                                                                                    "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                                    "type": "string"
                                                                                },
                                                                                "jsonnet": {
                                                                                    "description": "Jsonnet holds options specific to Jsonnet",
                                                                                    "properties": {
                                                                                        "extVars": {
                                                                                            "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                            "items": {
                                                                                                "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                "properties": {
                                                                                                    "code": {
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "name": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "value": {
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "required": [
                                                                                                    "name",
                                                                                                    "value"
                                                                                                ],
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "libs": {
                                                                                            "description": "Additional library search dirs",
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "tlas": {
                                                                                            "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                            "items": {
                                                                                                "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                "properties": {
                                                                                                    "code": {
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "name": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "value": {
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "required": [
                                                                                                    "name",
                                                                                                    "value"
                                                                                                ],
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "recurse": {
                                                                                    "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                                    "type": "boolean"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "helm": {
                                                                            "description": "Helm holds helm specific options",
                                                                            "properties": {
                                                                                "fileParameters": {
                                                                                    "description": "FileParameters are file parameters to the helm template",
                                                                                    "items": {
                                                                                        "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                                        "properties": {
                                                                                            "name": {
                                                                                                "description": "Name is the name of the Helm parameter",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "path": {
                                                                                                "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "parameters": {
                                                                                    "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                                    "items": {
                                                                                        "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                                        "properties": {
                                                                                            "forceString": {
                                                                                                "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "name": {
                                                                                                "description": "Name is the name of the Helm parameter",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "value": {
                                                                                                "description": "Value is the value for the Helm parameter",
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "passCredentials": {
                                                                                    "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "releaseName": {
                                                                                    "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                                    "type": "string"
                                                                                },
                                                                                "valueFiles": {
                                                                                    "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "values": {
                                                                                    "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                                    "type": "string"
                                                                                },
                                                                                "version": {
                                                                                    "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "ksonnet": {
                                                                            "description": "Ksonnet holds ksonnet specific options",
                                                                            "properties": {
                                                                                "environment": {
                                                                                    "description": "Environment is a ksonnet application environment name",
                                                                                    "type": "string"
                                                                                },
                                                                                "parameters": {
                                                                                    "description": "Parameters are a list of ksonnet component parameter override values",
                                                                                    "items": {
                                                                                        "description": "KsonnetParameter is a ksonnet component parameter",
                                                                                        "properties": {
                                                                                            "component": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "name": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "value": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "required": [
                                                                                            "name",
                                                                                            "value"
                                                                                        ],
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "kustomize": {
                                                                            "description": "Kustomize holds kustomize specific options",
                                                                            "properties": {
                                                                                "commonAnnotations": {
                                                                                    "additionalProperties": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                                    "type": "object"
                                                                                },
                                                                                "commonLabels": {
                                                                                    "additionalProperties": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                                    "type": "object"
                                                                                },
                                                                                "forceCommonAnnotations": {
                                                                                    "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "forceCommonLabels": {
                                                                                    "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "images": {
                                                                                    "description": "Images is a list of Kustomize image override specifications",
                                                                                    "items": {
                                                                                        "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "namePrefix": {
                                                                                    "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                                    "type": "string"
                                                                                },
                                                                                "nameSuffix": {
                                                                                    "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                                    "type": "string"
                                                                                },
                                                                                "version": {
                                                                                    "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "path": {
                                                                            "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                            "type": "string"
                                                                        },
                                                                        "plugin": {
                                                                            "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                            "properties": {
                                                                                "env": {
                                                                                    "description": "Env is a list of environment variable entries",
                                                                                    "items": {
                                                                                        "description": "EnvEntry represents an entry in the application's environment",
                                                                                        "properties": {
                                                                                            "name": {
                                                                                                "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "value": {
                                                                                                "description": "Value is the value of the variable",
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "required": [
                                                                                            "name",
                                                                                            "value"
                                                                                        ],
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "name": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "repoURL": {
                                                                            "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                            "type": "string"
                                                                        },
                                                                        "targetRevision": {
                                                                            "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "repoURL"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "required": [
                                                                "deployedAt",
                                                                "id",
                                                                "revision"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "observedAt": {
                                                        "description": "ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "operationState": {
                                                        "description": "OperationState contains information about any ongoing operations, such as a sync",
                                                        "properties": {
                                                            "finishedAt": {
                                                                "description": "FinishedAt contains time of operation completion",
                                                                "format": "date-time",
                                                                "type": "string"
                                                            },
                                                            "message": {
                                                                "description": "Message holds any pertinent messages when attempting to perform operation (typically errors).",
                                                                "type": "string"
                                                            },
                                                            "operation": {
                                                                "description": "Operation is the original requested operation",
                                                                "properties": {
                                                                    "info": {
                                                                        "description": "Info is a list of informational items for this operation",
                                                                        "items": {
                                                                            "properties": {
                                                                                "name": {
                                                                                    "type": "string"
                                                                                },
                                                                                "value": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "name",
                                                                                "value"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "initiatedBy": {
                                                                        "description": "InitiatedBy contains information about who initiated the operations",
                                                                        "properties": {
                                                                            "automated": {
                                                                                "description": "Automated is set to true if operation was initiated automatically by the application controller.",
                                                                                "type": "boolean"
                                                                            },
                                                                            "username": {
                                                                                "description": "Username contains the name of a user who started operation",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "retry": {
                                                                        "description": "Retry controls the strategy to apply if a sync fails",
                                                                        "properties": {
                                                                            "backoff": {
                                                                                "description": "Backoff controls how to backoff on subsequent retries of failed syncs",
                                                                                "properties": {
                                                                                    "duration": {
                                                                                        "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "factor": {
                                                                                        "description": "Factor is a factor to multiply the base duration after each failed retry",
                                                                                        "format": "int64",
                                                                                        "type": "integer"
                                                                                    },
                                                                                    "maxDuration": {
                                                                                        "description": "MaxDuration is the maximum amount of time allowed for the backoff strategy",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "limit": {
                                                                                "description": "Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.",
                                                                                "format": "int64",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "sync": {
                                                                        "description": "Sync contains parameters for the operation",
                                                                        "properties": {
                                                                            "dryRun": {
                                                                                "description": "DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync",
                                                                                "type": "boolean"
                                                                            },
                                                                            "manifests": {
                                                                                "description": "Manifests is an optional field that overrides sync source with a local directory for development",
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "prune": {
                                                                                "description": "Prune specifies to delete resources from the cluster that are no longer tracked in git",
                                                                                "type": "boolean"
                                                                            },
                                                                            "resources": {
                                                                                "description": "Resources describes which resources shall be part of the sync",
                                                                                "items": {
                                                                                    "description": "SyncOperationResource contains resources to sync.",
                                                                                    "properties": {
                                                                                        "group": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "kind": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "namespace": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "kind",
                                                                                        "name"
                                                                                    ],
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "revision": {
                                                                                "description": "Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.",
                                                                                "type": "string"
                                                                            },
                                                                            "source": {
                                                                                "description": "Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation",
                                                                                "properties": {
                                                                                    "chart": {
                                                                                        "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "directory": {
                                                                                        "description": "Directory holds path/directory specific options",
                                                                                        "properties": {
                                                                                            "exclude": {
                                                                                                "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "include": {
                                                                                                "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "jsonnet": {
                                                                                                "description": "Jsonnet holds options specific to Jsonnet",
                                                                                                "properties": {
                                                                                                    "extVars": {
                                                                                                        "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                                        "items": {
                                                                                                            "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                            "properties": {
                                                                                                                "code": {
                                                                                                                    "type": "boolean"
                                                                                                                },
                                                                                                                "name": {
                                                                                                                    "type": "string"
                                                                                                                },
                                                                                                                "value": {
                                                                                                                    "type": "string"
                                                                                                                }
                                                                                                            },
                                                                                                            "required": [
                                                                                                                "name",
                                                                                                                "value"
                                                                                                            ],
                                                                                                            "type": "object"
                                                                                                        },
                                                                                                        "type": "array"
                                                                                                    },
                                                                                                    "libs": {
                                                                                                        "description": "Additional library search dirs",
                                                                                                        "items": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "type": "array"
                                                                                                    },
                                                                                                    "tlas": {
                                                                                                        "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                                        "items": {
                                                                                                            "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                            "properties": {
                                                                                                                "code": {
                                                                                                                    "type": "boolean"
                                                                                                                },
                                                                                                                "name": {
                                                                                                                    "type": "string"
                                                                                                                },
                                                                                                                "value": {
                                                                                                                    "type": "string"
                                                                                                                }
                                                                                                            },
                                                                                                            "required": [
                                                                                                                "name",
                                                                                                                "value"
                                                                                                            ],
                                                                                                            "type": "object"
                                                                                                        },
                                                                                                        "type": "array"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "recurse": {
                                                                                                "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                                                "type": "boolean"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "helm": {
                                                                                        "description": "Helm holds helm specific options",
                                                                                        "properties": {
                                                                                            "fileParameters": {
                                                                                                "description": "FileParameters are file parameters to the helm template",
                                                                                                "items": {
                                                                                                    "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                                                    "properties": {
                                                                                                        "name": {
                                                                                                            "description": "Name is the name of the Helm parameter",
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "path": {
                                                                                                            "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "parameters": {
                                                                                                "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                                                "items": {
                                                                                                    "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                                                    "properties": {
                                                                                                        "forceString": {
                                                                                                            "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                                            "type": "boolean"
                                                                                                        },
                                                                                                        "name": {
                                                                                                            "description": "Name is the name of the Helm parameter",
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "description": "Value is the value for the Helm parameter",
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "passCredentials": {
                                                                                                "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "releaseName": {
                                                                                                "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "valueFiles": {
                                                                                                "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "values": {
                                                                                                "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "version": {
                                                                                                "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "ksonnet": {
                                                                                        "description": "Ksonnet holds ksonnet specific options",
                                                                                        "properties": {
                                                                                            "environment": {
                                                                                                "description": "Environment is a ksonnet application environment name",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "parameters": {
                                                                                                "description": "Parameters are a list of ksonnet component parameter override values",
                                                                                                "items": {
                                                                                                    "description": "KsonnetParameter is a ksonnet component parameter",
                                                                                                    "properties": {
                                                                                                        "component": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "name": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "required": [
                                                                                                        "name",
                                                                                                        "value"
                                                                                                    ],
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "kustomize": {
                                                                                        "description": "Kustomize holds kustomize specific options",
                                                                                        "properties": {
                                                                                            "commonAnnotations": {
                                                                                                "additionalProperties": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                                                "type": "object"
                                                                                            },
                                                                                            "commonLabels": {
                                                                                                "additionalProperties": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                                                "type": "object"
                                                                                            },
                                                                                            "forceCommonAnnotations": {
                                                                                                "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "forceCommonLabels": {
                                                                                                "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "images": {
                                                                                                "description": "Images is a list of Kustomize image override specifications",
                                                                                                "items": {
                                                                                                    "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "namePrefix": {
                                                                                                "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "nameSuffix": {
                                                                                                "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "version": {
                                                                                                "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "path": {
                                                                                        "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "plugin": {
                                                                                        "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                                        "properties": {
                                                                                            "env": {
                                                                                                "description": "Env is a list of environment variable entries",
                                                                                                "items": {
                                                                                                    "description": "EnvEntry represents an entry in the application's environment",
                                                                                                    "properties": {
                                                                                                        "name": {
                                                                                                            "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "description": "Value is the value of the variable",
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "required": [
                                                                                                        "name",
                                                                                                        "value"
                                                                                                    ],
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "name": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "repoURL": {
                                                                                        "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "targetRevision": {
                                                                                        "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "repoURL"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "syncOptions": {
                                                                                "description": "SyncOptions provide per-sync sync-options, e.g. Validate=false",
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "syncStrategy": {
                                                                                "description": "SyncStrategy describes how to perform the sync",
                                                                                "properties": {
                                                                                    "apply": {
                                                                                        "description": "Apply will perform a `kubectl apply` to perform the sync.",
                                                                                        "properties": {
                                                                                            "force": {
                                                                                                "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                                                                                                "type": "boolean"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "hook": {
                                                                                        "description": "Hook will submit any referenced resources to perform the sync. This is the default strategy",
                                                                                        "properties": {
                                                                                            "force": {
                                                                                                "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                                                                                                "type": "boolean"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "phase": {
                                                                "description": "Phase is the current phase of the operation",
                                                                "type": "string"
                                                            },
                                                            "retryCount": {
                                                                "description": "RetryCount contains time of operation retries",
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "startedAt": {
                                                                "description": "StartedAt contains time of operation start",
                                                                "format": "date-time",
                                                                "type": "string"
                                                            },
                                                            "syncResult": {
                                                                "description": "SyncResult is the result of a Sync operation",
                                                                "properties": {
                                                                    "resources": {
                                                                        "description": "Resources contains a list of sync result items for each individual resource in a sync operation",
                                                                        "items": {
                                                                            "description": "ResourceResult holds the operation result details of a specific resource",
                                                                            "properties": {
                                                                                "group": {
                                                                                    "description": "Group specifies the API group of the resource",
                                                                                    "type": "string"
                                                                                },
                                                                                "hookPhase": {
                                                                                    "description": "HookPhase contains the state of any operation associated with this resource OR hook This can also contain values for non-hook resources.",
                                                                                    "type": "string"
                                                                                },
                                                                                "hookType": {
                                                                                    "description": "HookType specifies the type of the hook. Empty for non-hook resources",
                                                                                    "type": "string"
                                                                                },
                                                                                "kind": {
                                                                                    "description": "Kind specifies the API kind of the resource",
                                                                                    "type": "string"
                                                                                },
                                                                                "message": {
                                                                                    "description": "Message contains an informational or error message for the last sync OR operation",
                                                                                    "type": "string"
                                                                                },
                                                                                "name": {
                                                                                    "description": "Name specifies the name of the resource",
                                                                                    "type": "string"
                                                                                },
                                                                                "namespace": {
                                                                                    "description": "Namespace specifies the target namespace of the resource",
                                                                                    "type": "string"
                                                                                },
                                                                                "status": {
                                                                                    "description": "Status holds the final result of the sync. Will be empty if the resources is yet to be applied/pruned and is always zero-value for hooks",
                                                                                    "type": "string"
                                                                                },
                                                                                "syncPhase": {
                                                                                    "description": "SyncPhase indicates the particular phase of the sync that this result was acquired in",
                                                                                    "type": "string"
                                                                                },
                                                                                "version": {
                                                                                    "description": "Version specifies the API version of the resource",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "group",
                                                                                "kind",
                                                                                "name",
                                                                                "namespace",
                                                                                "version"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "revision": {
                                                                        "description": "Revision holds the revision this sync operation was performed to",
                                                                        "type": "string"
                                                                    },
                                                                    "source": {
                                                                        "description": "Source records the application source information of the sync, used for comparing auto-sync",
                                                                        "properties": {
                                                                            "chart": {
                                                                                "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                                "type": "string"
                                                                            },
                                                                            "directory": {
                                                                                "description": "Directory holds path/directory specific options",
                                                                                "properties": {
                                                                                    "exclude": {
                                                                                        "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "include": {
                                                                                        "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "jsonnet": {
                                                                                        "description": "Jsonnet holds options specific to Jsonnet",
                                                                                        "properties": {
                                                                                            "extVars": {
                                                                                                "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                                "items": {
                                                                                                    "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                    "properties": {
                                                                                                        "code": {
                                                                                                            "type": "boolean"
                                                                                                        },
                                                                                                        "name": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "required": [
                                                                                                        "name",
                                                                                                        "value"
                                                                                                    ],
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "libs": {
                                                                                                "description": "Additional library search dirs",
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "tlas": {
                                                                                                "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                                "items": {
                                                                                                    "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                    "properties": {
                                                                                                        "code": {
                                                                                                            "type": "boolean"
                                                                                                        },
                                                                                                        "name": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "required": [
                                                                                                        "name",
                                                                                                        "value"
                                                                                                    ],
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "recurse": {
                                                                                        "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                                        "type": "boolean"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "helm": {
                                                                                "description": "Helm holds helm specific options",
                                                                                "properties": {
                                                                                    "fileParameters": {
                                                                                        "description": "FileParameters are file parameters to the helm template",
                                                                                        "items": {
                                                                                            "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                                            "properties": {
                                                                                                "name": {
                                                                                                    "description": "Name is the name of the Helm parameter",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "path": {
                                                                                                    "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "parameters": {
                                                                                        "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                                        "items": {
                                                                                            "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                                            "properties": {
                                                                                                "forceString": {
                                                                                                    "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                                    "type": "boolean"
                                                                                                },
                                                                                                "name": {
                                                                                                    "description": "Name is the name of the Helm parameter",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "description": "Value is the value for the Helm parameter",
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "passCredentials": {
                                                                                        "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "releaseName": {
                                                                                        "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "valueFiles": {
                                                                                        "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "values": {
                                                                                        "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "version": {
                                                                                        "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "ksonnet": {
                                                                                "description": "Ksonnet holds ksonnet specific options",
                                                                                "properties": {
                                                                                    "environment": {
                                                                                        "description": "Environment is a ksonnet application environment name",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "parameters": {
                                                                                        "description": "Parameters are a list of ksonnet component parameter override values",
                                                                                        "items": {
                                                                                            "description": "KsonnetParameter is a ksonnet component parameter",
                                                                                            "properties": {
                                                                                                "component": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "name": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "name",
                                                                                                "value"
                                                                                            ],
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "kustomize": {
                                                                                "description": "Kustomize holds kustomize specific options",
                                                                                "properties": {
                                                                                    "commonAnnotations": {
                                                                                        "additionalProperties": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                                        "type": "object"
                                                                                    },
                                                                                    "commonLabels": {
                                                                                        "additionalProperties": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                                        "type": "object"
                                                                                    },
                                                                                    "forceCommonAnnotations": {
                                                                                        "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "forceCommonLabels": {
                                                                                        "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "images": {
                                                                                        "description": "Images is a list of Kustomize image override specifications",
                                                                                        "items": {
                                                                                            "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "namePrefix": {
                                                                                        "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "nameSuffix": {
                                                                                        "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "version": {
                                                                                        "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "path": {
                                                                                "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                                "type": "string"
                                                                            },
                                                                            "plugin": {
                                                                                "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                                "properties": {
                                                                                    "env": {
                                                                                        "description": "Env is a list of environment variable entries",
                                                                                        "items": {
                                                                                            "description": "EnvEntry represents an entry in the application's environment",
                                                                                            "properties": {
                                                                                                "name": {
                                                                                                    "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "description": "Value is the value of the variable",
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "name",
                                                                                                "value"
                                                                                            ],
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "repoURL": {
                                                                                "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                                "type": "string"
                                                                            },
                                                                            "targetRevision": {
                                                                                "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "repoURL"
                                                                        ],
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "revision"
                                                                ],
                                                                "type": "object"
                                                            }
                                                        },
                                                        "required": [
                                                            "operation",
                                                            "phase",
                                                            "startedAt"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "reconciledAt": {
                                                        "description": "ReconciledAt indicates when the application state was reconciled using the latest git version",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "resources": {
                                                        "description": "Resources is a list of Kubernetes resources managed by this application",
                                                        "items": {
                                                            "description": "ResourceStatus holds the current sync and health status of a resource TODO: describe members of this type",
                                                            "properties": {
                                                                "group": {
                                                                    "type": "string"
                                                                },
                                                                "health": {
                                                                    "description": "HealthStatus contains information about the currently observed health state of an application or resource",
                                                                    "properties": {
                                                                        "message": {
                                                                            "description": "Message is a human-readable informational message describing the health status",
                                                                            "type": "string"
                                                                        },
                                                                        "status": {
                                                                            "description": "Status holds the status code of the application or resource",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "hook": {
                                                                    "type": "boolean"
                                                                },
                                                                "kind": {
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "type": "string"
                                                                },
                                                                "namespace": {
                                                                    "type": "string"
                                                                },
                                                                "requiresPruning": {
                                                                    "type": "boolean"
                                                                },
                                                                "status": {
                                                                    "description": "SyncStatusCode is a type which represents possible comparison results",
                                                                    "type": "string"
                                                                },
                                                                "version": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "sourceType": {
                                                        "description": "SourceType specifies the type of this application",
                                                        "type": "string"
                                                    },
                                                    "summary": {
                                                        "description": "Summary contains a list of URLs and container images used by this application",
                                                        "properties": {
                                                            "externalURLs": {
                                                                "description": "ExternalURLs holds all external URLs of application child resources.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "images": {
                                                                "description": "Images holds all images of application child resources.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "sync": {
                                                        "description": "Sync contains information about the application's current sync status",
                                                        "properties": {
                                                            "comparedTo": {
                                                                "description": "ComparedTo contains information about what has been compared",
                                                                "properties": {
                                                                    "destination": {
                                                                        "description": "Destination is a reference to the application's destination used for comparison",
                                                                        "properties": {
                                                                            "name": {
                                                                                "description": "Name is an alternate way of specifying the target cluster by its symbolic name",
                                                                                "type": "string"
                                                                            },
                                                                            "namespace": {
                                                                                "description": "Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace",
                                                                                "type": "string"
                                                                            },
                                                                            "server": {
                                                                                "description": "Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "source": {
                                                                        "description": "Source is a reference to the application's source used for comparison",
                                                                        "properties": {
                                                                            "chart": {
                                                                                "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                                                                                "type": "string"
                                                                            },
                                                                            "directory": {
                                                                                "description": "Directory holds path/directory specific options",
                                                                                "properties": {
                                                                                    "exclude": {
                                                                                        "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "include": {
                                                                                        "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "jsonnet": {
                                                                                        "description": "Jsonnet holds options specific to Jsonnet",
                                                                                        "properties": {
                                                                                            "extVars": {
                                                                                                "description": "ExtVars is a list of Jsonnet External Variables",
                                                                                                "items": {
                                                                                                    "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                    "properties": {
                                                                                                        "code": {
                                                                                                            "type": "boolean"
                                                                                                        },
                                                                                                        "name": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "required": [
                                                                                                        "name",
                                                                                                        "value"
                                                                                                    ],
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "libs": {
                                                                                                "description": "Additional library search dirs",
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "type": "array"
                                                                                            },
                                                                                            "tlas": {
                                                                                                "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                                                                                "items": {
                                                                                                    "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                                                                                                    "properties": {
                                                                                                        "code": {
                                                                                                            "type": "boolean"
                                                                                                        },
                                                                                                        "name": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "required": [
                                                                                                        "name",
                                                                                                        "value"
                                                                                                    ],
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "recurse": {
                                                                                        "description": "Recurse specifies whether to scan a directory recursively for manifests",
                                                                                        "type": "boolean"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "helm": {
                                                                                "description": "Helm holds helm specific options",
                                                                                "properties": {
                                                                                    "fileParameters": {
                                                                                        "description": "FileParameters are file parameters to the helm template",
                                                                                        "items": {
                                                                                            "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                                                                                            "properties": {
                                                                                                "name": {
                                                                                                    "description": "Name is the name of the Helm parameter",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "path": {
                                                                                                    "description": "Path is the path to the file containing the values for the Helm parameter",
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "parameters": {
                                                                                        "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                                                                                        "items": {
                                                                                            "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                                                                                            "properties": {
                                                                                                "forceString": {
                                                                                                    "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                                                                                    "type": "boolean"
                                                                                                },
                                                                                                "name": {
                                                                                                    "description": "Name is the name of the Helm parameter",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "description": "Value is the value for the Helm parameter",
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "passCredentials": {
                                                                                        "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "releaseName": {
                                                                                        "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "valueFiles": {
                                                                                        "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "values": {
                                                                                        "description": "Values specifies Helm values to be passed to helm template, typically defined as a block",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "version": {
                                                                                        "description": "Version is the Helm version to use for templating (either \"2\" or \"3\")",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "ksonnet": {
                                                                                "description": "Ksonnet holds ksonnet specific options",
                                                                                "properties": {
                                                                                    "environment": {
                                                                                        "description": "Environment is a ksonnet application environment name",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "parameters": {
                                                                                        "description": "Parameters are a list of ksonnet component parameter override values",
                                                                                        "items": {
                                                                                            "description": "KsonnetParameter is a ksonnet component parameter",
                                                                                            "properties": {
                                                                                                "component": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "name": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "name",
                                                                                                "value"
                                                                                            ],
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "kustomize": {
                                                                                "description": "Kustomize holds kustomize specific options",
                                                                                "properties": {
                                                                                    "commonAnnotations": {
                                                                                        "additionalProperties": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                                                                                        "type": "object"
                                                                                    },
                                                                                    "commonLabels": {
                                                                                        "additionalProperties": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                                                                                        "type": "object"
                                                                                    },
                                                                                    "forceCommonAnnotations": {
                                                                                        "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "forceCommonLabels": {
                                                                                        "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "images": {
                                                                                        "description": "Images is a list of Kustomize image override specifications",
                                                                                        "items": {
                                                                                            "description": "KustomizeImage represents a Kustomize image definition in the format [old_image_name=]\u003cimage_name\u003e:\u003cimage_tag\u003e",
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "namePrefix": {
                                                                                        "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "nameSuffix": {
                                                                                        "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "version": {
                                                                                        "description": "Version controls which version of Kustomize to use for rendering manifests",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "path": {
                                                                                "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                                                                                "type": "string"
                                                                            },
                                                                            "plugin": {
                                                                                "description": "ConfigManagementPlugin holds config management plugin specific options",
                                                                                "properties": {
                                                                                    "env": {
                                                                                        "description": "Env is a list of environment variable entries",
                                                                                        "items": {
                                                                                            "description": "EnvEntry represents an entry in the application's environment",
                                                                                            "properties": {
                                                                                                "name": {
                                                                                                    "description": "Name is the name of the variable, usually expressed in uppercase",
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "value": {
                                                                                                    "description": "Value is the value of the variable",
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "name",
                                                                                                "value"
                                                                                            ],
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "repoURL": {
                                                                                "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                                                                                "type": "string"
                                                                            },
                                                                            "targetRevision": {
                                                                                "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "repoURL"
                                                                        ],
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "destination",
                                                                    "source"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "revision": {
                                                                "description": "Revision contains information about the revision the comparison has been performed to",
                                                                "type": "string"
                                                            },
                                                            "status": {
                                                                "description": "Status is the sync state of the comparison",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "status"
                                                        ],
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {}
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "Application",
                            "listKind": "ApplicationList",
                            "plural": "applications",
                            "shortNames": [
                                "app",
                                "apps"
                            ],
                            "singular": "application"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T00:10:50Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T00:10:50Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1alpha1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::tekton-ingress",
                "custom": false,
                "type": "kubernetes:yaml:ConfigFile",
                "parent": "urn:pulumi:dev::cluster-resources::pulumi:pulumi:Stack::cluster-resources-dev"
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:traefik.containo.us/v1alpha1:IngressRoute::argocd/argocd-server",
                "custom": true,
                "id": "argocd/argocd-server",
                "type": "kubernetes:traefik.containo.us/v1alpha1:IngressRoute",
                "inputs": {
                    "apiVersion": "traefik.containo.us/v1alpha1",
                    "kind": "IngressRoute",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "argocd-server",
                        "namespace": "argocd"
                    },
                    "spec": {
                        "entryPoints": [
                            "web",
                            "websecure"
                        ],
                        "routes": [
                            {
                                "kind": "Rule",
                                "match": "Host(`argocd.fulldeploy.dev`)",
                                "priority": 10,
                                "services": [
                                    {
                                        "name": "argocd-server",
                                        "port": 80
                                    }
                                ]
                            },
                            {
                                "kind": "Rule",
                                "match": "Host(`argocd.fulldeploy.dev`) \u0026\u0026 Headers(`Content-Type`, `application/grpc`)",
                                "priority": 11,
                                "services": [
                                    {
                                        "name": "argocd-server",
                                        "port": 80,
                                        "scheme": "h2c"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "traefik.containo.us/v1alpha1",
                    "__inputs": {
                        "apiVersion": "traefik.containo.us/v1alpha1",
                        "kind": "IngressRoute",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "argocd-server",
                            "namespace": "argocd"
                        },
                        "spec": {
                            "entryPoints": [
                                "web",
                                "websecure"
                            ],
                            "routes": [
                                {
                                    "kind": "Rule",
                                    "match": "Host(`argocd.fulldeploy.dev`)",
                                    "priority": 10,
                                    "services": [
                                        {
                                            "name": "argocd-server",
                                            "port": 80
                                        }
                                    ]
                                },
                                {
                                    "kind": "Rule",
                                    "match": "Host(`argocd.fulldeploy.dev`) \u0026\u0026 Headers(`Content-Type`, `application/grpc`)",
                                    "priority": 11,
                                    "services": [
                                        {
                                            "name": "argocd-server",
                                            "port": 80,
                                            "scheme": "h2c"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    "apiVersion": "traefik.containo.us/v1alpha1",
                    "kind": "IngressRoute",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"traefik.containo.us/v1alpha1\",\"kind\":\"IngressRoute\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"argocd-server\",\"namespace\":\"argocd\"},\"spec\":{\"entryPoints\":[\"web\",\"websecure\"],\"routes\":[{\"kind\":\"Rule\",\"match\":\"Host(`argocd.fulldeploy.dev`)\",\"priority\":10,\"services\":[{\"name\":\"argocd-server\",\"port\":80}]},{\"kind\":\"Rule\",\"match\":\"Host(`argocd.fulldeploy.dev`) \\u0026\\u0026 Headers(`Content-Type`, `application/grpc`)\",\"priority\":11,\"services\":[{\"name\":\"argocd-server\",\"port\":80,\"scheme\":\"h2c\"}]}]}}\n"
                        },
                        "creationTimestamp": "2021-12-31T19:55:00Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "traefik.containo.us/v1alpha1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        ".": {},
                                        "f:entryPoints": {},
                                        "f:routes": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:55:00Z"
                            }
                        ],
                        "name": "argocd-server",
                        "namespace": "argocd",
                        "resourceVersion": "8923181",
                        "uid": "4d282673-bc05-45b7-b8b7-27880a22afa5"
                    },
                    "spec": {
                        "entryPoints": [
                            "web",
                            "websecure"
                        ],
                        "routes": [
                            {
                                "kind": "Rule",
                                "match": "Host(`argocd.fulldeploy.dev`)",
                                "priority": 10,
                                "services": [
                                    {
                                        "name": "argocd-server",
                                        "port": 80
                                    }
                                ]
                            },
                            {
                                "kind": "Rule",
                                "match": "Host(`argocd.fulldeploy.dev`) \u0026\u0026 Headers(`Content-Type`, `application/grpc`)",
                                "priority": 11,
                                "services": [
                                    {
                                        "name": "argocd-server",
                                        "port": 80,
                                        "scheme": "h2c"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::argocd-ingress",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:Role::tekton-pipelines/tekton-triggers-admin",
                "custom": true,
                "id": "tekton-pipelines/tekton-triggers-admin",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:Role",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-admin",
                        "namespace": "tekton-pipelines"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "policy"
                            ],
                            "resourceNames": [
                                "tekton-triggers"
                            ],
                            "resources": [
                                "podsecuritypolicies"
                            ],
                            "verbs": [
                                "use"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "Role",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-admin",
                            "namespace": "tekton-pipelines"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "policy"
                                ],
                                "resourceNames": [
                                    "tekton-triggers"
                                ],
                                "resources": [
                                    "podsecuritypolicies"
                                ],
                                "verbs": [
                                    "use"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"Role\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-admin\",\"namespace\":\"tekton-pipelines\"},\"rules\":[{\"apiGroups\":[\"policy\"],\"resourceNames\":[\"tekton-triggers\"],\"resources\":[\"podsecuritypolicies\"],\"verbs\":[\"use\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:03Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:03Z"
                            }
                        ],
                        "name": "tekton-triggers-admin",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125878",
                        "uid": "780944c6-548c-424c-b3da-c053452f25b0"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "policy"
                            ],
                            "resourceNames": [
                                "tekton-triggers"
                            ],
                            "resources": [
                                "podsecuritypolicies"
                            ],
                            "verbs": [
                                "use"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ConfigMap::tekton-pipelines/config-logging",
                "custom": true,
                "id": "tekton-pipelines/config-logging",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "loglevel.controller": "info",
                        "loglevel.webhook": "info",
                        "zap-logger-config": "{\n  \"level\": \"info\",\n  \"development\": false,\n  \"sampling\": {\n    \"initial\": 100,\n    \"thereafter\": 100\n  },\n  \"outputPaths\": [\"stdout\"],\n  \"errorOutputPaths\": [\"stderr\"],\n  \"encoding\": \"json\",\n  \"encoderConfig\": {\n    \"timeKey\": \"ts\",\n    \"levelKey\": \"level\",\n    \"nameKey\": \"logger\",\n    \"callerKey\": \"caller\",\n    \"messageKey\": \"msg\",\n    \"stacktraceKey\": \"stacktrace\",\n    \"lineEnding\": \"\",\n    \"levelEncoder\": \"\",\n    \"timeEncoder\": \"iso8601\",\n    \"durationEncoder\": \"\",\n    \"callerEncoder\": \"\"\n  }\n}\n"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "config-logging",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "loglevel.controller": "info",
                            "loglevel.webhook": "info",
                            "zap-logger-config": "{\n  \"level\": \"info\",\n  \"development\": false,\n  \"sampling\": {\n    \"initial\": 100,\n    \"thereafter\": 100\n  },\n  \"outputPaths\": [\"stdout\"],\n  \"errorOutputPaths\": [\"stderr\"],\n  \"encoding\": \"json\",\n  \"encoderConfig\": {\n    \"timeKey\": \"ts\",\n    \"levelKey\": \"level\",\n    \"nameKey\": \"logger\",\n    \"callerKey\": \"caller\",\n    \"messageKey\": \"msg\",\n    \"stacktraceKey\": \"stacktrace\",\n    \"lineEnding\": \"\",\n    \"levelEncoder\": \"\",\n    \"timeEncoder\": \"iso8601\",\n    \"durationEncoder\": \"\",\n    \"callerEncoder\": \"\"\n  }\n}\n"
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "config-logging",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "loglevel.controller": "info",
                        "loglevel.webhook": "info",
                        "zap-logger-config": "{\n  \"level\": \"info\",\n  \"development\": false,\n  \"sampling\": {\n    \"initial\": 100,\n    \"thereafter\": 100\n  },\n  \"outputPaths\": [\"stdout\"],\n  \"errorOutputPaths\": [\"stderr\"],\n  \"encoding\": \"json\",\n  \"encoderConfig\": {\n    \"timeKey\": \"ts\",\n    \"levelKey\": \"level\",\n    \"nameKey\": \"logger\",\n    \"callerKey\": \"caller\",\n    \"messageKey\": \"msg\",\n    \"stacktraceKey\": \"stacktrace\",\n    \"lineEnding\": \"\",\n    \"levelEncoder\": \"\",\n    \"timeEncoder\": \"iso8601\",\n    \"durationEncoder\": \"\",\n    \"callerEncoder\": \"\"\n  }\n}\n"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"loglevel.controller\":\"info\",\"loglevel.webhook\":\"info\",\"zap-logger-config\":\"{\\n  \\\"level\\\": \\\"info\\\",\\n  \\\"development\\\": false,\\n  \\\"sampling\\\": {\\n    \\\"initial\\\": 100,\\n    \\\"thereafter\\\": 100\\n  },\\n  \\\"outputPaths\\\": [\\\"stdout\\\"],\\n  \\\"errorOutputPaths\\\": [\\\"stderr\\\"],\\n  \\\"encoding\\\": \\\"json\\\",\\n  \\\"encoderConfig\\\": {\\n    \\\"timeKey\\\": \\\"ts\\\",\\n    \\\"levelKey\\\": \\\"level\\\",\\n    \\\"nameKey\\\": \\\"logger\\\",\\n    \\\"callerKey\\\": \\\"caller\\\",\\n    \\\"messageKey\\\": \\\"msg\\\",\\n    \\\"stacktraceKey\\\": \\\"stacktrace\\\",\\n    \\\"lineEnding\\\": \\\"\\\",\\n    \\\"levelEncoder\\\": \\\"\\\",\\n    \\\"timeEncoder\\\": \\\"iso8601\\\",\\n    \\\"durationEncoder\\\": \\\"\\\",\\n    \\\"callerEncoder\\\": \\\"\\\"\\n  }\\n}\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"config-logging\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:10Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:data": {
                                        ".": {},
                                        "f:loglevel.controller": {},
                                        "f:loglevel.webhook": {},
                                        "f:zap-logger-config": {}
                                    },
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:10Z"
                            }
                        ],
                        "name": "config-logging",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125922",
                        "uid": "f0ae6cec-eb8f-4e5d-8fc9-0beeb4bf62b5"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "data": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::tekton-triggers-eventlistener-clusterroles",
                "custom": true,
                "id": "tekton-triggers-eventlistener-clusterroles",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-eventlistener-clusterroles"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "clustertriggerbindings",
                                "clusterinterceptors"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-eventlistener-clusterroles"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "triggers.tekton.dev"
                                ],
                                "resources": [
                                    "clustertriggerbindings",
                                    "clusterinterceptors"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-eventlistener-clusterroles\"},\"rules\":[{\"apiGroups\":[\"triggers.tekton.dev\"],\"resources\":[\"clustertriggerbindings\",\"clusterinterceptors\"],\"verbs\":[\"get\",\"list\",\"watch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:01Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:01Z"
                            }
                        ],
                        "name": "tekton-triggers-eventlistener-clusterroles",
                        "resourceVersion": "125855",
                        "uid": "e2553914-379c-40b2-bf03-fca9585af7ee"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "clustertriggerbindings",
                                "clusterinterceptors"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:Role::tekton-pipelines/tekton-triggers-admin-webhook",
                "custom": true,
                "id": "tekton-pipelines/tekton-triggers-admin-webhook",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:Role",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-admin-webhook",
                        "namespace": "tekton-pipelines"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "policy"
                            ],
                            "resourceNames": [
                                "tekton-triggers"
                            ],
                            "resources": [
                                "podsecuritypolicies"
                            ],
                            "verbs": [
                                "use"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "Role",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-admin-webhook",
                            "namespace": "tekton-pipelines"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "policy"
                                ],
                                "resourceNames": [
                                    "tekton-triggers"
                                ],
                                "resources": [
                                    "podsecuritypolicies"
                                ],
                                "verbs": [
                                    "use"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "secrets"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "create",
                                    "update",
                                    "delete",
                                    "patch",
                                    "watch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"Role\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-admin-webhook\",\"namespace\":\"tekton-pipelines\"},\"rules\":[{\"apiGroups\":[\"policy\"],\"resourceNames\":[\"tekton-triggers\"],\"resources\":[\"podsecuritypolicies\"],\"verbs\":[\"use\"]},{\"apiGroups\":[\"\"],\"resources\":[\"secrets\"],\"verbs\":[\"get\",\"list\",\"create\",\"update\",\"delete\",\"patch\",\"watch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:04Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:04Z"
                            }
                        ],
                        "name": "tekton-triggers-admin-webhook",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125885",
                        "uid": "1dbd7f35-5c48-4216-ac14-795d993d90d7"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "policy"
                            ],
                            "resourceNames": [
                                "tekton-triggers"
                            ],
                            "resources": [
                                "podsecuritypolicies"
                            ],
                            "verbs": [
                                "use"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::tekton-aggregate-view",
                "custom": true,
                "id": "tekton-aggregate-view",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "rbac.authorization.k8s.io/aggregate-to-view": "true"
                        },
                        "name": "tekton-aggregate-view"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "tasks",
                                "taskruns",
                                "pipelines",
                                "pipelineruns",
                                "pipelineresources",
                                "conditions"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "rbac.authorization.k8s.io/aggregate-to-view": "true"
                            },
                            "name": "tekton-aggregate-view"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "tekton.dev"
                                ],
                                "resources": [
                                    "tasks",
                                    "taskruns",
                                    "pipelines",
                                    "pipelineruns",
                                    "pipelineresources",
                                    "conditions"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"rbac.authorization.k8s.io/aggregate-to-view\":\"true\"},\"name\":\"tekton-aggregate-view\"},\"rules\":[{\"apiGroups\":[\"tekton.dev\"],\"resources\":[\"tasks\",\"taskruns\",\"pipelines\",\"pipelineruns\",\"pipelineresources\",\"conditions\"],\"verbs\":[\"get\",\"list\",\"watch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:43Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "rbac.authorization.k8s.io/aggregate-to-view": "true"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:rbac.authorization.k8s.io/aggregate-to-view": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:43Z"
                            }
                        ],
                        "name": "tekton-aggregate-view",
                        "resourceVersion": "126053",
                        "uid": "52ee2053-c6ec-4d5a-ad60-f6e678e2f6e0"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "tasks",
                                "taskruns",
                                "pipelines",
                                "pipelineruns",
                                "pipelineresources",
                                "conditions"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ConfigMap::tekton-pipelines/config-leader-election",
                "custom": true,
                "id": "tekton-pipelines/config-leader-election",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "leaseDuration": "15s",
                        "renewDeadline": "10s",
                        "retryPeriod": "2s"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "config-leader-election",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "leaseDuration": "15s",
                            "renewDeadline": "10s",
                            "retryPeriod": "2s"
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "config-leader-election",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "leaseDuration": "15s",
                        "renewDeadline": "10s",
                        "retryPeriod": "2s"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"leaseDuration\":\"15s\",\"renewDeadline\":\"10s\",\"retryPeriod\":\"2s\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"config-leader-election\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:10Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:data": {
                                        ".": {},
                                        "f:leaseDuration": {},
                                        "f:renewDeadline": {},
                                        "f:retryPeriod": {}
                                    },
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:10Z"
                            }
                        ],
                        "name": "config-leader-election",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125919",
                        "uid": "a7916f92-2e26-48cd-a8b0-8d60c1537149"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "data": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::tasks.tekton.dev",
                "custom": true,
                "id": "tasks.tekton.dev",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "name": "tasks.tekton.dev"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "Webhook",
                            "webhook": {
                                "clientConfig": {
                                    "service": {
                                        "name": "tekton-pipelines-webhook",
                                        "namespace": "tekton-pipelines"
                                    }
                                },
                                "conversionReviewVersions": [
                                    "v1beta1"
                                ]
                            }
                        },
                        "group": "tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "Task",
                            "plural": "tasks"
                        },
                        "preserveUnknownFields": false,
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "pipeline.tekton.dev/release": "v0.31.0",
                                "version": "v0.31.0"
                            },
                            "name": "tasks.tekton.dev"
                        },
                        "spec": {
                            "conversion": {
                                "strategy": "Webhook",
                                "webhook": {
                                    "clientConfig": {
                                        "service": {
                                            "name": "tekton-pipelines-webhook",
                                            "namespace": "tekton-pipelines"
                                        }
                                    },
                                    "conversionReviewVersions": [
                                        "v1beta1"
                                    ]
                                }
                            },
                            "group": "tekton.dev",
                            "names": {
                                "categories": [
                                    "tekton",
                                    "tekton-pipelines"
                                ],
                                "kind": "Task",
                                "plural": "tasks"
                            },
                            "preserveUnknownFields": false,
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": false,
                                    "subresources": {
                                        "status": {}
                                    }
                                },
                                {
                                    "name": "v1beta1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {
                                        "status": {}
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"pipeline.tekton.dev/release\":\"v0.31.0\",\"version\":\"v0.31.0\"},\"name\":\"tasks.tekton.dev\"},\"spec\":{\"conversion\":{\"strategy\":\"Webhook\",\"webhook\":{\"clientConfig\":{\"service\":{\"name\":\"tekton-pipelines-webhook\",\"namespace\":\"tekton-pipelines\"}},\"conversionReviewVersions\":[\"v1beta1\"]}},\"group\":\"tekton.dev\",\"names\":{\"categories\":[\"tekton\",\"tekton-pipelines\"],\"kind\":\"Task\",\"plural\":\"tasks\"},\"preserveUnknownFields\":false,\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":false,\"subresources\":{\"status\":{}}},{\"name\":\"v1beta1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:44Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:44Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:pipeline.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {},
                                            "f:webhook": {
                                                ".": {},
                                                "f:clientConfig": {
                                                    ".": {},
                                                    "f:service": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:namespace": {},
                                                        "f:port": {}
                                                    }
                                                },
                                                "f:conversionReviewVersions": {}
                                            }
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:44Z"
                            }
                        ],
                        "name": "tasks.tekton.dev",
                        "resourceVersion": "126069",
                        "uid": "28defd73-9069-4dfc-9023-06f256666da4"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "Webhook",
                            "webhook": {
                                "clientConfig": {
                                    "service": {
                                        "name": "tekton-pipelines-webhook",
                                        "namespace": "tekton-pipelines",
                                        "port": 443
                                    }
                                },
                                "conversionReviewVersions": [
                                    "v1beta1"
                                ]
                            }
                        },
                        "group": "tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "Task",
                            "listKind": "TaskList",
                            "plural": "tasks",
                            "singular": "task"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "Task",
                            "listKind": "TaskList",
                            "plural": "tasks",
                            "singular": "task"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:45:44Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:45:44Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1beta1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:Role::tekton-pipelines/tekton-triggers-core-interceptors",
                "custom": true,
                "id": "tekton-pipelines/tekton-triggers-core-interceptors",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:Role",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-core-interceptors",
                        "namespace": "tekton-pipelines"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "policy"
                            ],
                            "resourceNames": [
                                "tekton-triggers"
                            ],
                            "resources": [
                                "podsecuritypolicies"
                            ],
                            "verbs": [
                                "use"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "Role",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-core-interceptors",
                            "namespace": "tekton-pipelines"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "policy"
                                ],
                                "resourceNames": [
                                    "tekton-triggers"
                                ],
                                "resources": [
                                    "podsecuritypolicies"
                                ],
                                "verbs": [
                                    "use"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "configmaps"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"Role\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-core-interceptors\",\"namespace\":\"tekton-pipelines\"},\"rules\":[{\"apiGroups\":[\"policy\"],\"resourceNames\":[\"tekton-triggers\"],\"resources\":[\"podsecuritypolicies\"],\"verbs\":[\"use\"]},{\"apiGroups\":[\"\"],\"resources\":[\"configmaps\"],\"verbs\":[\"get\",\"list\",\"watch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:59Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:59Z"
                            }
                        ],
                        "name": "tekton-triggers-core-interceptors",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126189",
                        "uid": "ac4b7356-3030-49fc-bae3-395f6ad653bf"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "policy"
                            ],
                            "resourceNames": [
                                "tekton-triggers"
                            ],
                            "resources": [
                                "podsecuritypolicies"
                            ],
                            "verbs": [
                                "use"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ConfigMap::tekton-pipelines/config-registry-cert",
                "custom": true,
                "id": "tekton-pipelines/config-registry-cert",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "config-registry-cert",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "config-registry-cert",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"config-registry-cert\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:43Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:43Z"
                            }
                        ],
                        "name": "config-registry-cert",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126052",
                        "uid": "089629ca-a70d-486c-a13c-d8acf895265b"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ConfigMap::tekton-pipelines/config-observability",
                "custom": true,
                "id": "tekton-pipelines/config-observability",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "_example": "################################\n#                              #\n#    EXAMPLE CONFIGURATION     #\n#                              #\n################################\n\n# This block is not actually functional configuration,\n# but serves to illustrate the available configuration\n# options and document them in a way that is accessible\n# to users that `kubectl edit` this config map.\n#\n# These sample configuration options may be copied out of\n# this example block and unindented to be in the data block\n# to actually change the configuration.\n\n# metrics.backend-destination field specifies the system metrics destination.\n# It supports either prometheus (the default) or stackdriver.\n# Note: Using Stackdriver will incur additional charges.\nmetrics.backend-destination: prometheus\n\n# metrics.stackdriver-project-id field specifies the Stackdriver project ID. This\n# field is optional. When running on GCE, application default credentials will be\n# used and metrics will be sent to the cluster's project if this field is\n# not provided.\nmetrics.stackdriver-project-id: \"\u003cyour stackdriver project id\u003e\"\n\n# metrics.allow-stackdriver-custom-metrics indicates whether it is allowed\n# to send metrics to Stackdriver using \"global\" resource type and custom\n# metric type. Setting this flag to \"true\" could cause extra Stackdriver\n# charge.  If metrics.backend-destination is not Stackdriver, this is\n# ignored.\nmetrics.allow-stackdriver-custom-metrics: \"false\"\nmetrics.taskrun.level: \"taskrun\"\nmetrics.taskrun.duration-type: \"histogram\"\nmetrics.pipelinerun.level: \"pipelinerun\"\nmetrics.pipelinerun.duration-type: \"histogram\"\n"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "config-observability",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "_example": "################################\n#                              #\n#    EXAMPLE CONFIGURATION     #\n#                              #\n################################\n\n# This block is not actually functional configuration,\n# but serves to illustrate the available configuration\n# options and document them in a way that is accessible\n# to users that `kubectl edit` this config map.\n#\n# These sample configuration options may be copied out of\n# this example block and unindented to be in the data block\n# to actually change the configuration.\n\n# metrics.backend-destination field specifies the system metrics destination.\n# It supports either prometheus (the default) or stackdriver.\n# Note: Using Stackdriver will incur additional charges.\nmetrics.backend-destination: prometheus\n\n# metrics.stackdriver-project-id field specifies the Stackdriver project ID. This\n# field is optional. When running on GCE, application default credentials will be\n# used and metrics will be sent to the cluster's project if this field is\n# not provided.\nmetrics.stackdriver-project-id: \"\u003cyour stackdriver project id\u003e\"\n\n# metrics.allow-stackdriver-custom-metrics indicates whether it is allowed\n# to send metrics to Stackdriver using \"global\" resource type and custom\n# metric type. Setting this flag to \"true\" could cause extra Stackdriver\n# charge.  If metrics.backend-destination is not Stackdriver, this is\n# ignored.\nmetrics.allow-stackdriver-custom-metrics: \"false\"\nmetrics.taskrun.level: \"taskrun\"\nmetrics.taskrun.duration-type: \"histogram\"\nmetrics.pipelinerun.level: \"pipelinerun\"\nmetrics.pipelinerun.duration-type: \"histogram\"\n"
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "config-observability",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "_example": "################################\n#                              #\n#    EXAMPLE CONFIGURATION     #\n#                              #\n################################\n\n# This block is not actually functional configuration,\n# but serves to illustrate the available configuration\n# options and document them in a way that is accessible\n# to users that `kubectl edit` this config map.\n#\n# These sample configuration options may be copied out of\n# this example block and unindented to be in the data block\n# to actually change the configuration.\n\n# metrics.backend-destination field specifies the system metrics destination.\n# It supports either prometheus (the default) or stackdriver.\n# Note: Using Stackdriver will incur additional charges.\nmetrics.backend-destination: prometheus\n\n# metrics.stackdriver-project-id field specifies the Stackdriver project ID. This\n# field is optional. When running on GCE, application default credentials will be\n# used and metrics will be sent to the cluster's project if this field is\n# not provided.\nmetrics.stackdriver-project-id: \"\u003cyour stackdriver project id\u003e\"\n\n# metrics.allow-stackdriver-custom-metrics indicates whether it is allowed\n# to send metrics to Stackdriver using \"global\" resource type and custom\n# metric type. Setting this flag to \"true\" could cause extra Stackdriver\n# charge.  If metrics.backend-destination is not Stackdriver, this is\n# ignored.\nmetrics.allow-stackdriver-custom-metrics: \"false\"\nmetrics.taskrun.level: \"taskrun\"\nmetrics.taskrun.duration-type: \"histogram\"\nmetrics.pipelinerun.level: \"pipelinerun\"\nmetrics.pipelinerun.duration-type: \"histogram\"\n"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"_example\":\"################################\\n#                              #\\n#    EXAMPLE CONFIGURATION     #\\n#                              #\\n################################\\n\\n# This block is not actually functional configuration,\\n# but serves to illustrate the available configuration\\n# options and document them in a way that is accessible\\n# to users that `kubectl edit` this config map.\\n#\\n# These sample configuration options may be copied out of\\n# this example block and unindented to be in the data block\\n# to actually change the configuration.\\n\\n# metrics.backend-destination field specifies the system metrics destination.\\n# It supports either prometheus (the default) or stackdriver.\\n# Note: Using Stackdriver will incur additional charges.\\nmetrics.backend-destination: prometheus\\n\\n# metrics.stackdriver-project-id field specifies the Stackdriver project ID. This\\n# field is optional. When running on GCE, application default credentials will be\\n# used and metrics will be sent to the cluster's project if this field is\\n# not provided.\\nmetrics.stackdriver-project-id: \\\"\\u003cyour stackdriver project id\\u003e\\\"\\n\\n# metrics.allow-stackdriver-custom-metrics indicates whether it is allowed\\n# to send metrics to Stackdriver using \\\"global\\\" resource type and custom\\n# metric type. Setting this flag to \\\"true\\\" could cause extra Stackdriver\\n# charge.  If metrics.backend-destination is not Stackdriver, this is\\n# ignored.\\nmetrics.allow-stackdriver-custom-metrics: \\\"false\\\"\\nmetrics.taskrun.level: \\\"taskrun\\\"\\nmetrics.taskrun.duration-type: \\\"histogram\\\"\\nmetrics.pipelinerun.level: \\\"pipelinerun\\\"\\nmetrics.pipelinerun.duration-type: \\\"histogram\\\"\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"config-observability\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:07Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:data": {
                                        ".": {},
                                        "f:_example": {}
                                    },
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:07Z"
                            }
                        ],
                        "name": "config-observability",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125907",
                        "uid": "8ed5aff6-b995-41df-9251-94a3f5e3c16a"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "data": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:Role::tekton-pipelines/tekton-triggers-info",
                "custom": true,
                "id": "tekton-pipelines/tekton-triggers-info",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:Role",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-info",
                        "namespace": "tekton-pipelines"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "triggers-info"
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "Role",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-info",
                            "namespace": "tekton-pipelines"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resourceNames": [
                                    "triggers-info"
                                ],
                                "resources": [
                                    "configmaps"
                                ],
                                "verbs": [
                                    "get"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"Role\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-info\",\"namespace\":\"tekton-pipelines\"},\"rules\":[{\"apiGroups\":[\"\"],\"resourceNames\":[\"triggers-info\"],\"resources\":[\"configmaps\"],\"verbs\":[\"get\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:41Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:41Z"
                            }
                        ],
                        "name": "tekton-triggers-info",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126032",
                        "uid": "044be651-7850-4dfe-aeae-9c6a00cf35c8"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "triggers-info"
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ServiceAccount::tekton-pipelines/tekton-triggers-webhook",
                "custom": true,
                "id": "tekton-pipelines/tekton-triggers-webhook",
                "type": "kubernetes:core/v1:ServiceAccount",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-webhook",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ServiceAccount",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-webhook",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-webhook\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:43Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:secrets": {
                                        ".": {},
                                        "k:{\"name\":\"tekton-triggers-webhook-token-zrszq\"}": {
                                            ".": {},
                                            "f:name": {}
                                        }
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:43Z"
                            },
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:43Z"
                            }
                        ],
                        "name": "tekton-triggers-webhook",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126051",
                        "uid": "a1c5a48d-33d7-4d6c-a321-83dc5c9f97a0"
                    },
                    "secrets": [
                        {
                            "name": "tekton-triggers-webhook-token-zrszq"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ServiceAccount::tekton-pipelines/tekton-triggers-controller",
                "custom": true,
                "id": "tekton-pipelines/tekton-triggers-controller",
                "type": "kubernetes:core/v1:ServiceAccount",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-controller",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ServiceAccount",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-controller",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-controller\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:20Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:secrets": {
                                        ".": {},
                                        "k:{\"name\":\"tekton-triggers-controller-token-hfgwf\"}": {
                                            ".": {},
                                            "f:name": {}
                                        }
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:20Z"
                            },
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:20Z"
                            }
                        ],
                        "name": "tekton-triggers-controller",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125949",
                        "uid": "7ce936e7-f381-40bb-b0ea-83807fdd591a"
                    },
                    "secrets": [
                        {
                            "name": "tekton-triggers-controller-token-hfgwf"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ConfigMap::tekton-pipelines/config-logging-triggers",
                "custom": true,
                "id": "tekton-pipelines/config-logging-triggers",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "loglevel.controller": "info",
                        "loglevel.eventlistener": "info",
                        "loglevel.webhook": "info",
                        "zap-logger-config": "{\n  \"level\": \"info\",\n  \"development\": false,\n  \"sampling\": {\n    \"initial\": 100,\n    \"thereafter\": 100\n  },\n  \"outputPaths\": [\"stdout\"],\n  \"errorOutputPaths\": [\"stderr\"],\n  \"encoding\": \"json\",\n  \"encoderConfig\": {\n    \"timeKey\": \"ts\",\n    \"levelKey\": \"level\",\n    \"nameKey\": \"logger\",\n    \"callerKey\": \"caller\",\n    \"messageKey\": \"msg\",\n    \"stacktraceKey\": \"stacktrace\",\n    \"lineEnding\": \"\",\n    \"levelEncoder\": \"\",\n    \"timeEncoder\": \"iso8601\",\n    \"durationEncoder\": \"\",\n    \"callerEncoder\": \"\"\n  }\n}\n"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "config-logging-triggers",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "loglevel.controller": "info",
                            "loglevel.eventlistener": "info",
                            "loglevel.webhook": "info",
                            "zap-logger-config": "{\n  \"level\": \"info\",\n  \"development\": false,\n  \"sampling\": {\n    \"initial\": 100,\n    \"thereafter\": 100\n  },\n  \"outputPaths\": [\"stdout\"],\n  \"errorOutputPaths\": [\"stderr\"],\n  \"encoding\": \"json\",\n  \"encoderConfig\": {\n    \"timeKey\": \"ts\",\n    \"levelKey\": \"level\",\n    \"nameKey\": \"logger\",\n    \"callerKey\": \"caller\",\n    \"messageKey\": \"msg\",\n    \"stacktraceKey\": \"stacktrace\",\n    \"lineEnding\": \"\",\n    \"levelEncoder\": \"\",\n    \"timeEncoder\": \"iso8601\",\n    \"durationEncoder\": \"\",\n    \"callerEncoder\": \"\"\n  }\n}\n"
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "config-logging-triggers",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "loglevel.controller": "info",
                        "loglevel.eventlistener": "info",
                        "loglevel.webhook": "info",
                        "zap-logger-config": "{\n  \"level\": \"info\",\n  \"development\": false,\n  \"sampling\": {\n    \"initial\": 100,\n    \"thereafter\": 100\n  },\n  \"outputPaths\": [\"stdout\"],\n  \"errorOutputPaths\": [\"stderr\"],\n  \"encoding\": \"json\",\n  \"encoderConfig\": {\n    \"timeKey\": \"ts\",\n    \"levelKey\": \"level\",\n    \"nameKey\": \"logger\",\n    \"callerKey\": \"caller\",\n    \"messageKey\": \"msg\",\n    \"stacktraceKey\": \"stacktrace\",\n    \"lineEnding\": \"\",\n    \"levelEncoder\": \"\",\n    \"timeEncoder\": \"iso8601\",\n    \"durationEncoder\": \"\",\n    \"callerEncoder\": \"\"\n  }\n}\n"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"loglevel.controller\":\"info\",\"loglevel.eventlistener\":\"info\",\"loglevel.webhook\":\"info\",\"zap-logger-config\":\"{\\n  \\\"level\\\": \\\"info\\\",\\n  \\\"development\\\": false,\\n  \\\"sampling\\\": {\\n    \\\"initial\\\": 100,\\n    \\\"thereafter\\\": 100\\n  },\\n  \\\"outputPaths\\\": [\\\"stdout\\\"],\\n  \\\"errorOutputPaths\\\": [\\\"stderr\\\"],\\n  \\\"encoding\\\": \\\"json\\\",\\n  \\\"encoderConfig\\\": {\\n    \\\"timeKey\\\": \\\"ts\\\",\\n    \\\"levelKey\\\": \\\"level\\\",\\n    \\\"nameKey\\\": \\\"logger\\\",\\n    \\\"callerKey\\\": \\\"caller\\\",\\n    \\\"messageKey\\\": \\\"msg\\\",\\n    \\\"stacktraceKey\\\": \\\"stacktrace\\\",\\n    \\\"lineEnding\\\": \\\"\\\",\\n    \\\"levelEncoder\\\": \\\"\\\",\\n    \\\"timeEncoder\\\": \\\"iso8601\\\",\\n    \\\"durationEncoder\\\": \\\"\\\",\\n    \\\"callerEncoder\\\": \\\"\\\"\\n  }\\n}\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"config-logging-triggers\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:04Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:data": {
                                        ".": {},
                                        "f:loglevel.controller": {},
                                        "f:loglevel.eventlistener": {},
                                        "f:loglevel.webhook": {},
                                        "f:zap-logger-config": {}
                                    },
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:04Z"
                            }
                        ],
                        "name": "config-logging-triggers",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125880",
                        "uid": "a7b834fc-229b-4e2d-8d91-bf9224fa9b3c"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "data": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ServiceAccount::tekton-pipelines/tekton-triggers-core-interceptors",
                "custom": true,
                "id": "tekton-pipelines/tekton-triggers-core-interceptors",
                "type": "kubernetes:core/v1:ServiceAccount",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-core-interceptors",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ServiceAccount",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-core-interceptors",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-core-interceptors\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:46:00Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:secrets": {
                                        ".": {},
                                        "k:{\"name\":\"tekton-triggers-core-interceptors-token-4njsb\"}": {
                                            ".": {},
                                            "f:name": {}
                                        }
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T03:46:00Z"
                            },
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:46:00Z"
                            }
                        ],
                        "name": "tekton-triggers-core-interceptors",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126211",
                        "uid": "631e4a48-537f-4bb9-9b26-67cb8e8adf3d"
                    },
                    "secrets": [
                        {
                            "name": "tekton-triggers-core-interceptors-token-4njsb"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::tekton-triggers-controller-admin",
                "custom": true,
                "id": "tekton-triggers-controller-admin",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-controller-admin"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "tekton-triggers-admin"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-triggers-controller",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-controller-admin"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "tekton-triggers-admin"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "tekton-triggers-controller",
                                "namespace": "tekton-pipelines"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-controller-admin\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"tekton-triggers-admin\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"tekton-triggers-controller\",\"namespace\":\"tekton-pipelines\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:58Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:58Z"
                            }
                        ],
                        "name": "tekton-triggers-controller-admin",
                        "resourceVersion": "126165",
                        "uid": "c470c733-7868-44e8-980b-fd57b2fc7a71"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "tekton-triggers-admin"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-triggers-controller",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::tekton-pipelines-controller-cluster-access",
                "custom": true,
                "id": "tekton-pipelines-controller-cluster-access",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines-controller-cluster-access"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "pods"
                            ],
                            "verbs": [
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "tasks",
                                "clustertasks",
                                "taskruns",
                                "pipelines",
                                "pipelineruns",
                                "pipelineresources",
                                "conditions",
                                "runs"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "taskruns/finalizers",
                                "pipelineruns/finalizers",
                                "runs/finalizers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "tasks/status",
                                "clustertasks/status",
                                "taskruns/status",
                                "pipelines/status",
                                "pipelineruns/status",
                                "pipelineresources/status",
                                "runs/status"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines-controller-cluster-access"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "pods"
                                ],
                                "verbs": [
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "tekton.dev"
                                ],
                                "resources": [
                                    "tasks",
                                    "clustertasks",
                                    "taskruns",
                                    "pipelines",
                                    "pipelineruns",
                                    "pipelineresources",
                                    "conditions",
                                    "runs"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "create",
                                    "update",
                                    "delete",
                                    "patch",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "tekton.dev"
                                ],
                                "resources": [
                                    "taskruns/finalizers",
                                    "pipelineruns/finalizers",
                                    "runs/finalizers"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "create",
                                    "update",
                                    "delete",
                                    "patch",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "tekton.dev"
                                ],
                                "resources": [
                                    "tasks/status",
                                    "clustertasks/status",
                                    "taskruns/status",
                                    "pipelines/status",
                                    "pipelineruns/status",
                                    "pipelineresources/status",
                                    "runs/status"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "create",
                                    "update",
                                    "delete",
                                    "patch",
                                    "watch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines-controller-cluster-access\"},\"rules\":[{\"apiGroups\":[\"\"],\"resources\":[\"pods\"],\"verbs\":[\"list\",\"watch\"]},{\"apiGroups\":[\"tekton.dev\"],\"resources\":[\"tasks\",\"clustertasks\",\"taskruns\",\"pipelines\",\"pipelineruns\",\"pipelineresources\",\"conditions\",\"runs\"],\"verbs\":[\"get\",\"list\",\"create\",\"update\",\"delete\",\"patch\",\"watch\"]},{\"apiGroups\":[\"tekton.dev\"],\"resources\":[\"taskruns/finalizers\",\"pipelineruns/finalizers\",\"runs/finalizers\"],\"verbs\":[\"get\",\"list\",\"create\",\"update\",\"delete\",\"patch\",\"watch\"]},{\"apiGroups\":[\"tekton.dev\"],\"resources\":[\"tasks/status\",\"clustertasks/status\",\"taskruns/status\",\"pipelines/status\",\"pipelineruns/status\",\"pipelineresources/status\",\"runs/status\"],\"verbs\":[\"get\",\"list\",\"create\",\"update\",\"delete\",\"patch\",\"watch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:03Z",
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:03Z"
                            }
                        ],
                        "name": "tekton-pipelines-controller-cluster-access",
                        "resourceVersion": "125877",
                        "uid": "8a89dfe2-dadb-44d9-ae47-b84e39ec24c6"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "pods"
                            ],
                            "verbs": [
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "tasks",
                                "clustertasks",
                                "taskruns",
                                "pipelines",
                                "pipelineruns",
                                "pipelineresources",
                                "conditions",
                                "runs"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "taskruns/finalizers",
                                "pipelineruns/finalizers",
                                "runs/finalizers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "tasks/status",
                                "clustertasks/status",
                                "taskruns/status",
                                "pipelines/status",
                                "pipelineruns/status",
                                "pipelineresources/status",
                                "runs/status"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::tekton-triggers-core-interceptors",
                "custom": true,
                "id": "tekton-triggers-core-interceptors",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-core-interceptors"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "tekton-triggers-core-interceptors"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-triggers-core-interceptors",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-core-interceptors"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "tekton-triggers-core-interceptors"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "tekton-triggers-core-interceptors",
                                "namespace": "tekton-pipelines"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-core-interceptors\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"tekton-triggers-core-interceptors\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"tekton-triggers-core-interceptors\",\"namespace\":\"tekton-pipelines\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:57Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:57Z"
                            }
                        ],
                        "name": "tekton-triggers-core-interceptors",
                        "resourceVersion": "126155",
                        "uid": "a512be7b-837a-4e6c-8c36-0ded9c2c1ee9"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "tekton-triggers-core-interceptors"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-triggers-core-interceptors",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::taskruns.tekton.dev",
                "custom": true,
                "id": "taskruns.tekton.dev",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "name": "taskruns.tekton.dev"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "Webhook",
                            "webhook": {
                                "clientConfig": {
                                    "service": {
                                        "name": "tekton-pipelines-webhook",
                                        "namespace": "tekton-pipelines"
                                    }
                                },
                                "conversionReviewVersions": [
                                    "v1beta1"
                                ]
                            }
                        },
                        "group": "tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "TaskRun",
                            "plural": "taskruns",
                            "shortNames": [
                                "tr",
                                "trs"
                            ]
                        },
                        "preserveUnknownFields": false,
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status",
                                        "name": "Succeeded",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.startTime",
                                        "name": "StartTime",
                                        "type": "date"
                                    },
                                    {
                                        "jsonPath": ".status.completionTime",
                                        "name": "CompletionTime",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status",
                                        "name": "Succeeded",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.startTime",
                                        "name": "StartTime",
                                        "type": "date"
                                    },
                                    {
                                        "jsonPath": ".status.completionTime",
                                        "name": "CompletionTime",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "pipeline.tekton.dev/release": "v0.31.0",
                                "version": "v0.31.0"
                            },
                            "name": "taskruns.tekton.dev"
                        },
                        "spec": {
                            "conversion": {
                                "strategy": "Webhook",
                                "webhook": {
                                    "clientConfig": {
                                        "service": {
                                            "name": "tekton-pipelines-webhook",
                                            "namespace": "tekton-pipelines"
                                        }
                                    },
                                    "conversionReviewVersions": [
                                        "v1beta1"
                                    ]
                                }
                            },
                            "group": "tekton.dev",
                            "names": {
                                "categories": [
                                    "tekton",
                                    "tekton-pipelines"
                                ],
                                "kind": "TaskRun",
                                "plural": "taskruns",
                                "shortNames": [
                                    "tr",
                                    "trs"
                                ]
                            },
                            "preserveUnknownFields": false,
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "additionalPrinterColumns": [
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status",
                                            "name": "Succeeded",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason",
                                            "name": "Reason",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.startTime",
                                            "name": "StartTime",
                                            "type": "date"
                                        },
                                        {
                                            "jsonPath": ".status.completionTime",
                                            "name": "CompletionTime",
                                            "type": "date"
                                        }
                                    ],
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": false,
                                    "subresources": {
                                        "status": {}
                                    }
                                },
                                {
                                    "additionalPrinterColumns": [
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status",
                                            "name": "Succeeded",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason",
                                            "name": "Reason",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.startTime",
                                            "name": "StartTime",
                                            "type": "date"
                                        },
                                        {
                                            "jsonPath": ".status.completionTime",
                                            "name": "CompletionTime",
                                            "type": "date"
                                        }
                                    ],
                                    "name": "v1beta1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {
                                        "status": {}
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"pipeline.tekton.dev/release\":\"v0.31.0\",\"version\":\"v0.31.0\"},\"name\":\"taskruns.tekton.dev\"},\"spec\":{\"conversion\":{\"strategy\":\"Webhook\",\"webhook\":{\"clientConfig\":{\"service\":{\"name\":\"tekton-pipelines-webhook\",\"namespace\":\"tekton-pipelines\"}},\"conversionReviewVersions\":[\"v1beta1\"]}},\"group\":\"tekton.dev\",\"names\":{\"categories\":[\"tekton\",\"tekton-pipelines\"],\"kind\":\"TaskRun\",\"plural\":\"taskruns\",\"shortNames\":[\"tr\",\"trs\"]},\"preserveUnknownFields\":false,\"scope\":\"Namespaced\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.conditions[?(@.type==\\\"Succeeded\\\")].status\",\"name\":\"Succeeded\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Succeeded\\\")].reason\",\"name\":\"Reason\",\"type\":\"string\"},{\"jsonPath\":\".status.startTime\",\"name\":\"StartTime\",\"type\":\"date\"},{\"jsonPath\":\".status.completionTime\",\"name\":\"CompletionTime\",\"type\":\"date\"}],\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":false,\"subresources\":{\"status\":{}}},{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.conditions[?(@.type==\\\"Succeeded\\\")].status\",\"name\":\"Succeeded\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Succeeded\\\")].reason\",\"name\":\"Reason\",\"type\":\"string\"},{\"jsonPath\":\".status.startTime\",\"name\":\"StartTime\",\"type\":\"date\"},{\"jsonPath\":\".status.completionTime\",\"name\":\"CompletionTime\",\"type\":\"date\"}],\"name\":\"v1beta1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:57Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:57Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:pipeline.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {},
                                            "f:webhook": {
                                                ".": {},
                                                "f:clientConfig": {
                                                    ".": {},
                                                    "f:service": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:namespace": {},
                                                        "f:port": {}
                                                    }
                                                },
                                                "f:conversionReviewVersions": {}
                                            }
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:57Z"
                            }
                        ],
                        "name": "taskruns.tekton.dev",
                        "resourceVersion": "126151",
                        "uid": "2e5a3bee-be05-418f-b0af-384a1aef2cab"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "Webhook",
                            "webhook": {
                                "clientConfig": {
                                    "service": {
                                        "name": "tekton-pipelines-webhook",
                                        "namespace": "tekton-pipelines",
                                        "port": 443
                                    }
                                },
                                "conversionReviewVersions": [
                                    "v1beta1"
                                ]
                            }
                        },
                        "group": "tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "TaskRun",
                            "listKind": "TaskRunList",
                            "plural": "taskruns",
                            "shortNames": [
                                "tr",
                                "trs"
                            ],
                            "singular": "taskrun"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status",
                                        "name": "Succeeded",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.startTime",
                                        "name": "StartTime",
                                        "type": "date"
                                    },
                                    {
                                        "jsonPath": ".status.completionTime",
                                        "name": "CompletionTime",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status",
                                        "name": "Succeeded",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.startTime",
                                        "name": "StartTime",
                                        "type": "date"
                                    },
                                    {
                                        "jsonPath": ".status.completionTime",
                                        "name": "CompletionTime",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "TaskRun",
                            "listKind": "TaskRunList",
                            "plural": "taskruns",
                            "shortNames": [
                                "tr",
                                "trs"
                            ],
                            "singular": "taskrun"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:45:57Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:45:57Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1beta1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:Namespace::tekton-pipelines",
                "custom": true,
                "id": "tekton-pipelines",
                "type": "kubernetes:core/v1:Namespace",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Namespace",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Namespace",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Namespace",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:02Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "kubernetes.io/metadata.name": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:kubernetes.io/metadata.name": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:02Z"
                            }
                        ],
                        "name": "tekton-pipelines",
                        "resourceVersion": "125869",
                        "uid": "75fa89e0-66b3-49a4-a2b4-775864b3319d"
                    },
                    "spec": {
                        "finalizers": [
                            "kubernetes"
                        ]
                    },
                    "status": {
                        "phase": "Active"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:Service::tekton-pipelines/tekton-pipelines-controller",
                "custom": true,
                "id": "tekton-pipelines/tekton-pipelines-controller",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app": "tekton-pipelines-controller",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "controller",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "app.kubernetes.io/version": "v0.31.0",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "name": "tekton-pipelines-controller",
                        "namespace": "tekton-pipelines"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "http-metrics",
                                "port": 9090,
                                "protocol": "TCP",
                                "targetPort": 9090
                            },
                            {
                                "name": "http-profiling",
                                "port": 8008,
                                "targetPort": 8008
                            },
                            {
                                "name": "probes",
                                "port": 8080
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/name": "controller",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app": "tekton-pipelines-controller",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "controller",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "app.kubernetes.io/version": "v0.31.0",
                                "pipeline.tekton.dev/release": "v0.31.0",
                                "version": "v0.31.0"
                            },
                            "name": "tekton-pipelines-controller",
                            "namespace": "tekton-pipelines"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "http-metrics",
                                    "port": 9090,
                                    "protocol": "TCP",
                                    "targetPort": 9090
                                },
                                {
                                    "name": "http-profiling",
                                    "port": 8008,
                                    "targetPort": 8008
                                },
                                {
                                    "name": "probes",
                                    "port": 8080
                                }
                            ],
                            "selector": {
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "controller",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            }
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app\":\"tekton-pipelines-controller\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"controller\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"app.kubernetes.io/version\":\"v0.31.0\",\"pipeline.tekton.dev/release\":\"v0.31.0\",\"version\":\"v0.31.0\"},\"name\":\"tekton-pipelines-controller\",\"namespace\":\"tekton-pipelines\"},\"spec\":{\"ports\":[{\"name\":\"http-metrics\",\"port\":9090,\"protocol\":\"TCP\",\"targetPort\":9090},{\"name\":\"http-profiling\",\"port\":8008,\"targetPort\":8008},{\"name\":\"probes\",\"port\":8080}],\"selector\":{\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"controller\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:40Z",
                        "labels": {
                            "app": "tekton-pipelines-controller",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "controller",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "app.kubernetes.io/version": "v0.31.0",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:pipeline.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"port\":8008,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            },
                                            "k:{\"port\":8080,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            },
                                            "k:{\"port\":9090,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            }
                                        },
                                        "f:selector": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        },
                                        "f:sessionAffinity": {},
                                        "f:type": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:40Z"
                            }
                        ],
                        "name": "tekton-pipelines-controller",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126006",
                        "uid": "6fbba092-e3f2-4d75-9665-377410c7e15a"
                    },
                    "spec": {
                        "clusterIP": "10.245.214.9",
                        "clusterIPs": [
                            "10.245.214.9"
                        ],
                        "ipFamilies": [
                            "IPv4"
                        ],
                        "ipFamilyPolicy": "SingleStack",
                        "ports": [
                            {
                                "name": "http-metrics",
                                "port": 9090,
                                "protocol": "TCP",
                                "targetPort": 9090
                            },
                            {
                                "name": "http-profiling",
                                "port": 8008,
                                "protocol": "TCP",
                                "targetPort": 8008
                            },
                            {
                                "name": "probes",
                                "port": 8080,
                                "protocol": "TCP",
                                "targetPort": 8080
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/name": "controller",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::triggerbindings.triggers.tekton.dev",
                "custom": true,
                "id": "triggerbindings.triggers.tekton.dev",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "name": "triggerbindings.triggers.tekton.dev"
                    },
                    "spec": {
                        "group": "triggers.tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "TriggerBinding",
                            "plural": "triggerbindings",
                            "shortNames": [
                                "tb"
                            ],
                            "singular": "triggerbinding"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "triggers.tekton.dev/release": "v0.17.1",
                                "version": "v0.17.1"
                            },
                            "name": "triggerbindings.triggers.tekton.dev"
                        },
                        "spec": {
                            "group": "triggers.tekton.dev",
                            "names": {
                                "categories": [
                                    "tekton",
                                    "tekton-triggers"
                                ],
                                "kind": "TriggerBinding",
                                "plural": "triggerbindings",
                                "shortNames": [
                                    "tb"
                                ],
                                "singular": "triggerbinding"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "name": "v1beta1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {
                                        "status": {}
                                    }
                                },
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": false,
                                    "subresources": {
                                        "status": {}
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"triggers.tekton.dev/release\":\"v0.17.1\",\"version\":\"v0.17.1\"},\"name\":\"triggerbindings.triggers.tekton.dev\"},\"spec\":{\"group\":\"triggers.tekton.dev\",\"names\":{\"categories\":[\"tekton\",\"tekton-triggers\"],\"kind\":\"TriggerBinding\",\"plural\":\"triggerbindings\",\"shortNames\":[\"tb\"],\"singular\":\"triggerbinding\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1beta1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}},{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":false,\"subresources\":{\"status\":{}}}]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:41Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:41Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:triggers.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:41Z"
                            }
                        ],
                        "name": "triggerbindings.triggers.tekton.dev",
                        "resourceVersion": "126038",
                        "uid": "541d3dee-8587-4b72-8dbb-bfd599b5c31b"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "triggers.tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "TriggerBinding",
                            "listKind": "TriggerBindingList",
                            "plural": "triggerbindings",
                            "shortNames": [
                                "tb"
                            ],
                            "singular": "triggerbinding"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "TriggerBinding",
                            "listKind": "TriggerBindingList",
                            "plural": "triggerbindings",
                            "shortNames": [
                                "tb"
                            ],
                            "singular": "triggerbinding"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:45:41Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:45:41Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1beta1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:autoscaling/v2beta1:HorizontalPodAutoscaler::tekton-pipelines/tekton-pipelines-webhook",
                "custom": true,
                "id": "tekton-pipelines/tekton-pipelines-webhook",
                "type": "kubernetes:autoscaling/v2beta1:HorizontalPodAutoscaler",
                "inputs": {
                    "apiVersion": "autoscaling/v2beta1",
                    "kind": "HorizontalPodAutoscaler",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "app.kubernetes.io/version": "v0.31.0",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "name": "tekton-pipelines-webhook",
                        "namespace": "tekton-pipelines"
                    },
                    "spec": {
                        "maxReplicas": 5,
                        "metrics": [
                            {
                                "resource": {
                                    "name": "cpu",
                                    "targetAverageUtilization": 100
                                },
                                "type": "Resource"
                            }
                        ],
                        "minReplicas": 1,
                        "scaleTargetRef": {
                            "apiVersion": "apps/v1",
                            "kind": "Deployment",
                            "name": "tekton-pipelines-webhook"
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "autoscaling/v2beta1",
                    "__inputs": {
                        "apiVersion": "autoscaling/v2beta1",
                        "kind": "HorizontalPodAutoscaler",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "webhook",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "app.kubernetes.io/version": "v0.31.0",
                                "pipeline.tekton.dev/release": "v0.31.0",
                                "version": "v0.31.0"
                            },
                            "name": "tekton-pipelines-webhook",
                            "namespace": "tekton-pipelines"
                        },
                        "spec": {
                            "maxReplicas": 5,
                            "metrics": [
                                {
                                    "resource": {
                                        "name": "cpu",
                                        "targetAverageUtilization": 100
                                    },
                                    "type": "Resource"
                                }
                            ],
                            "minReplicas": 1,
                            "scaleTargetRef": {
                                "apiVersion": "apps/v1",
                                "kind": "Deployment",
                                "name": "tekton-pipelines-webhook"
                            }
                        }
                    },
                    "apiVersion": "autoscaling/v2beta1",
                    "kind": "HorizontalPodAutoscaler",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"autoscaling/v2beta1\",\"kind\":\"HorizontalPodAutoscaler\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"app.kubernetes.io/version\":\"v0.31.0\",\"pipeline.tekton.dev/release\":\"v0.31.0\",\"version\":\"v0.31.0\"},\"name\":\"tekton-pipelines-webhook\",\"namespace\":\"tekton-pipelines\"},\"spec\":{\"maxReplicas\":5,\"metrics\":[{\"resource\":{\"name\":\"cpu\",\"targetAverageUtilization\":100},\"type\":\"Resource\"}],\"minReplicas\":1,\"scaleTargetRef\":{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"name\":\"tekton-pipelines-webhook\"}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:42Z",
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "app.kubernetes.io/version": "v0.31.0",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "autoscaling/v2beta1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:pipeline.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:maxReplicas": {},
                                        "f:metrics": {},
                                        "f:minReplicas": {},
                                        "f:scaleTargetRef": {
                                            "f:apiVersion": {},
                                            "f:kind": {},
                                            "f:name": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:42Z"
                            }
                        ],
                        "name": "tekton-pipelines-webhook",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126042",
                        "uid": "cd834fc1-79ff-4dbd-8b9d-b6b4da2184aa"
                    },
                    "spec": {
                        "maxReplicas": 5,
                        "metrics": [
                            {
                                "resource": {
                                    "name": "cpu",
                                    "targetAverageUtilization": 100
                                },
                                "type": "Resource"
                            }
                        ],
                        "minReplicas": 1,
                        "scaleTargetRef": {
                            "apiVersion": "apps/v1",
                            "kind": "Deployment",
                            "name": "tekton-pipelines-webhook"
                        }
                    },
                    "status": {
                        "currentReplicas": 0,
                        "desiredReplicas": 0
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ConfigMap::tekton-pipelines/config-observability-triggers",
                "custom": true,
                "id": "tekton-pipelines/config-observability-triggers",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "_example": "################################\n#                              #\n#    EXAMPLE CONFIGURATION     #\n#                              #\n################################\n\n# This block is not actually functional configuration,\n# but serves to illustrate the available configuration\n# options and document them in a way that is accessible\n# to users that `kubectl edit` this config map.\n#\n# These sample configuration options may be copied out of\n# this example block and unindented to be in the data block\n# to actually change the configuration.\n\n# metrics.backend-destination field specifies the system metrics destination.\n# It supports either prometheus (the default) or stackdriver.\n# Note: Using stackdriver will incur additional charges\nmetrics.backend-destination: prometheus\n\n# metrics.stackdriver-project-id field specifies the stackdriver project ID. This\n# field is optional. When running on GCE, application default credentials will be\n# used if this field is not provided.\nmetrics.stackdriver-project-id: \"\u003cyour stackdriver project id\u003e\"\n\n# metrics.allow-stackdriver-custom-metrics indicates whether it is allowed to send metrics to\n# Stackdriver using \"global\" resource type and custom metric type if the\n# metrics are not supported by \"knative_revision\" resource type. Setting this\n# flag to \"true\" could cause extra Stackdriver charge.\n# If metrics.backend-destination is not Stackdriver, this is ignored.\nmetrics.allow-stackdriver-custom-metrics: \"false\"\n"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "config-observability-triggers",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "_example": "################################\n#                              #\n#    EXAMPLE CONFIGURATION     #\n#                              #\n################################\n\n# This block is not actually functional configuration,\n# but serves to illustrate the available configuration\n# options and document them in a way that is accessible\n# to users that `kubectl edit` this config map.\n#\n# These sample configuration options may be copied out of\n# this example block and unindented to be in the data block\n# to actually change the configuration.\n\n# metrics.backend-destination field specifies the system metrics destination.\n# It supports either prometheus (the default) or stackdriver.\n# Note: Using stackdriver will incur additional charges\nmetrics.backend-destination: prometheus\n\n# metrics.stackdriver-project-id field specifies the stackdriver project ID. This\n# field is optional. When running on GCE, application default credentials will be\n# used if this field is not provided.\nmetrics.stackdriver-project-id: \"\u003cyour stackdriver project id\u003e\"\n\n# metrics.allow-stackdriver-custom-metrics indicates whether it is allowed to send metrics to\n# Stackdriver using \"global\" resource type and custom metric type if the\n# metrics are not supported by \"knative_revision\" resource type. Setting this\n# flag to \"true\" could cause extra Stackdriver charge.\n# If metrics.backend-destination is not Stackdriver, this is ignored.\nmetrics.allow-stackdriver-custom-metrics: \"false\"\n"
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "config-observability-triggers",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "_example": "################################\n#                              #\n#    EXAMPLE CONFIGURATION     #\n#                              #\n################################\n\n# This block is not actually functional configuration,\n# but serves to illustrate the available configuration\n# options and document them in a way that is accessible\n# to users that `kubectl edit` this config map.\n#\n# These sample configuration options may be copied out of\n# this example block and unindented to be in the data block\n# to actually change the configuration.\n\n# metrics.backend-destination field specifies the system metrics destination.\n# It supports either prometheus (the default) or stackdriver.\n# Note: Using stackdriver will incur additional charges\nmetrics.backend-destination: prometheus\n\n# metrics.stackdriver-project-id field specifies the stackdriver project ID. This\n# field is optional. When running on GCE, application default credentials will be\n# used if this field is not provided.\nmetrics.stackdriver-project-id: \"\u003cyour stackdriver project id\u003e\"\n\n# metrics.allow-stackdriver-custom-metrics indicates whether it is allowed to send metrics to\n# Stackdriver using \"global\" resource type and custom metric type if the\n# metrics are not supported by \"knative_revision\" resource type. Setting this\n# flag to \"true\" could cause extra Stackdriver charge.\n# If metrics.backend-destination is not Stackdriver, this is ignored.\nmetrics.allow-stackdriver-custom-metrics: \"false\"\n"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"_example\":\"################################\\n#                              #\\n#    EXAMPLE CONFIGURATION     #\\n#                              #\\n################################\\n\\n# This block is not actually functional configuration,\\n# but serves to illustrate the available configuration\\n# options and document them in a way that is accessible\\n# to users that `kubectl edit` this config map.\\n#\\n# These sample configuration options may be copied out of\\n# this example block and unindented to be in the data block\\n# to actually change the configuration.\\n\\n# metrics.backend-destination field specifies the system metrics destination.\\n# It supports either prometheus (the default) or stackdriver.\\n# Note: Using stackdriver will incur additional charges\\nmetrics.backend-destination: prometheus\\n\\n# metrics.stackdriver-project-id field specifies the stackdriver project ID. This\\n# field is optional. When running on GCE, application default credentials will be\\n# used if this field is not provided.\\nmetrics.stackdriver-project-id: \\\"\\u003cyour stackdriver project id\\u003e\\\"\\n\\n# metrics.allow-stackdriver-custom-metrics indicates whether it is allowed to send metrics to\\n# Stackdriver using \\\"global\\\" resource type and custom metric type if the\\n# metrics are not supported by \\\"knative_revision\\\" resource type. Setting this\\n# flag to \\\"true\\\" could cause extra Stackdriver charge.\\n# If metrics.backend-destination is not Stackdriver, this is ignored.\\nmetrics.allow-stackdriver-custom-metrics: \\\"false\\\"\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"config-observability-triggers\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:20Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:data": {
                                        ".": {},
                                        "f:_example": {}
                                    },
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:20Z"
                            }
                        ],
                        "name": "config-observability-triggers",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125945",
                        "uid": "87cb0db4-f1b1-4a4f-9d9c-148b5cf297e0"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "data": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ConfigMap::tekton-pipelines/feature-flags-triggers",
                "custom": true,
                "id": "tekton-pipelines/feature-flags-triggers",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "enable-api-fields": "stable",
                        "labels-exclusion-pattern": ""
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "feature-flags-triggers",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "enable-api-fields": "stable",
                            "labels-exclusion-pattern": ""
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "feature-flags-triggers",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "enable-api-fields": "stable",
                        "labels-exclusion-pattern": ""
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"enable-api-fields\":\"stable\",\"labels-exclusion-pattern\":\"\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"feature-flags-triggers\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:02Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:data": {
                                        ".": {},
                                        "f:enable-api-fields": {},
                                        "f:labels-exclusion-pattern": {}
                                    },
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:02Z"
                            }
                        ],
                        "name": "feature-flags-triggers",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125875",
                        "uid": "365e89f6-cdb8-48ab-96c1-acee874322e0"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "data": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:admissionregistration.k8s.io/v1:MutatingWebhookConfiguration::webhook.triggers.tekton.dev",
                "custom": true,
                "id": "webhook.triggers.tekton.dev",
                "type": "kubernetes:admissionregistration.k8s.io/v1:MutatingWebhookConfiguration",
                "inputs": {
                    "apiVersion": "admissionregistration.k8s.io/v1",
                    "kind": "MutatingWebhookConfiguration",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1"
                        },
                        "name": "webhook.triggers.tekton.dev"
                    },
                    "webhooks": [
                        {
                            "admissionReviewVersions": [
                                "v1beta1",
                                "v1"
                            ],
                            "clientConfig": {
                                "service": {
                                    "name": "tekton-triggers-webhook",
                                    "namespace": "tekton-pipelines"
                                }
                            },
                            "failurePolicy": "Fail",
                            "name": "webhook.triggers.tekton.dev",
                            "sideEffects": "None"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "admissionregistration.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "admissionregistration.k8s.io/v1",
                        "kind": "MutatingWebhookConfiguration",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "triggers.tekton.dev/release": "v0.17.1"
                            },
                            "name": "webhook.triggers.tekton.dev"
                        },
                        "webhooks": [
                            {
                                "admissionReviewVersions": [
                                    "v1beta1",
                                    "v1"
                                ],
                                "clientConfig": {
                                    "service": {
                                        "name": "tekton-triggers-webhook",
                                        "namespace": "tekton-pipelines"
                                    }
                                },
                                "failurePolicy": "Fail",
                                "name": "webhook.triggers.tekton.dev",
                                "sideEffects": "None"
                            }
                        ]
                    },
                    "apiVersion": "admissionregistration.k8s.io/v1",
                    "kind": "MutatingWebhookConfiguration",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"admissionregistration.k8s.io/v1\",\"kind\":\"MutatingWebhookConfiguration\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"triggers.tekton.dev/release\":\"v0.17.1\"},\"name\":\"webhook.triggers.tekton.dev\"},\"webhooks\":[{\"admissionReviewVersions\":[\"v1beta1\",\"v1\"],\"clientConfig\":{\"service\":{\"name\":\"tekton-triggers-webhook\",\"namespace\":\"tekton-pipelines\"}},\"failurePolicy\":\"Fail\",\"name\":\"webhook.triggers.tekton.dev\",\"sideEffects\":\"None\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:42Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "admissionregistration.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:triggers.tekton.dev/release": {}
                                        }
                                    },
                                    "f:webhooks": {
                                        ".": {},
                                        "k:{\"name\":\"webhook.triggers.tekton.dev\"}": {
                                            ".": {},
                                            "f:admissionReviewVersions": {},
                                            "f:clientConfig": {
                                                ".": {},
                                                "f:service": {
                                                    ".": {},
                                                    "f:name": {},
                                                    "f:namespace": {},
                                                    "f:port": {}
                                                }
                                            },
                                            "f:failurePolicy": {},
                                            "f:matchPolicy": {},
                                            "f:name": {},
                                            "f:namespaceSelector": {},
                                            "f:objectSelector": {},
                                            "f:reinvocationPolicy": {},
                                            "f:sideEffects": {},
                                            "f:timeoutSeconds": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:42Z"
                            }
                        ],
                        "name": "webhook.triggers.tekton.dev",
                        "resourceVersion": "126047",
                        "uid": "c2cd7fef-06a2-4e22-841f-89d12185653d"
                    },
                    "webhooks": [
                        {
                            "admissionReviewVersions": [
                                "v1beta1",
                                "v1"
                            ],
                            "clientConfig": {
                                "service": {
                                    "name": "tekton-triggers-webhook",
                                    "namespace": "tekton-pipelines",
                                    "port": 443
                                }
                            },
                            "failurePolicy": "Fail",
                            "matchPolicy": "Equivalent",
                            "name": "webhook.triggers.tekton.dev",
                            "namespaceSelector": {},
                            "objectSelector": {},
                            "reinvocationPolicy": "Never",
                            "sideEffects": "None",
                            "timeoutSeconds": 10
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "webhooks": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:Role::tekton-pipelines/tekton-pipelines-info",
                "custom": true,
                "id": "tekton-pipelines/tekton-pipelines-info",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:Role",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines-info",
                        "namespace": "tekton-pipelines"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "pipelines-info"
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "Role",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines-info",
                            "namespace": "tekton-pipelines"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resourceNames": [
                                    "pipelines-info"
                                ],
                                "resources": [
                                    "configmaps"
                                ],
                                "verbs": [
                                    "get"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"Role\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines-info\",\"namespace\":\"tekton-pipelines\"},\"rules\":[{\"apiGroups\":[\"\"],\"resourceNames\":[\"pipelines-info\"],\"resources\":[\"configmaps\"],\"verbs\":[\"get\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:45Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:45Z"
                            }
                        ],
                        "name": "tekton-pipelines-info",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126074",
                        "uid": "8b09e6f3-048a-4a43-84e1-9954c59966b2"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "pipelines-info"
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::triggertemplates.triggers.tekton.dev",
                "custom": true,
                "id": "triggertemplates.triggers.tekton.dev",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "name": "triggertemplates.triggers.tekton.dev"
                    },
                    "spec": {
                        "group": "triggers.tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "TriggerTemplate",
                            "plural": "triggertemplates",
                            "shortNames": [
                                "tt"
                            ],
                            "singular": "triggertemplate"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "triggers.tekton.dev/release": "v0.17.1",
                                "version": "v0.17.1"
                            },
                            "name": "triggertemplates.triggers.tekton.dev"
                        },
                        "spec": {
                            "group": "triggers.tekton.dev",
                            "names": {
                                "categories": [
                                    "tekton",
                                    "tekton-triggers"
                                ],
                                "kind": "TriggerTemplate",
                                "plural": "triggertemplates",
                                "shortNames": [
                                    "tt"
                                ],
                                "singular": "triggertemplate"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "name": "v1beta1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {
                                        "status": {}
                                    }
                                },
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": false,
                                    "subresources": {
                                        "status": {}
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"triggers.tekton.dev/release\":\"v0.17.1\",\"version\":\"v0.17.1\"},\"name\":\"triggertemplates.triggers.tekton.dev\"},\"spec\":{\"group\":\"triggers.tekton.dev\",\"names\":{\"categories\":[\"tekton\",\"tekton-triggers\"],\"kind\":\"TriggerTemplate\",\"plural\":\"triggertemplates\",\"shortNames\":[\"tt\"],\"singular\":\"triggertemplate\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1beta1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}},{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":false,\"subresources\":{\"status\":{}}}]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:20Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:20Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:triggers.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:20Z"
                            }
                        ],
                        "name": "triggertemplates.triggers.tekton.dev",
                        "resourceVersion": "125947",
                        "uid": "0f57a1b9-5d14-42e3-918f-ec27e79fb0a4"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "triggers.tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "TriggerTemplate",
                            "listKind": "TriggerTemplateList",
                            "plural": "triggertemplates",
                            "shortNames": [
                                "tt"
                            ],
                            "singular": "triggertemplate"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "TriggerTemplate",
                            "listKind": "TriggerTemplateList",
                            "plural": "triggertemplates",
                            "shortNames": [
                                "tt"
                            ],
                            "singular": "triggertemplate"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:45:20Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:45:20Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1beta1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::tekton-triggers-aggregate-view",
                "custom": true,
                "id": "tekton-triggers-aggregate-view",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "rbac.authorization.k8s.io/aggregate-to-view": "true"
                        },
                        "name": "tekton-triggers-aggregate-view"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "clustertriggerbindings",
                                "clusterinterceptors",
                                "eventlisteners",
                                "triggers",
                                "triggerbindings",
                                "triggertemplates"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "rbac.authorization.k8s.io/aggregate-to-view": "true"
                            },
                            "name": "tekton-triggers-aggregate-view"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "triggers.tekton.dev"
                                ],
                                "resources": [
                                    "clustertriggerbindings",
                                    "clusterinterceptors",
                                    "eventlisteners",
                                    "triggers",
                                    "triggerbindings",
                                    "triggertemplates"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"rbac.authorization.k8s.io/aggregate-to-view\":\"true\"},\"name\":\"tekton-triggers-aggregate-view\"},\"rules\":[{\"apiGroups\":[\"triggers.tekton.dev\"],\"resources\":[\"clustertriggerbindings\",\"clusterinterceptors\",\"eventlisteners\",\"triggers\",\"triggerbindings\",\"triggertemplates\"],\"verbs\":[\"get\",\"list\",\"watch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:02Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "rbac.authorization.k8s.io/aggregate-to-view": "true"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:rbac.authorization.k8s.io/aggregate-to-view": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:02Z"
                            }
                        ],
                        "name": "tekton-triggers-aggregate-view",
                        "resourceVersion": "125865",
                        "uid": "b4a84735-8468-46b5-a164-d5a56197345e"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "clustertriggerbindings",
                                "clusterinterceptors",
                                "eventlisteners",
                                "triggers",
                                "triggerbindings",
                                "triggertemplates"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:Secret::tekton-pipelines/triggers-webhook-certs",
                "custom": true,
                "id": "tekton-pipelines/triggers-webhook-certs",
                "type": "kubernetes:core/v1:Secret",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Secret",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1"
                        },
                        "name": "triggers-webhook-certs",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Secret",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "triggers.tekton.dev/release": "v0.17.1"
                            },
                            "name": "triggers-webhook-certs",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Secret",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Secret\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"triggers.tekton.dev/release\":\"v0.17.1\"},\"name\":\"triggers-webhook-certs\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:40Z",
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:triggers.tekton.dev/release": {}
                                        }
                                    },
                                    "f:type": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:40Z"
                            }
                        ],
                        "name": "triggers-webhook-certs",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125997",
                        "uid": "b5c8fd8c-f81e-42a0-bc02-887bd1e747f4"
                    },
                    "type": "Opaque"
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::tekton-pipelines-controller-tenant-access",
                "custom": true,
                "id": "tekton-pipelines-controller-tenant-access",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines-controller-tenant-access"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "pods",
                                "pods/log",
                                "events",
                                "persistentvolumeclaims"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps",
                                "limitranges",
                                "secrets",
                                "serviceaccounts"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "apps"
                            ],
                            "resources": [
                                "statefulsets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines-controller-tenant-access"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "pods",
                                    "pods/log",
                                    "events",
                                    "persistentvolumeclaims"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "create",
                                    "update",
                                    "delete",
                                    "patch",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "configmaps",
                                    "limitranges",
                                    "secrets",
                                    "serviceaccounts"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "apps"
                                ],
                                "resources": [
                                    "statefulsets"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "create",
                                    "update",
                                    "delete",
                                    "patch",
                                    "watch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines-controller-tenant-access\"},\"rules\":[{\"apiGroups\":[\"\"],\"resources\":[\"pods\",\"pods/log\",\"events\",\"persistentvolumeclaims\"],\"verbs\":[\"get\",\"list\",\"create\",\"update\",\"delete\",\"patch\",\"watch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"configmaps\",\"limitranges\",\"secrets\",\"serviceaccounts\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"apps\"],\"resources\":[\"statefulsets\"],\"verbs\":[\"get\",\"list\",\"create\",\"update\",\"delete\",\"patch\",\"watch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:06Z",
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:06Z"
                            }
                        ],
                        "name": "tekton-pipelines-controller-tenant-access",
                        "resourceVersion": "125898",
                        "uid": "94c6c51a-961c-4b28-bc44-a1e241495f98"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "pods",
                                "pods/log",
                                "events",
                                "persistentvolumeclaims"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps",
                                "limitranges",
                                "secrets",
                                "serviceaccounts"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "apps"
                            ],
                            "resources": [
                                "statefulsets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:admissionregistration.k8s.io/v1:ValidatingWebhookConfiguration::config.webhook.triggers.tekton.dev",
                "custom": true,
                "id": "config.webhook.triggers.tekton.dev",
                "type": "kubernetes:admissionregistration.k8s.io/v1:ValidatingWebhookConfiguration",
                "inputs": {
                    "apiVersion": "admissionregistration.k8s.io/v1",
                    "kind": "ValidatingWebhookConfiguration",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1"
                        },
                        "name": "config.webhook.triggers.tekton.dev"
                    },
                    "webhooks": [
                        {
                            "admissionReviewVersions": [
                                "v1beta1",
                                "v1"
                            ],
                            "clientConfig": {
                                "service": {
                                    "name": "tekton-triggers-webhook",
                                    "namespace": "tekton-pipelines"
                                }
                            },
                            "failurePolicy": "Fail",
                            "name": "config.webhook.triggers.tekton.dev",
                            "namespaceSelector": {
                                "matchExpressions": [
                                    {
                                        "key": "triggers.tekton.dev/release",
                                        "operator": "Exists"
                                    }
                                ]
                            },
                            "sideEffects": "None"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "admissionregistration.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "admissionregistration.k8s.io/v1",
                        "kind": "ValidatingWebhookConfiguration",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "triggers.tekton.dev/release": "v0.17.1"
                            },
                            "name": "config.webhook.triggers.tekton.dev"
                        },
                        "webhooks": [
                            {
                                "admissionReviewVersions": [
                                    "v1beta1",
                                    "v1"
                                ],
                                "clientConfig": {
                                    "service": {
                                        "name": "tekton-triggers-webhook",
                                        "namespace": "tekton-pipelines"
                                    }
                                },
                                "failurePolicy": "Fail",
                                "name": "config.webhook.triggers.tekton.dev",
                                "namespaceSelector": {
                                    "matchExpressions": [
                                        {
                                            "key": "triggers.tekton.dev/release",
                                            "operator": "Exists"
                                        }
                                    ]
                                },
                                "sideEffects": "None"
                            }
                        ]
                    },
                    "apiVersion": "admissionregistration.k8s.io/v1",
                    "kind": "ValidatingWebhookConfiguration",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"admissionregistration.k8s.io/v1\",\"kind\":\"ValidatingWebhookConfiguration\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"triggers.tekton.dev/release\":\"v0.17.1\"},\"name\":\"config.webhook.triggers.tekton.dev\"},\"webhooks\":[{\"admissionReviewVersions\":[\"v1beta1\",\"v1\"],\"clientConfig\":{\"service\":{\"name\":\"tekton-triggers-webhook\",\"namespace\":\"tekton-pipelines\"}},\"failurePolicy\":\"Fail\",\"name\":\"config.webhook.triggers.tekton.dev\",\"namespaceSelector\":{\"matchExpressions\":[{\"key\":\"triggers.tekton.dev/release\",\"operator\":\"Exists\"}]},\"sideEffects\":\"None\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:45Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "admissionregistration.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:triggers.tekton.dev/release": {}
                                        }
                                    },
                                    "f:webhooks": {
                                        ".": {},
                                        "k:{\"name\":\"config.webhook.triggers.tekton.dev\"}": {
                                            ".": {},
                                            "f:admissionReviewVersions": {},
                                            "f:clientConfig": {
                                                ".": {},
                                                "f:service": {
                                                    ".": {},
                                                    "f:name": {},
                                                    "f:namespace": {},
                                                    "f:port": {}
                                                }
                                            },
                                            "f:failurePolicy": {},
                                            "f:matchPolicy": {},
                                            "f:name": {},
                                            "f:namespaceSelector": {},
                                            "f:objectSelector": {},
                                            "f:sideEffects": {},
                                            "f:timeoutSeconds": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:45Z"
                            }
                        ],
                        "name": "config.webhook.triggers.tekton.dev",
                        "resourceVersion": "126098",
                        "uid": "e417292a-4c37-46af-bebd-aa30bc45ba2e"
                    },
                    "webhooks": [
                        {
                            "admissionReviewVersions": [
                                "v1beta1",
                                "v1"
                            ],
                            "clientConfig": {
                                "service": {
                                    "name": "tekton-triggers-webhook",
                                    "namespace": "tekton-pipelines",
                                    "port": 443
                                }
                            },
                            "failurePolicy": "Fail",
                            "matchPolicy": "Equivalent",
                            "name": "config.webhook.triggers.tekton.dev",
                            "namespaceSelector": {
                                "matchExpressions": [
                                    {
                                        "key": "triggers.tekton.dev/release",
                                        "operator": "Exists"
                                    }
                                ]
                            },
                            "objectSelector": {},
                            "sideEffects": "None",
                            "timeoutSeconds": 10
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "webhooks": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::tekton-pipelines/tekton-triggers-info",
                "custom": true,
                "id": "tekton-pipelines/tekton-triggers-info",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-info",
                        "namespace": "tekton-pipelines"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-triggers-info"
                    },
                    "subjects": [
                        {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Group",
                            "name": "system:authenticated"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-info",
                            "namespace": "tekton-pipelines"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "tekton-triggers-info"
                        },
                        "subjects": [
                            {
                                "apiGroup": "rbac.authorization.k8s.io",
                                "kind": "Group",
                                "name": "system:authenticated"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-info\",\"namespace\":\"tekton-pipelines\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"tekton-triggers-info\"},\"subjects\":[{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Group\",\"name\":\"system:authenticated\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:05Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:05Z"
                            }
                        ],
                        "name": "tekton-triggers-info",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125886",
                        "uid": "577ffc50-9597-4695-b86d-4d5d4eff678e"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-triggers-info"
                    },
                    "subjects": [
                        {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Group",
                            "name": "system:authenticated"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ConfigMap::tekton-pipelines/triggers-info",
                "custom": true,
                "id": "tekton-pipelines/triggers-info",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "version": "v0.17.1"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "triggers-info",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "version": "v0.17.1"
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "triggers-info",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "version": "v0.17.1"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"version\":\"v0.17.1\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"triggers-info\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:05Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:data": {
                                        ".": {},
                                        "f:version": {}
                                    },
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:05Z"
                            }
                        ],
                        "name": "triggers-info",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125887",
                        "uid": "62007058-ae46-4466-a75e-6dd2f0c6b2d9"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "data": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ConfigMap::tekton-pipelines/config-artifact-bucket",
                "custom": true,
                "id": "tekton-pipelines/config-artifact-bucket",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "config-artifact-bucket",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "config-artifact-bucket",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"config-artifact-bucket\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:44Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:44Z"
                            }
                        ],
                        "name": "config-artifact-bucket",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126065",
                        "uid": "3e7a38d7-6578-488c-95a8-849abee52433"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:admissionregistration.k8s.io/v1:MutatingWebhookConfiguration::webhook.pipeline.tekton.dev",
                "custom": true,
                "id": "webhook.pipeline.tekton.dev",
                "type": "kubernetes:admissionregistration.k8s.io/v1:MutatingWebhookConfiguration",
                "inputs": {
                    "apiVersion": "admissionregistration.k8s.io/v1",
                    "kind": "MutatingWebhookConfiguration",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0"
                        },
                        "name": "webhook.pipeline.tekton.dev"
                    },
                    "webhooks": [
                        {
                            "admissionReviewVersions": [
                                "v1"
                            ],
                            "clientConfig": {
                                "service": {
                                    "name": "tekton-pipelines-webhook",
                                    "namespace": "tekton-pipelines"
                                }
                            },
                            "failurePolicy": "Fail",
                            "name": "webhook.pipeline.tekton.dev",
                            "sideEffects": "None"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "admissionregistration.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "admissionregistration.k8s.io/v1",
                        "kind": "MutatingWebhookConfiguration",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "pipeline.tekton.dev/release": "v0.31.0"
                            },
                            "name": "webhook.pipeline.tekton.dev"
                        },
                        "webhooks": [
                            {
                                "admissionReviewVersions": [
                                    "v1"
                                ],
                                "clientConfig": {
                                    "service": {
                                        "name": "tekton-pipelines-webhook",
                                        "namespace": "tekton-pipelines"
                                    }
                                },
                                "failurePolicy": "Fail",
                                "name": "webhook.pipeline.tekton.dev",
                                "sideEffects": "None"
                            }
                        ]
                    },
                    "apiVersion": "admissionregistration.k8s.io/v1",
                    "kind": "MutatingWebhookConfiguration",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"admissionregistration.k8s.io/v1\",\"kind\":\"MutatingWebhookConfiguration\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"pipeline.tekton.dev/release\":\"v0.31.0\"},\"name\":\"webhook.pipeline.tekton.dev\"},\"webhooks\":[{\"admissionReviewVersions\":[\"v1\"],\"clientConfig\":{\"service\":{\"name\":\"tekton-pipelines-webhook\",\"namespace\":\"tekton-pipelines\"}},\"failurePolicy\":\"Fail\",\"name\":\"webhook.pipeline.tekton.dev\",\"sideEffects\":\"None\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:42Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "admissionregistration.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:pipeline.tekton.dev/release": {}
                                        }
                                    },
                                    "f:webhooks": {
                                        ".": {},
                                        "k:{\"name\":\"webhook.pipeline.tekton.dev\"}": {
                                            ".": {},
                                            "f:admissionReviewVersions": {},
                                            "f:clientConfig": {
                                                ".": {},
                                                "f:service": {
                                                    ".": {},
                                                    "f:name": {},
                                                    "f:namespace": {},
                                                    "f:port": {}
                                                }
                                            },
                                            "f:failurePolicy": {},
                                            "f:matchPolicy": {},
                                            "f:name": {},
                                            "f:namespaceSelector": {},
                                            "f:objectSelector": {},
                                            "f:reinvocationPolicy": {},
                                            "f:sideEffects": {},
                                            "f:timeoutSeconds": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:42Z"
                            }
                        ],
                        "name": "webhook.pipeline.tekton.dev",
                        "resourceVersion": "126039",
                        "uid": "271babbb-832a-4cb2-8109-92d497ec6d8c"
                    },
                    "webhooks": [
                        {
                            "admissionReviewVersions": [
                                "v1"
                            ],
                            "clientConfig": {
                                "service": {
                                    "name": "tekton-pipelines-webhook",
                                    "namespace": "tekton-pipelines",
                                    "port": 443
                                }
                            },
                            "failurePolicy": "Fail",
                            "matchPolicy": "Equivalent",
                            "name": "webhook.pipeline.tekton.dev",
                            "namespaceSelector": {},
                            "objectSelector": {},
                            "reinvocationPolicy": "Never",
                            "sideEffects": "None",
                            "timeoutSeconds": 10
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "webhooks": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:Service::tekton-pipelines/tekton-triggers-webhook",
                "custom": true,
                "id": "tekton-pipelines/tekton-triggers-webhook",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app": "tekton-triggers-webhook",
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "app.kubernetes.io/version": "v0.17.1",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "name": "tekton-triggers-webhook",
                        "namespace": "tekton-pipelines"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "https-webhook",
                                "port": 443,
                                "targetPort": 8443
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app": "tekton-triggers-webhook",
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "webhook",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "app.kubernetes.io/version": "v0.17.1",
                                "triggers.tekton.dev/release": "v0.17.1",
                                "version": "v0.17.1"
                            },
                            "name": "tekton-triggers-webhook",
                            "namespace": "tekton-pipelines"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "https-webhook",
                                    "port": 443,
                                    "targetPort": 8443
                                }
                            ],
                            "selector": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "webhook",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            }
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app\":\"tekton-triggers-webhook\",\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"app.kubernetes.io/version\":\"v0.17.1\",\"triggers.tekton.dev/release\":\"v0.17.1\",\"version\":\"v0.17.1\"},\"name\":\"tekton-triggers-webhook\",\"namespace\":\"tekton-pipelines\"},\"spec\":{\"ports\":[{\"name\":\"https-webhook\",\"port\":443,\"targetPort\":8443}],\"selector\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:40Z",
                        "labels": {
                            "app": "tekton-triggers-webhook",
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "app.kubernetes.io/version": "v0.17.1",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:triggers.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"port\":443,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            }
                                        },
                                        "f:selector": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        },
                                        "f:sessionAffinity": {},
                                        "f:type": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:40Z"
                            }
                        ],
                        "name": "tekton-triggers-webhook",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125998",
                        "uid": "252cb729-c26e-45e6-8492-e4607f1fcf24"
                    },
                    "spec": {
                        "clusterIP": "10.245.174.230",
                        "clusterIPs": [
                            "10.245.174.230"
                        ],
                        "ipFamilies": [
                            "IPv4"
                        ],
                        "ipFamilyPolicy": "SingleStack",
                        "ports": [
                            {
                                "name": "https-webhook",
                                "port": 443,
                                "protocol": "TCP",
                                "targetPort": 8443
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ConfigMap::tekton-pipelines/pipelines-info",
                "custom": true,
                "id": "tekton-pipelines/pipelines-info",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "version": "v0.31.0"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "pipelines-info",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "version": "v0.31.0"
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "pipelines-info",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "version": "v0.31.0"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"version\":\"v0.31.0\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"pipelines-info\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:40Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:data": {
                                        ".": {},
                                        "f:version": {}
                                    },
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:40Z"
                            }
                        ],
                        "name": "pipelines-info",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125999",
                        "uid": "475076bf-ebc5-464a-a91c-6fdd9c20821d"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "data": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ConfigMap::tekton-pipelines/config-artifact-pvc",
                "custom": true,
                "id": "tekton-pipelines/config-artifact-pvc",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "config-artifact-pvc",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "config-artifact-pvc",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"config-artifact-pvc\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:57Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:57Z"
                            }
                        ],
                        "name": "config-artifact-pvc",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126154",
                        "uid": "7b0860a9-adfa-4a32-81cb-0ecf646ead66"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apps/v1:Deployment::tekton-pipelines/tekton-pipelines-controller",
                "custom": true,
                "id": "tekton-pipelines/tekton-pipelines-controller",
                "type": "kubernetes:apps/v1:Deployment",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "controller",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "app.kubernetes.io/version": "v0.31.0",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "name": "tekton-pipelines-controller",
                        "namespace": "tekton-pipelines"
                    },
                    "spec": {
                        "replicas": 1,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "controller",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            }
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "tekton-pipelines-controller",
                                    "app.kubernetes.io/component": "controller",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "controller",
                                    "app.kubernetes.io/part-of": "tekton-pipelines",
                                    "app.kubernetes.io/version": "v0.31.0",
                                    "pipeline.tekton.dev/release": "v0.31.0",
                                    "version": "v0.31.0"
                                }
                            },
                            "spec": {
                                "affinity": {
                                    "nodeAffinity": {
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                            "nodeSelectorTerms": [
                                                {
                                                    "matchExpressions": [
                                                        {
                                                            "key": "kubernetes.io/os",
                                                            "operator": "NotIn",
                                                            "values": [
                                                                "windows"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                },
                                "containers": [
                                    {
                                        "args": [
                                            "-kubeconfig-writer-image",
                                            "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/kubeconfigwriter:v0.31.0@sha256:4076b48b126adbf4fe8451d20f95a4c319de84d0837edc123bfa9549e7e5fddb",
                                            "-git-image",
                                            "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.31.0@sha256:86fce1d4245b9d7318e31635e0a310df6a88fe1cfe5d9f37406dde746ac15e1a",
                                            "-entrypoint-image",
                                            "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/entrypoint:v0.31.0@sha256:97139f59df7c6e2b3d22e75191be653f4202143859d3937e2bafa7a8a7a44822",
                                            "-nop-image",
                                            "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/nop:v0.31.0@sha256:8395f5b4591ee7415246510fa80821509758fd85b1222a81137692f0c8dc6dcf",
                                            "-imagedigest-exporter-image",
                                            "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/imagedigestexporter:v0.31.0@sha256:5764119657354b70b4b379eaf0ba49eedaac28af1d9f47d0992767cfac6d0ddc",
                                            "-pr-image",
                                            "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/pullrequest-init:v0.31.0@sha256:f935b604e3fba7cda7808334cbaf86a01c3822e11682ae71a0a6f5a37aa36f0d",
                                            "-gsutil-image",
                                            "gcr.io/google.com/cloudsdktool/cloud-sdk@sha256:27b2c22bf259d9bc1a291e99c63791ba0c27a04d2db0a43241ba0f1f20f4067f",
                                            "-shell-image",
                                            "gcr.io/distroless/base@sha256:cfdc553400d41b47fd231b028403469811fcdbc0e69d66ea8030c5a0b5fbac2b",
                                            "-shell-image-win",
                                            "mcr.microsoft.com/powershell:nanoserver@sha256:b6d5ff841b78bdf2dfed7550000fd4f3437385b8fa686ec0f010be24777654d6"
                                        ],
                                        "env": [
                                            {
                                                "name": "SYSTEM_NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "AWS_ACCESS_KEY_ID",
                                                "value": "foobarbaz"
                                            },
                                            {
                                                "name": "AWS_SECRET_ACCESS_KEY",
                                                "value": "foobarbaz"
                                            },
                                            {
                                                "name": "AWS_DEFAULT_REGION",
                                                "value": "foobarbaz"
                                            },
                                            {
                                                "name": "CONFIG_DEFAULTS_NAME",
                                                "value": "config-defaults"
                                            },
                                            {
                                                "name": "CONFIG_LOGGING_NAME",
                                                "value": "config-logging"
                                            },
                                            {
                                                "name": "CONFIG_OBSERVABILITY_NAME",
                                                "value": "config-observability"
                                            },
                                            {
                                                "name": "CONFIG_ARTIFACT_BUCKET_NAME",
                                                "value": "config-artifact-bucket"
                                            },
                                            {
                                                "name": "CONFIG_ARTIFACT_PVC_NAME",
                                                "value": "config-artifact-pvc"
                                            },
                                            {
                                                "name": "CONFIG_FEATURE_FLAGS_NAME",
                                                "value": "feature-flags"
                                            },
                                            {
                                                "name": "CONFIG_LEADERELECTION_NAME",
                                                "value": "config-leader-election"
                                            },
                                            {
                                                "name": "SSL_CERT_FILE",
                                                "value": "/etc/config-registry-cert/cert"
                                            },
                                            {
                                                "name": "SSL_CERT_DIR",
                                                "value": "/etc/ssl/certs"
                                            },
                                            {
                                                "name": "METRICS_DOMAIN",
                                                "value": "tekton.dev/pipeline"
                                            }
                                        ],
                                        "image": "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/controller:v0.31.0@sha256:b087e73302cf704ad2d0c3cffa926807b45a74bae746fc9a6e657954418d7c39",
                                        "livenessProbe": {
                                            "httpGet": {
                                                "path": "/health",
                                                "port": "probes",
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10,
                                            "timeoutSeconds": 5
                                        },
                                        "name": "tekton-pipelines-controller",
                                        "ports": [
                                            {
                                                "containerPort": 9090,
                                                "name": "metrics"
                                            },
                                            {
                                                "containerPort": 8008,
                                                "name": "profiling"
                                            },
                                            {
                                                "containerPort": 8080,
                                                "name": "probes"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "httpGet": {
                                                "path": "/readiness",
                                                "port": "probes",
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10,
                                            "timeoutSeconds": 5
                                        },
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "capabilities": {
                                                "drop": [
                                                    "all"
                                                ]
                                            },
                                            "runAsGroup": 65532,
                                            "runAsUser": 65532
                                        },
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/etc/config-logging",
                                                "name": "config-logging"
                                            },
                                            {
                                                "mountPath": "/etc/config-registry-cert",
                                                "name": "config-registry-cert"
                                            }
                                        ]
                                    }
                                ],
                                "serviceAccountName": "tekton-pipelines-controller",
                                "volumes": [
                                    {
                                        "configMap": {
                                            "name": "config-logging"
                                        },
                                        "name": "config-logging"
                                    },
                                    {
                                        "configMap": {
                                            "name": "config-registry-cert"
                                        },
                                        "name": "config-registry-cert"
                                    }
                                ]
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "controller",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "app.kubernetes.io/version": "v0.31.0",
                                "pipeline.tekton.dev/release": "v0.31.0",
                                "version": "v0.31.0"
                            },
                            "name": "tekton-pipelines-controller",
                            "namespace": "tekton-pipelines"
                        },
                        "spec": {
                            "replicas": 1,
                            "selector": {
                                "matchLabels": {
                                    "app.kubernetes.io/component": "controller",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "controller",
                                    "app.kubernetes.io/part-of": "tekton-pipelines"
                                }
                            },
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "app": "tekton-pipelines-controller",
                                        "app.kubernetes.io/component": "controller",
                                        "app.kubernetes.io/instance": "default",
                                        "app.kubernetes.io/name": "controller",
                                        "app.kubernetes.io/part-of": "tekton-pipelines",
                                        "app.kubernetes.io/version": "v0.31.0",
                                        "pipeline.tekton.dev/release": "v0.31.0",
                                        "version": "v0.31.0"
                                    }
                                },
                                "spec": {
                                    "affinity": {
                                        "nodeAffinity": {
                                            "requiredDuringSchedulingIgnoredDuringExecution": {
                                                "nodeSelectorTerms": [
                                                    {
                                                        "matchExpressions": [
                                                            {
                                                                "key": "kubernetes.io/os",
                                                                "operator": "NotIn",
                                                                "values": [
                                                                    "windows"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    "containers": [
                                        {
                                            "args": [
                                                "-kubeconfig-writer-image",
                                                "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/kubeconfigwriter:v0.31.0@sha256:4076b48b126adbf4fe8451d20f95a4c319de84d0837edc123bfa9549e7e5fddb",
                                                "-git-image",
                                                "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.31.0@sha256:86fce1d4245b9d7318e31635e0a310df6a88fe1cfe5d9f37406dde746ac15e1a",
                                                "-entrypoint-image",
                                                "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/entrypoint:v0.31.0@sha256:97139f59df7c6e2b3d22e75191be653f4202143859d3937e2bafa7a8a7a44822",
                                                "-nop-image",
                                                "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/nop:v0.31.0@sha256:8395f5b4591ee7415246510fa80821509758fd85b1222a81137692f0c8dc6dcf",
                                                "-imagedigest-exporter-image",
                                                "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/imagedigestexporter:v0.31.0@sha256:5764119657354b70b4b379eaf0ba49eedaac28af1d9f47d0992767cfac6d0ddc",
                                                "-pr-image",
                                                "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/pullrequest-init:v0.31.0@sha256:f935b604e3fba7cda7808334cbaf86a01c3822e11682ae71a0a6f5a37aa36f0d",
                                                "-gsutil-image",
                                                "gcr.io/google.com/cloudsdktool/cloud-sdk@sha256:27b2c22bf259d9bc1a291e99c63791ba0c27a04d2db0a43241ba0f1f20f4067f",
                                                "-shell-image",
                                                "gcr.io/distroless/base@sha256:cfdc553400d41b47fd231b028403469811fcdbc0e69d66ea8030c5a0b5fbac2b",
                                                "-shell-image-win",
                                                "mcr.microsoft.com/powershell:nanoserver@sha256:b6d5ff841b78bdf2dfed7550000fd4f3437385b8fa686ec0f010be24777654d6"
                                            ],
                                            "env": [
                                                {
                                                    "name": "SYSTEM_NAMESPACE",
                                                    "valueFrom": {
                                                        "fieldRef": {
                                                            "fieldPath": "metadata.namespace"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "AWS_ACCESS_KEY_ID",
                                                    "value": "foobarbaz"
                                                },
                                                {
                                                    "name": "AWS_SECRET_ACCESS_KEY",
                                                    "value": "foobarbaz"
                                                },
                                                {
                                                    "name": "AWS_DEFAULT_REGION",
                                                    "value": "foobarbaz"
                                                },
                                                {
                                                    "name": "CONFIG_DEFAULTS_NAME",
                                                    "value": "config-defaults"
                                                },
                                                {
                                                    "name": "CONFIG_LOGGING_NAME",
                                                    "value": "config-logging"
                                                },
                                                {
                                                    "name": "CONFIG_OBSERVABILITY_NAME",
                                                    "value": "config-observability"
                                                },
                                                {
                                                    "name": "CONFIG_ARTIFACT_BUCKET_NAME",
                                                    "value": "config-artifact-bucket"
                                                },
                                                {
                                                    "name": "CONFIG_ARTIFACT_PVC_NAME",
                                                    "value": "config-artifact-pvc"
                                                },
                                                {
                                                    "name": "CONFIG_FEATURE_FLAGS_NAME",
                                                    "value": "feature-flags"
                                                },
                                                {
                                                    "name": "CONFIG_LEADERELECTION_NAME",
                                                    "value": "config-leader-election"
                                                },
                                                {
                                                    "name": "SSL_CERT_FILE",
                                                    "value": "/etc/config-registry-cert/cert"
                                                },
                                                {
                                                    "name": "SSL_CERT_DIR",
                                                    "value": "/etc/ssl/certs"
                                                },
                                                {
                                                    "name": "METRICS_DOMAIN",
                                                    "value": "tekton.dev/pipeline"
                                                }
                                            ],
                                            "image": "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/controller:v0.31.0@sha256:b087e73302cf704ad2d0c3cffa926807b45a74bae746fc9a6e657954418d7c39",
                                            "livenessProbe": {
                                                "httpGet": {
                                                    "path": "/health",
                                                    "port": "probes",
                                                    "scheme": "HTTP"
                                                },
                                                "initialDelaySeconds": 5,
                                                "periodSeconds": 10,
                                                "timeoutSeconds": 5
                                            },
                                            "name": "tekton-pipelines-controller",
                                            "ports": [
                                                {
                                                    "containerPort": 9090,
                                                    "name": "metrics"
                                                },
                                                {
                                                    "containerPort": 8008,
                                                    "name": "profiling"
                                                },
                                                {
                                                    "containerPort": 8080,
                                                    "name": "probes"
                                                }
                                            ],
                                            "readinessProbe": {
                                                "httpGet": {
                                                    "path": "/readiness",
                                                    "port": "probes",
                                                    "scheme": "HTTP"
                                                },
                                                "initialDelaySeconds": 5,
                                                "periodSeconds": 10,
                                                "timeoutSeconds": 5
                                            },
                                            "securityContext": {
                                                "allowPrivilegeEscalation": false,
                                                "capabilities": {
                                                    "drop": [
                                                        "all"
                                                    ]
                                                },
                                                "runAsGroup": 65532,
                                                "runAsUser": 65532
                                            },
                                            "volumeMounts": [
                                                {
                                                    "mountPath": "/etc/config-logging",
                                                    "name": "config-logging"
                                                },
                                                {
                                                    "mountPath": "/etc/config-registry-cert",
                                                    "name": "config-registry-cert"
                                                }
                                            ]
                                        }
                                    ],
                                    "serviceAccountName": "tekton-pipelines-controller",
                                    "volumes": [
                                        {
                                            "configMap": {
                                                "name": "config-logging"
                                            },
                                            "name": "config-logging"
                                        },
                                        {
                                            "configMap": {
                                                "name": "config-registry-cert"
                                            },
                                            "name": "config-registry-cert"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "annotations": {
                            "deployment.kubernetes.io/revision": "1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"controller\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"app.kubernetes.io/version\":\"v0.31.0\",\"pipeline.tekton.dev/release\":\"v0.31.0\",\"version\":\"v0.31.0\"},\"name\":\"tekton-pipelines-controller\",\"namespace\":\"tekton-pipelines\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"controller\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"tekton-pipelines-controller\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"controller\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"app.kubernetes.io/version\":\"v0.31.0\",\"pipeline.tekton.dev/release\":\"v0.31.0\",\"version\":\"v0.31.0\"}},\"spec\":{\"affinity\":{\"nodeAffinity\":{\"requiredDuringSchedulingIgnoredDuringExecution\":{\"nodeSelectorTerms\":[{\"matchExpressions\":[{\"key\":\"kubernetes.io/os\",\"operator\":\"NotIn\",\"values\":[\"windows\"]}]}]}}},\"containers\":[{\"args\":[\"-kubeconfig-writer-image\",\"gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/kubeconfigwriter:v0.31.0@sha256:4076b48b126adbf4fe8451d20f95a4c319de84d0837edc123bfa9549e7e5fddb\",\"-git-image\",\"gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.31.0@sha256:86fce1d4245b9d7318e31635e0a310df6a88fe1cfe5d9f37406dde746ac15e1a\",\"-entrypoint-image\",\"gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/entrypoint:v0.31.0@sha256:97139f59df7c6e2b3d22e75191be653f4202143859d3937e2bafa7a8a7a44822\",\"-nop-image\",\"gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/nop:v0.31.0@sha256:8395f5b4591ee7415246510fa80821509758fd85b1222a81137692f0c8dc6dcf\",\"-imagedigest-exporter-image\",\"gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/imagedigestexporter:v0.31.0@sha256:5764119657354b70b4b379eaf0ba49eedaac28af1d9f47d0992767cfac6d0ddc\",\"-pr-image\",\"gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/pullrequest-init:v0.31.0@sha256:f935b604e3fba7cda7808334cbaf86a01c3822e11682ae71a0a6f5a37aa36f0d\",\"-gsutil-image\",\"gcr.io/google.com/cloudsdktool/cloud-sdk@sha256:27b2c22bf259d9bc1a291e99c63791ba0c27a04d2db0a43241ba0f1f20f4067f\",\"-shell-image\",\"gcr.io/distroless/base@sha256:cfdc553400d41b47fd231b028403469811fcdbc0e69d66ea8030c5a0b5fbac2b\",\"-shell-image-win\",\"mcr.microsoft.com/powershell:nanoserver@sha256:b6d5ff841b78bdf2dfed7550000fd4f3437385b8fa686ec0f010be24777654d6\"],\"env\":[{\"name\":\"SYSTEM_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"AWS_ACCESS_KEY_ID\",\"value\":\"foobarbaz\"},{\"name\":\"AWS_SECRET_ACCESS_KEY\",\"value\":\"foobarbaz\"},{\"name\":\"AWS_DEFAULT_REGION\",\"value\":\"foobarbaz\"},{\"name\":\"CONFIG_DEFAULTS_NAME\",\"value\":\"config-defaults\"},{\"name\":\"CONFIG_LOGGING_NAME\",\"value\":\"config-logging\"},{\"name\":\"CONFIG_OBSERVABILITY_NAME\",\"value\":\"config-observability\"},{\"name\":\"CONFIG_ARTIFACT_BUCKET_NAME\",\"value\":\"config-artifact-bucket\"},{\"name\":\"CONFIG_ARTIFACT_PVC_NAME\",\"value\":\"config-artifact-pvc\"},{\"name\":\"CONFIG_FEATURE_FLAGS_NAME\",\"value\":\"feature-flags\"},{\"name\":\"CONFIG_LEADERELECTION_NAME\",\"value\":\"config-leader-election\"},{\"name\":\"SSL_CERT_FILE\",\"value\":\"/etc/config-registry-cert/cert\"},{\"name\":\"SSL_CERT_DIR\",\"value\":\"/etc/ssl/certs\"},{\"name\":\"METRICS_DOMAIN\",\"value\":\"tekton.dev/pipeline\"}],\"image\":\"gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/controller:v0.31.0@sha256:b087e73302cf704ad2d0c3cffa926807b45a74bae746fc9a6e657954418d7c39\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/health\",\"port\":\"probes\",\"scheme\":\"HTTP\"},\"initialDelaySeconds\":5,\"periodSeconds\":10,\"timeoutSeconds\":5},\"name\":\"tekton-pipelines-controller\",\"ports\":[{\"containerPort\":9090,\"name\":\"metrics\"},{\"containerPort\":8008,\"name\":\"profiling\"},{\"containerPort\":8080,\"name\":\"probes\"}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/readiness\",\"port\":\"probes\",\"scheme\":\"HTTP\"},\"initialDelaySeconds\":5,\"periodSeconds\":10,\"timeoutSeconds\":5},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"all\"]},\"runAsGroup\":65532,\"runAsUser\":65532},\"volumeMounts\":[{\"mountPath\":\"/etc/config-logging\",\"name\":\"config-logging\"},{\"mountPath\":\"/etc/config-registry-cert\",\"name\":\"config-registry-cert\"}]}],\"serviceAccountName\":\"tekton-pipelines-controller\",\"volumes\":[{\"configMap\":{\"name\":\"config-logging\"},\"name\":\"config-logging\"},{\"configMap\":{\"name\":\"config-registry-cert\"},\"name\":\"config-registry-cert\"}]}}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:41Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "controller",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "app.kubernetes.io/version": "v0.31.0",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:pipeline.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:progressDeadlineSeconds": {},
                                        "f:replicas": {},
                                        "f:revisionHistoryLimit": {},
                                        "f:selector": {},
                                        "f:strategy": {
                                            "f:rollingUpdate": {
                                                ".": {},
                                                "f:maxSurge": {},
                                                "f:maxUnavailable": {}
                                            },
                                            "f:type": {}
                                        },
                                        "f:template": {
                                            "f:metadata": {
                                                "f:labels": {
                                                    ".": {},
                                                    "f:app": {},
                                                    "f:app.kubernetes.io/component": {},
                                                    "f:app.kubernetes.io/instance": {},
                                                    "f:app.kubernetes.io/name": {},
                                                    "f:app.kubernetes.io/part-of": {},
                                                    "f:app.kubernetes.io/version": {},
                                                    "f:pipeline.tekton.dev/release": {},
                                                    "f:version": {}
                                                }
                                            },
                                            "f:spec": {
                                                "f:affinity": {
                                                    ".": {},
                                                    "f:nodeAffinity": {
                                                        ".": {},
                                                        "f:requiredDuringSchedulingIgnoredDuringExecution": {
                                                            ".": {},
                                                            "f:nodeSelectorTerms": {}
                                                        }
                                                    }
                                                },
                                                "f:containers": {
                                                    "k:{\"name\":\"tekton-pipelines-controller\"}": {
                                                        ".": {},
                                                        "f:args": {},
                                                        "f:env": {
                                                            ".": {},
                                                            "k:{\"name\":\"AWS_ACCESS_KEY_ID\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"AWS_DEFAULT_REGION\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"AWS_SECRET_ACCESS_KEY\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"CONFIG_ARTIFACT_BUCKET_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"CONFIG_ARTIFACT_PVC_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"CONFIG_DEFAULTS_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"CONFIG_FEATURE_FLAGS_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"CONFIG_LEADERELECTION_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"CONFIG_LOGGING_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"CONFIG_OBSERVABILITY_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"METRICS_DOMAIN\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"SSL_CERT_DIR\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"SSL_CERT_FILE\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"SYSTEM_NAMESPACE\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:fieldRef": {
                                                                        ".": {},
                                                                        "f:apiVersion": {},
                                                                        "f:fieldPath": {}
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "f:image": {},
                                                        "f:imagePullPolicy": {},
                                                        "f:livenessProbe": {
                                                            ".": {},
                                                            "f:failureThreshold": {},
                                                            "f:httpGet": {
                                                                ".": {},
                                                                "f:path": {},
                                                                "f:port": {},
                                                                "f:scheme": {}
                                                            },
                                                            "f:initialDelaySeconds": {},
                                                            "f:periodSeconds": {},
                                                            "f:successThreshold": {},
                                                            "f:timeoutSeconds": {}
                                                        },
                                                        "f:name": {},
                                                        "f:ports": {
                                                            ".": {},
                                                            "k:{\"containerPort\":8008,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:name": {},
                                                                "f:protocol": {}
                                                            },
                                                            "k:{\"containerPort\":8080,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:name": {},
                                                                "f:protocol": {}
                                                            },
                                                            "k:{\"containerPort\":9090,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:name": {},
                                                                "f:protocol": {}
                                                            }
                                                        },
                                                        "f:readinessProbe": {
                                                            ".": {},
                                                            "f:failureThreshold": {},
                                                            "f:httpGet": {
                                                                ".": {},
                                                                "f:path": {},
                                                                "f:port": {},
                                                                "f:scheme": {}
                                                            },
                                                            "f:initialDelaySeconds": {},
                                                            "f:periodSeconds": {},
                                                            "f:successThreshold": {},
                                                            "f:timeoutSeconds": {}
                                                        },
                                                        "f:resources": {},
                                                        "f:securityContext": {
                                                            ".": {},
                                                            "f:allowPrivilegeEscalation": {},
                                                            "f:capabilities": {
                                                                ".": {},
                                                                "f:drop": {}
                                                            },
                                                            "f:runAsGroup": {},
                                                            "f:runAsUser": {}
                                                        },
                                                        "f:terminationMessagePath": {},
                                                        "f:terminationMessagePolicy": {},
                                                        "f:volumeMounts": {
                                                            ".": {},
                                                            "k:{\"mountPath\":\"/etc/config-logging\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            },
                                                            "k:{\"mountPath\":\"/etc/config-registry-cert\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            }
                                                        }
                                                    }
                                                },
                                                "f:dnsPolicy": {},
                                                "f:restartPolicy": {},
                                                "f:schedulerName": {},
                                                "f:securityContext": {},
                                                "f:serviceAccount": {},
                                                "f:serviceAccountName": {},
                                                "f:terminationGracePeriodSeconds": {},
                                                "f:volumes": {
                                                    ".": {},
                                                    "k:{\"name\":\"config-logging\"}": {
                                                        ".": {},
                                                        "f:configMap": {
                                                            ".": {},
                                                            "f:defaultMode": {},
                                                            "f:name": {}
                                                        },
                                                        "f:name": {}
                                                    },
                                                    "k:{\"name\":\"config-registry-cert\"}": {
                                                        ".": {},
                                                        "f:configMap": {
                                                            ".": {},
                                                            "f:defaultMode": {},
                                                            "f:name": {}
                                                        },
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:41Z"
                            },
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            "f:deployment.kubernetes.io/revision": {}
                                        }
                                    },
                                    "f:status": {
                                        "f:availableReplicas": {},
                                        "f:conditions": {
                                            ".": {},
                                            "k:{\"type\":\"Available\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"Progressing\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:observedGeneration": {},
                                        "f:readyReplicas": {},
                                        "f:replicas": {},
                                        "f:updatedReplicas": {}
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T03:46:21Z"
                            }
                        ],
                        "name": "tekton-pipelines-controller",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126526",
                        "uid": "bf3a8916-ffdb-4691-ab83-20a7ef380d87"
                    },
                    "spec": {
                        "progressDeadlineSeconds": 600,
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "controller",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            }
                        },
                        "strategy": {
                            "rollingUpdate": {
                                "maxSurge": "25%",
                                "maxUnavailable": "25%"
                            },
                            "type": "RollingUpdate"
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "tekton-pipelines-controller",
                                    "app.kubernetes.io/component": "controller",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "controller",
                                    "app.kubernetes.io/part-of": "tekton-pipelines",
                                    "app.kubernetes.io/version": "v0.31.0",
                                    "pipeline.tekton.dev/release": "v0.31.0",
                                    "version": "v0.31.0"
                                }
                            },
                            "spec": {
                                "affinity": {
                                    "nodeAffinity": {
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                            "nodeSelectorTerms": [
                                                {
                                                    "matchExpressions": [
                                                        {
                                                            "key": "kubernetes.io/os",
                                                            "operator": "NotIn",
                                                            "values": [
                                                                "windows"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                },
                                "containers": [
                                    {
                                        "args": [
                                            "-kubeconfig-writer-image",
                                            "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/kubeconfigwriter:v0.31.0@sha256:4076b48b126adbf4fe8451d20f95a4c319de84d0837edc123bfa9549e7e5fddb",
                                            "-git-image",
                                            "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.31.0@sha256:86fce1d4245b9d7318e31635e0a310df6a88fe1cfe5d9f37406dde746ac15e1a",
                                            "-entrypoint-image",
                                            "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/entrypoint:v0.31.0@sha256:97139f59df7c6e2b3d22e75191be653f4202143859d3937e2bafa7a8a7a44822",
                                            "-nop-image",
                                            "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/nop:v0.31.0@sha256:8395f5b4591ee7415246510fa80821509758fd85b1222a81137692f0c8dc6dcf",
                                            "-imagedigest-exporter-image",
                                            "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/imagedigestexporter:v0.31.0@sha256:5764119657354b70b4b379eaf0ba49eedaac28af1d9f47d0992767cfac6d0ddc",
                                            "-pr-image",
                                            "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/pullrequest-init:v0.31.0@sha256:f935b604e3fba7cda7808334cbaf86a01c3822e11682ae71a0a6f5a37aa36f0d",
                                            "-gsutil-image",
                                            "gcr.io/google.com/cloudsdktool/cloud-sdk@sha256:27b2c22bf259d9bc1a291e99c63791ba0c27a04d2db0a43241ba0f1f20f4067f",
                                            "-shell-image",
                                            "gcr.io/distroless/base@sha256:cfdc553400d41b47fd231b028403469811fcdbc0e69d66ea8030c5a0b5fbac2b",
                                            "-shell-image-win",
                                            "mcr.microsoft.com/powershell:nanoserver@sha256:b6d5ff841b78bdf2dfed7550000fd4f3437385b8fa686ec0f010be24777654d6"
                                        ],
                                        "env": [
                                            {
                                                "name": "SYSTEM_NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "apiVersion": "v1",
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "AWS_ACCESS_KEY_ID",
                                                "value": "foobarbaz"
                                            },
                                            {
                                                "name": "AWS_SECRET_ACCESS_KEY",
                                                "value": "foobarbaz"
                                            },
                                            {
                                                "name": "AWS_DEFAULT_REGION",
                                                "value": "foobarbaz"
                                            },
                                            {
                                                "name": "CONFIG_DEFAULTS_NAME",
                                                "value": "config-defaults"
                                            },
                                            {
                                                "name": "CONFIG_LOGGING_NAME",
                                                "value": "config-logging"
                                            },
                                            {
                                                "name": "CONFIG_OBSERVABILITY_NAME",
                                                "value": "config-observability"
                                            },
                                            {
                                                "name": "CONFIG_ARTIFACT_BUCKET_NAME",
                                                "value": "config-artifact-bucket"
                                            },
                                            {
                                                "name": "CONFIG_ARTIFACT_PVC_NAME",
                                                "value": "config-artifact-pvc"
                                            },
                                            {
                                                "name": "CONFIG_FEATURE_FLAGS_NAME",
                                                "value": "feature-flags"
                                            },
                                            {
                                                "name": "CONFIG_LEADERELECTION_NAME",
                                                "value": "config-leader-election"
                                            },
                                            {
                                                "name": "SSL_CERT_FILE",
                                                "value": "/etc/config-registry-cert/cert"
                                            },
                                            {
                                                "name": "SSL_CERT_DIR",
                                                "value": "/etc/ssl/certs"
                                            },
                                            {
                                                "name": "METRICS_DOMAIN",
                                                "value": "tekton.dev/pipeline"
                                            }
                                        ],
                                        "image": "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/controller:v0.31.0@sha256:b087e73302cf704ad2d0c3cffa926807b45a74bae746fc9a6e657954418d7c39",
                                        "imagePullPolicy": "IfNotPresent",
                                        "livenessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/health",
                                                "port": "probes",
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 5
                                        },
                                        "name": "tekton-pipelines-controller",
                                        "ports": [
                                            {
                                                "containerPort": 9090,
                                                "name": "metrics",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 8008,
                                                "name": "profiling",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 8080,
                                                "name": "probes",
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/readiness",
                                                "port": "probes",
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 5
                                        },
                                        "resources": {},
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "capabilities": {
                                                "drop": [
                                                    "all"
                                                ]
                                            },
                                            "runAsGroup": 65532,
                                            "runAsUser": 65532
                                        },
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/etc/config-logging",
                                                "name": "config-logging"
                                            },
                                            {
                                                "mountPath": "/etc/config-registry-cert",
                                                "name": "config-registry-cert"
                                            }
                                        ]
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {},
                                "serviceAccount": "tekton-pipelines-controller",
                                "serviceAccountName": "tekton-pipelines-controller",
                                "terminationGracePeriodSeconds": 30,
                                "volumes": [
                                    {
                                        "configMap": {
                                            "defaultMode": 420,
                                            "name": "config-logging"
                                        },
                                        "name": "config-logging"
                                    },
                                    {
                                        "configMap": {
                                            "defaultMode": 420,
                                            "name": "config-registry-cert"
                                        },
                                        "name": "config-registry-cert"
                                    }
                                ]
                            }
                        }
                    },
                    "status": {
                        "availableReplicas": 1,
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:46:21Z",
                                "lastUpdateTime": "2021-12-19T03:46:21Z",
                                "message": "Deployment has minimum availability.",
                                "reason": "MinimumReplicasAvailable",
                                "status": "True",
                                "type": "Available"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:45:41Z",
                                "lastUpdateTime": "2021-12-19T03:46:21Z",
                                "message": "ReplicaSet \"tekton-pipelines-controller-99b764966\" has successfully progressed.",
                                "reason": "NewReplicaSetAvailable",
                                "status": "True",
                                "type": "Progressing"
                            }
                        ],
                        "observedGeneration": 1,
                        "readyReplicas": 1,
                        "replicas": 1,
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:Service::tekton-pipelines/tekton-triggers-controller",
                "custom": true,
                "id": "tekton-pipelines/tekton-triggers-controller",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app": "tekton-triggers-controller",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "controller",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "app.kubernetes.io/version": "v0.17.1",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "name": "tekton-triggers-controller",
                        "namespace": "tekton-pipelines"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "http-metrics",
                                "port": 9000,
                                "protocol": "TCP",
                                "targetPort": 9000
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/name": "controller",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app": "tekton-triggers-controller",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "controller",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "app.kubernetes.io/version": "v0.17.1",
                                "triggers.tekton.dev/release": "v0.17.1",
                                "version": "v0.17.1"
                            },
                            "name": "tekton-triggers-controller",
                            "namespace": "tekton-pipelines"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "http-metrics",
                                    "port": 9000,
                                    "protocol": "TCP",
                                    "targetPort": 9000
                                }
                            ],
                            "selector": {
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "controller",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            }
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app\":\"tekton-triggers-controller\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"controller\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"app.kubernetes.io/version\":\"v0.17.1\",\"triggers.tekton.dev/release\":\"v0.17.1\",\"version\":\"v0.17.1\"},\"name\":\"tekton-triggers-controller\",\"namespace\":\"tekton-pipelines\"},\"spec\":{\"ports\":[{\"name\":\"http-metrics\",\"port\":9000,\"protocol\":\"TCP\",\"targetPort\":9000}],\"selector\":{\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"controller\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:09Z",
                        "labels": {
                            "app": "tekton-triggers-controller",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "controller",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "app.kubernetes.io/version": "v0.17.1",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:triggers.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"port\":9000,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            }
                                        },
                                        "f:selector": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        },
                                        "f:sessionAffinity": {},
                                        "f:type": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:09Z"
                            }
                        ],
                        "name": "tekton-triggers-controller",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125914",
                        "uid": "e07ee8de-631c-4541-ac37-aa084582c81d"
                    },
                    "spec": {
                        "clusterIP": "10.245.96.86",
                        "clusterIPs": [
                            "10.245.96.86"
                        ],
                        "ipFamilies": [
                            "IPv4"
                        ],
                        "ipFamilyPolicy": "SingleStack",
                        "ports": [
                            {
                                "name": "http-metrics",
                                "port": 9000,
                                "protocol": "TCP",
                                "targetPort": 9000
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/name": "controller",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:admissionregistration.k8s.io/v1:ValidatingWebhookConfiguration::validation.webhook.triggers.tekton.dev",
                "custom": true,
                "id": "validation.webhook.triggers.tekton.dev",
                "type": "kubernetes:admissionregistration.k8s.io/v1:ValidatingWebhookConfiguration",
                "inputs": {
                    "apiVersion": "admissionregistration.k8s.io/v1",
                    "kind": "ValidatingWebhookConfiguration",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1"
                        },
                        "name": "validation.webhook.triggers.tekton.dev"
                    },
                    "webhooks": [
                        {
                            "admissionReviewVersions": [
                                "v1beta1",
                                "v1"
                            ],
                            "clientConfig": {
                                "service": {
                                    "name": "tekton-triggers-webhook",
                                    "namespace": "tekton-pipelines"
                                }
                            },
                            "failurePolicy": "Fail",
                            "name": "validation.webhook.triggers.tekton.dev",
                            "sideEffects": "None"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "admissionregistration.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "admissionregistration.k8s.io/v1",
                        "kind": "ValidatingWebhookConfiguration",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "triggers.tekton.dev/release": "v0.17.1"
                            },
                            "name": "validation.webhook.triggers.tekton.dev"
                        },
                        "webhooks": [
                            {
                                "admissionReviewVersions": [
                                    "v1beta1",
                                    "v1"
                                ],
                                "clientConfig": {
                                    "service": {
                                        "name": "tekton-triggers-webhook",
                                        "namespace": "tekton-pipelines"
                                    }
                                },
                                "failurePolicy": "Fail",
                                "name": "validation.webhook.triggers.tekton.dev",
                                "sideEffects": "None"
                            }
                        ]
                    },
                    "apiVersion": "admissionregistration.k8s.io/v1",
                    "kind": "ValidatingWebhookConfiguration",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"admissionregistration.k8s.io/v1\",\"kind\":\"ValidatingWebhookConfiguration\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"triggers.tekton.dev/release\":\"v0.17.1\"},\"name\":\"validation.webhook.triggers.tekton.dev\"},\"webhooks\":[{\"admissionReviewVersions\":[\"v1beta1\",\"v1\"],\"clientConfig\":{\"service\":{\"name\":\"tekton-triggers-webhook\",\"namespace\":\"tekton-pipelines\"}},\"failurePolicy\":\"Fail\",\"name\":\"validation.webhook.triggers.tekton.dev\",\"sideEffects\":\"None\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:41Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "admissionregistration.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:triggers.tekton.dev/release": {}
                                        }
                                    },
                                    "f:webhooks": {
                                        ".": {},
                                        "k:{\"name\":\"validation.webhook.triggers.tekton.dev\"}": {
                                            ".": {},
                                            "f:admissionReviewVersions": {},
                                            "f:clientConfig": {
                                                ".": {},
                                                "f:service": {
                                                    ".": {},
                                                    "f:name": {},
                                                    "f:namespace": {},
                                                    "f:port": {}
                                                }
                                            },
                                            "f:failurePolicy": {},
                                            "f:matchPolicy": {},
                                            "f:name": {},
                                            "f:namespaceSelector": {},
                                            "f:objectSelector": {},
                                            "f:sideEffects": {},
                                            "f:timeoutSeconds": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:41Z"
                            }
                        ],
                        "name": "validation.webhook.triggers.tekton.dev",
                        "resourceVersion": "126034",
                        "uid": "ca042700-af6c-424f-9923-e8b6e278bad5"
                    },
                    "webhooks": [
                        {
                            "admissionReviewVersions": [
                                "v1beta1",
                                "v1"
                            ],
                            "clientConfig": {
                                "service": {
                                    "name": "tekton-triggers-webhook",
                                    "namespace": "tekton-pipelines",
                                    "port": 443
                                }
                            },
                            "failurePolicy": "Fail",
                            "matchPolicy": "Equivalent",
                            "name": "validation.webhook.triggers.tekton.dev",
                            "namespaceSelector": {},
                            "objectSelector": {},
                            "sideEffects": "None",
                            "timeoutSeconds": 10
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "webhooks": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::tekton-pipelines/tekton-triggers-controller-admin",
                "custom": true,
                "id": "tekton-pipelines/tekton-triggers-controller-admin",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-controller-admin",
                        "namespace": "tekton-pipelines"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-triggers-admin"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-triggers-controller",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-controller-admin",
                            "namespace": "tekton-pipelines"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "tekton-triggers-admin"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "tekton-triggers-controller",
                                "namespace": "tekton-pipelines"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-controller-admin\",\"namespace\":\"tekton-pipelines\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"tekton-triggers-admin\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"tekton-triggers-controller\",\"namespace\":\"tekton-pipelines\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:58Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:58Z"
                            }
                        ],
                        "name": "tekton-triggers-controller-admin",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126166",
                        "uid": "bdae9794-3616-4a56-bb26-a4c154fba480"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-triggers-admin"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-triggers-controller",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:admissionregistration.k8s.io/v1:ValidatingWebhookConfiguration::config.webhook.pipeline.tekton.dev",
                "custom": true,
                "id": "config.webhook.pipeline.tekton.dev",
                "type": "kubernetes:admissionregistration.k8s.io/v1:ValidatingWebhookConfiguration",
                "inputs": {
                    "apiVersion": "admissionregistration.k8s.io/v1",
                    "kind": "ValidatingWebhookConfiguration",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0"
                        },
                        "name": "config.webhook.pipeline.tekton.dev"
                    },
                    "webhooks": [
                        {
                            "admissionReviewVersions": [
                                "v1"
                            ],
                            "clientConfig": {
                                "service": {
                                    "name": "tekton-pipelines-webhook",
                                    "namespace": "tekton-pipelines"
                                }
                            },
                            "failurePolicy": "Fail",
                            "name": "config.webhook.pipeline.tekton.dev",
                            "objectSelector": {
                                "matchLabels": {
                                    "app.kubernetes.io/part-of": "tekton-pipelines"
                                }
                            },
                            "sideEffects": "None"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "admissionregistration.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "admissionregistration.k8s.io/v1",
                        "kind": "ValidatingWebhookConfiguration",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "pipeline.tekton.dev/release": "v0.31.0"
                            },
                            "name": "config.webhook.pipeline.tekton.dev"
                        },
                        "webhooks": [
                            {
                                "admissionReviewVersions": [
                                    "v1"
                                ],
                                "clientConfig": {
                                    "service": {
                                        "name": "tekton-pipelines-webhook",
                                        "namespace": "tekton-pipelines"
                                    }
                                },
                                "failurePolicy": "Fail",
                                "name": "config.webhook.pipeline.tekton.dev",
                                "objectSelector": {
                                    "matchLabels": {
                                        "app.kubernetes.io/part-of": "tekton-pipelines"
                                    }
                                },
                                "sideEffects": "None"
                            }
                        ]
                    },
                    "apiVersion": "admissionregistration.k8s.io/v1",
                    "kind": "ValidatingWebhookConfiguration",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"admissionregistration.k8s.io/v1\",\"kind\":\"ValidatingWebhookConfiguration\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"pipeline.tekton.dev/release\":\"v0.31.0\"},\"name\":\"config.webhook.pipeline.tekton.dev\"},\"webhooks\":[{\"admissionReviewVersions\":[\"v1\"],\"clientConfig\":{\"service\":{\"name\":\"tekton-pipelines-webhook\",\"namespace\":\"tekton-pipelines\"}},\"failurePolicy\":\"Fail\",\"name\":\"config.webhook.pipeline.tekton.dev\",\"objectSelector\":{\"matchLabels\":{\"app.kubernetes.io/part-of\":\"tekton-pipelines\"}},\"sideEffects\":\"None\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:40Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "admissionregistration.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:pipeline.tekton.dev/release": {}
                                        }
                                    },
                                    "f:webhooks": {
                                        ".": {},
                                        "k:{\"name\":\"config.webhook.pipeline.tekton.dev\"}": {
                                            ".": {},
                                            "f:admissionReviewVersions": {},
                                            "f:clientConfig": {
                                                ".": {},
                                                "f:service": {
                                                    ".": {},
                                                    "f:name": {},
                                                    "f:namespace": {},
                                                    "f:port": {}
                                                }
                                            },
                                            "f:failurePolicy": {},
                                            "f:matchPolicy": {},
                                            "f:name": {},
                                            "f:namespaceSelector": {},
                                            "f:objectSelector": {},
                                            "f:sideEffects": {},
                                            "f:timeoutSeconds": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:40Z"
                            }
                        ],
                        "name": "config.webhook.pipeline.tekton.dev",
                        "resourceVersion": "126013",
                        "uid": "ab8cea5b-1012-4c1d-b578-2c566a430a9b"
                    },
                    "webhooks": [
                        {
                            "admissionReviewVersions": [
                                "v1"
                            ],
                            "clientConfig": {
                                "service": {
                                    "name": "tekton-pipelines-webhook",
                                    "namespace": "tekton-pipelines",
                                    "port": 443
                                }
                            },
                            "failurePolicy": "Fail",
                            "matchPolicy": "Equivalent",
                            "name": "config.webhook.pipeline.tekton.dev",
                            "namespaceSelector": {},
                            "objectSelector": {
                                "matchLabels": {
                                    "app.kubernetes.io/part-of": "tekton-pipelines"
                                }
                            },
                            "sideEffects": "None",
                            "timeoutSeconds": 10
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "webhooks": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:policy/v1beta1:PodSecurityPolicy::tekton-pipelines",
                "custom": true,
                "id": "tekton-pipelines",
                "type": "kubernetes:policy/v1beta1:PodSecurityPolicy",
                "inputs": {
                    "apiVersion": "policy/v1beta1",
                    "kind": "PodSecurityPolicy",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines"
                    },
                    "spec": {
                        "allowPrivilegeEscalation": false,
                        "fsGroup": {
                            "ranges": [
                                {
                                    "max": 65535,
                                    "min": 1
                                }
                            ],
                            "rule": "MustRunAs"
                        },
                        "hostIPC": false,
                        "hostNetwork": false,
                        "hostPID": false,
                        "privileged": false,
                        "runAsUser": {
                            "rule": "MustRunAsNonRoot"
                        },
                        "seLinux": {
                            "rule": "RunAsAny"
                        },
                        "supplementalGroups": {
                            "ranges": [
                                {
                                    "max": 65535,
                                    "min": 1
                                }
                            ],
                            "rule": "MustRunAs"
                        },
                        "volumes": [
                            "emptyDir",
                            "configMap",
                            "secret"
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "policy/v1beta1",
                    "__inputs": {
                        "apiVersion": "policy/v1beta1",
                        "kind": "PodSecurityPolicy",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines"
                        },
                        "spec": {
                            "allowPrivilegeEscalation": false,
                            "fsGroup": {
                                "ranges": [
                                    {
                                        "max": 65535,
                                        "min": 1
                                    }
                                ],
                                "rule": "MustRunAs"
                            },
                            "hostIPC": false,
                            "hostNetwork": false,
                            "hostPID": false,
                            "privileged": false,
                            "runAsUser": {
                                "rule": "MustRunAsNonRoot"
                            },
                            "seLinux": {
                                "rule": "RunAsAny"
                            },
                            "supplementalGroups": {
                                "ranges": [
                                    {
                                        "max": 65535,
                                        "min": 1
                                    }
                                ],
                                "rule": "MustRunAs"
                            },
                            "volumes": [
                                "emptyDir",
                                "configMap",
                                "secret"
                            ]
                        }
                    },
                    "apiVersion": "policy/v1beta1",
                    "kind": "PodSecurityPolicy",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"policy/v1beta1\",\"kind\":\"PodSecurityPolicy\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines\"},\"spec\":{\"allowPrivilegeEscalation\":false,\"fsGroup\":{\"ranges\":[{\"max\":65535,\"min\":1}],\"rule\":\"MustRunAs\"},\"hostIPC\":false,\"hostNetwork\":false,\"hostPID\":false,\"privileged\":false,\"runAsUser\":{\"rule\":\"MustRunAsNonRoot\"},\"seLinux\":{\"rule\":\"RunAsAny\"},\"supplementalGroups\":{\"ranges\":[{\"max\":65535,\"min\":1}],\"rule\":\"MustRunAs\"},\"volumes\":[\"emptyDir\",\"configMap\",\"secret\"]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:04Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "policy/v1beta1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:allowPrivilegeEscalation": {},
                                        "f:fsGroup": {
                                            "f:ranges": {},
                                            "f:rule": {}
                                        },
                                        "f:runAsUser": {
                                            "f:rule": {}
                                        },
                                        "f:seLinux": {
                                            "f:rule": {}
                                        },
                                        "f:supplementalGroups": {
                                            "f:ranges": {},
                                            "f:rule": {}
                                        },
                                        "f:volumes": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:04Z"
                            }
                        ],
                        "name": "tekton-pipelines",
                        "resourceVersion": "125882",
                        "uid": "1fe4e5ba-ee0a-4664-a084-9ccb5aa85abf"
                    },
                    "spec": {
                        "allowPrivilegeEscalation": false,
                        "fsGroup": {
                            "ranges": [
                                {
                                    "max": 65535,
                                    "min": 1
                                }
                            ],
                            "rule": "MustRunAs"
                        },
                        "runAsUser": {
                            "rule": "MustRunAsNonRoot"
                        },
                        "seLinux": {
                            "rule": "RunAsAny"
                        },
                        "supplementalGroups": {
                            "ranges": [
                                {
                                    "max": 65535,
                                    "min": 1
                                }
                            ],
                            "rule": "MustRunAs"
                        },
                        "volumes": [
                            "emptyDir",
                            "configMap",
                            "secret"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ConfigMap::tekton-pipelines/feature-flags",
                "custom": true,
                "id": "tekton-pipelines/feature-flags",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "disable-affinity-assistant": "false",
                        "disable-creds-init": "false",
                        "disable-home-env-overwrite": "true",
                        "disable-working-directory-overwrite": "true",
                        "enable-api-fields": "stable",
                        "enable-custom-tasks": "false",
                        "enable-tekton-oci-bundles": "false",
                        "require-git-ssh-secret-known-hosts": "false",
                        "running-in-environment-with-injected-sidecars": "true",
                        "scope-when-expressions-to-task": "false"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "feature-flags",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "disable-affinity-assistant": "false",
                            "disable-creds-init": "false",
                            "disable-home-env-overwrite": "true",
                            "disable-working-directory-overwrite": "true",
                            "enable-api-fields": "stable",
                            "enable-custom-tasks": "false",
                            "enable-tekton-oci-bundles": "false",
                            "require-git-ssh-secret-known-hosts": "false",
                            "running-in-environment-with-injected-sidecars": "true",
                            "scope-when-expressions-to-task": "false"
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "feature-flags",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "disable-affinity-assistant": "false",
                        "disable-creds-init": "false",
                        "disable-home-env-overwrite": "true",
                        "disable-working-directory-overwrite": "true",
                        "enable-api-fields": "stable",
                        "enable-custom-tasks": "false",
                        "enable-tekton-oci-bundles": "false",
                        "require-git-ssh-secret-known-hosts": "false",
                        "running-in-environment-with-injected-sidecars": "true",
                        "scope-when-expressions-to-task": "false"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"disable-affinity-assistant\":\"false\",\"disable-creds-init\":\"false\",\"disable-home-env-overwrite\":\"true\",\"disable-working-directory-overwrite\":\"true\",\"enable-api-fields\":\"stable\",\"enable-custom-tasks\":\"false\",\"enable-tekton-oci-bundles\":\"false\",\"require-git-ssh-secret-known-hosts\":\"false\",\"running-in-environment-with-injected-sidecars\":\"true\",\"scope-when-expressions-to-task\":\"false\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"feature-flags\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:08Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:data": {
                                        ".": {},
                                        "f:disable-affinity-assistant": {},
                                        "f:disable-creds-init": {},
                                        "f:disable-home-env-overwrite": {},
                                        "f:disable-working-directory-overwrite": {},
                                        "f:enable-api-fields": {},
                                        "f:enable-custom-tasks": {},
                                        "f:enable-tekton-oci-bundles": {},
                                        "f:require-git-ssh-secret-known-hosts": {},
                                        "f:running-in-environment-with-injected-sidecars": {},
                                        "f:scope-when-expressions-to-task": {}
                                    },
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:08Z"
                            }
                        ],
                        "name": "feature-flags",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125912",
                        "uid": "28220a47-1704-45c6-aaed-cd9eda1dad03"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "data": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::clusterinterceptors.triggers.tekton.dev",
                "custom": true,
                "id": "clusterinterceptors.triggers.tekton.dev",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "name": "clusterinterceptors.triggers.tekton.dev"
                    },
                    "spec": {
                        "group": "triggers.tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "ClusterInterceptor",
                            "plural": "clusterinterceptors",
                            "shortNames": [
                                "ci"
                            ],
                            "singular": "clusterinterceptor"
                        },
                        "scope": "Cluster",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "triggers.tekton.dev/release": "v0.17.1",
                                "version": "v0.17.1"
                            },
                            "name": "clusterinterceptors.triggers.tekton.dev"
                        },
                        "spec": {
                            "group": "triggers.tekton.dev",
                            "names": {
                                "categories": [
                                    "tekton",
                                    "tekton-triggers"
                                ],
                                "kind": "ClusterInterceptor",
                                "plural": "clusterinterceptors",
                                "shortNames": [
                                    "ci"
                                ],
                                "singular": "clusterinterceptor"
                            },
                            "scope": "Cluster",
                            "versions": [
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {
                                        "status": {}
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"triggers.tekton.dev/release\":\"v0.17.1\",\"version\":\"v0.17.1\"},\"name\":\"clusterinterceptors.triggers.tekton.dev\"},\"spec\":{\"group\":\"triggers.tekton.dev\",\"names\":{\"categories\":[\"tekton\",\"tekton-triggers\"],\"kind\":\"ClusterInterceptor\",\"plural\":\"clusterinterceptors\",\"shortNames\":[\"ci\"],\"singular\":\"clusterinterceptor\"},\"scope\":\"Cluster\",\"versions\":[{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:01Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:01Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:triggers.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:01Z"
                            }
                        ],
                        "name": "clusterinterceptors.triggers.tekton.dev",
                        "resourceVersion": "125861",
                        "uid": "82070c63-5812-4ef9-846d-de2abed77a15"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "triggers.tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "ClusterInterceptor",
                            "listKind": "ClusterInterceptorList",
                            "plural": "clusterinterceptors",
                            "shortNames": [
                                "ci"
                            ],
                            "singular": "clusterinterceptor"
                        },
                        "scope": "Cluster",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "ClusterInterceptor",
                            "listKind": "ClusterInterceptorList",
                            "plural": "clusterinterceptors",
                            "shortNames": [
                                "ci"
                            ],
                            "singular": "clusterinterceptor"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:45:01Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:45:01Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1alpha1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:Role::tekton-pipelines/tekton-pipelines-webhook",
                "custom": true,
                "id": "tekton-pipelines/tekton-pipelines-webhook",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:Role",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines-webhook",
                        "namespace": "tekton-pipelines"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "config-logging",
                                "config-observability",
                                "config-leader-election",
                                "feature-flags"
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "webhook-certs"
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "policy"
                            ],
                            "resourceNames": [
                                "tekton-pipelines"
                            ],
                            "resources": [
                                "podsecuritypolicies"
                            ],
                            "verbs": [
                                "use"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "Role",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines-webhook",
                            "namespace": "tekton-pipelines"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "configmaps"
                                ],
                                "verbs": [
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resourceNames": [
                                    "config-logging",
                                    "config-observability",
                                    "config-leader-election",
                                    "feature-flags"
                                ],
                                "resources": [
                                    "configmaps"
                                ],
                                "verbs": [
                                    "get"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "secrets"
                                ],
                                "verbs": [
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resourceNames": [
                                    "webhook-certs"
                                ],
                                "resources": [
                                    "secrets"
                                ],
                                "verbs": [
                                    "get",
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "policy"
                                ],
                                "resourceNames": [
                                    "tekton-pipelines"
                                ],
                                "resources": [
                                    "podsecuritypolicies"
                                ],
                                "verbs": [
                                    "use"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"Role\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines-webhook\",\"namespace\":\"tekton-pipelines\"},\"rules\":[{\"apiGroups\":[\"\"],\"resources\":[\"configmaps\"],\"verbs\":[\"list\",\"watch\"]},{\"apiGroups\":[\"\"],\"resourceNames\":[\"config-logging\",\"config-observability\",\"config-leader-election\",\"feature-flags\"],\"resources\":[\"configmaps\"],\"verbs\":[\"get\"]},{\"apiGroups\":[\"\"],\"resources\":[\"secrets\"],\"verbs\":[\"list\",\"watch\"]},{\"apiGroups\":[\"\"],\"resourceNames\":[\"webhook-certs\"],\"resources\":[\"secrets\"],\"verbs\":[\"get\",\"update\"]},{\"apiGroups\":[\"policy\"],\"resourceNames\":[\"tekton-pipelines\"],\"resources\":[\"podsecuritypolicies\"],\"verbs\":[\"use\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:42Z",
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:42Z"
                            }
                        ],
                        "name": "tekton-pipelines-webhook",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126046",
                        "uid": "3a49b47c-604c-4a88-be00-26197fdbed8b"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "config-logging",
                                "config-observability",
                                "config-leader-election",
                                "feature-flags"
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "webhook-certs"
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "policy"
                            ],
                            "resourceNames": [
                                "tekton-pipelines"
                            ],
                            "resources": [
                                "podsecuritypolicies"
                            ],
                            "verbs": [
                                "use"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ConfigMap::tekton-pipelines/config-defaults-triggers",
                "custom": true,
                "id": "tekton-pipelines/config-defaults-triggers",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "_example": "################################\n#                              #\n#    EXAMPLE CONFIGURATION     #\n#                              #\n################################\n\n# This block is not actually functional configuration,\n# but serves to illustrate the available configuration\n# options and document them in a way that is accessible\n# to users that `kubectl edit` this config map.\n#\n# These sample configuration options may be copied out of\n# this example block and unindented to be in the data block\n# to actually change the configuration.\n\n# default-service-account contains the default service account name\n# to use for TaskRun and PipelineRun, if none is specified.\ndefault-service-account: \"default\"\n"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "config-defaults-triggers",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "_example": "################################\n#                              #\n#    EXAMPLE CONFIGURATION     #\n#                              #\n################################\n\n# This block is not actually functional configuration,\n# but serves to illustrate the available configuration\n# options and document them in a way that is accessible\n# to users that `kubectl edit` this config map.\n#\n# These sample configuration options may be copied out of\n# this example block and unindented to be in the data block\n# to actually change the configuration.\n\n# default-service-account contains the default service account name\n# to use for TaskRun and PipelineRun, if none is specified.\ndefault-service-account: \"default\"\n"
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "config-defaults-triggers",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "_example": "################################\n#                              #\n#    EXAMPLE CONFIGURATION     #\n#                              #\n################################\n\n# This block is not actually functional configuration,\n# but serves to illustrate the available configuration\n# options and document them in a way that is accessible\n# to users that `kubectl edit` this config map.\n#\n# These sample configuration options may be copied out of\n# this example block and unindented to be in the data block\n# to actually change the configuration.\n\n# default-service-account contains the default service account name\n# to use for TaskRun and PipelineRun, if none is specified.\ndefault-service-account: \"default\"\n"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"_example\":\"################################\\n#                              #\\n#    EXAMPLE CONFIGURATION     #\\n#                              #\\n################################\\n\\n# This block is not actually functional configuration,\\n# but serves to illustrate the available configuration\\n# options and document them in a way that is accessible\\n# to users that `kubectl edit` this config map.\\n#\\n# These sample configuration options may be copied out of\\n# this example block and unindented to be in the data block\\n# to actually change the configuration.\\n\\n# default-service-account contains the default service account name\\n# to use for TaskRun and PipelineRun, if none is specified.\\ndefault-service-account: \\\"default\\\"\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"config-defaults-triggers\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:03Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:data": {
                                        ".": {},
                                        "f:_example": {}
                                    },
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:03Z"
                            }
                        ],
                        "name": "config-defaults-triggers",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125879",
                        "uid": "e0086fe0-a391-4b95-96ac-3bccf33cab66"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "data": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:Role::tekton-pipelines/tekton-pipelines-leader-election",
                "custom": true,
                "id": "tekton-pipelines/tekton-pipelines-leader-election",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:Role",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines-leader-election",
                        "namespace": "tekton-pipelines"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "coordination.k8s.io"
                            ],
                            "resources": [
                                "leases"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "Role",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines-leader-election",
                            "namespace": "tekton-pipelines"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "coordination.k8s.io"
                                ],
                                "resources": [
                                    "leases"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "create",
                                    "update",
                                    "delete",
                                    "patch",
                                    "watch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"Role\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines-leader-election\",\"namespace\":\"tekton-pipelines\"},\"rules\":[{\"apiGroups\":[\"coordination.k8s.io\"],\"resources\":[\"leases\"],\"verbs\":[\"get\",\"list\",\"create\",\"update\",\"delete\",\"patch\",\"watch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:43Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:43Z"
                            }
                        ],
                        "name": "tekton-pipelines-leader-election",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126062",
                        "uid": "6f077591-cd50-4978-855b-2f6d0f4bdfa5"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "coordination.k8s.io"
                            ],
                            "resources": [
                                "leases"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::tekton-triggers-webhook-admin",
                "custom": true,
                "id": "tekton-triggers-webhook-admin",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-webhook-admin"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "tekton-triggers-admin"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-triggers-webhook",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-webhook-admin"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "tekton-triggers-admin"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "tekton-triggers-webhook",
                                "namespace": "tekton-pipelines"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-webhook-admin\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"tekton-triggers-admin\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"tekton-triggers-webhook\",\"namespace\":\"tekton-pipelines\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:46:00Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:46:00Z"
                            }
                        ],
                        "name": "tekton-triggers-webhook-admin",
                        "resourceVersion": "126205",
                        "uid": "c54f8cd6-0c67-4475-b16d-04f79f9cfae9"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "tekton-triggers-admin"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-triggers-webhook",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:Secret::tekton-pipelines/webhook-certs",
                "custom": true,
                "id": "tekton-pipelines/webhook-certs",
                "type": "kubernetes:core/v1:Secret",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Secret",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0"
                        },
                        "name": "webhook-certs",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Secret",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "pipeline.tekton.dev/release": "v0.31.0"
                            },
                            "name": "webhook-certs",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Secret",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Secret\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"pipeline.tekton.dev/release\":\"v0.31.0\"},\"name\":\"webhook-certs\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:40Z",
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:pipeline.tekton.dev/release": {}
                                        }
                                    },
                                    "f:type": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:40Z"
                            }
                        ],
                        "name": "webhook-certs",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126014",
                        "uid": "64d48306-8814-4496-adb8-dbd47d9f0b3f"
                    },
                    "type": "Opaque"
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apps/v1:Deployment::tekton-pipelines/tekton-triggers-controller",
                "custom": true,
                "id": "tekton-pipelines/tekton-triggers-controller",
                "type": "kubernetes:apps/v1:Deployment",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "controller",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "app.kubernetes.io/version": "v0.17.1",
                            "triggers.tekton.dev/release": "v0.17.1"
                        },
                        "name": "tekton-triggers-controller",
                        "namespace": "tekton-pipelines"
                    },
                    "spec": {
                        "replicas": 1,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "controller",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            }
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "tekton-triggers-controller",
                                    "app.kubernetes.io/component": "controller",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "controller",
                                    "app.kubernetes.io/part-of": "tekton-triggers",
                                    "app.kubernetes.io/version": "v0.17.1",
                                    "triggers.tekton.dev/release": "v0.17.1",
                                    "version": "v0.17.1"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "args": [
                                            "-logtostderr",
                                            "-stderrthreshold",
                                            "INFO",
                                            "-el-image",
                                            "gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/eventlistenersink:v0.17.1@sha256:2d298f88e9b53072ed665acbd946ff203f2b3f24b71e2014ca9416d8271d8d77",
                                            "-el-port",
                                            "8080",
                                            "-el-security-context=true",
                                            "-el-readtimeout",
                                            "5",
                                            "-el-writetimeout",
                                            "40",
                                            "-el-idletimeout",
                                            "120",
                                            "-el-timeouthandler",
                                            "30",
                                            "-period-seconds",
                                            "10",
                                            "-failure-threshold",
                                            "1"
                                        ],
                                        "env": [
                                            {
                                                "name": "SYSTEM_NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "CONFIG_LOGGING_NAME",
                                                "value": "config-logging-triggers"
                                            },
                                            {
                                                "name": "CONFIG_OBSERVABILITY_NAME",
                                                "value": "config-observability-triggers"
                                            },
                                            {
                                                "name": "CONFIG_DEFAULTS_NAME",
                                                "value": "config-defaults-triggers"
                                            },
                                            {
                                                "name": "METRICS_DOMAIN",
                                                "value": "tekton.dev/triggers"
                                            },
                                            {
                                                "name": "METRICS_PROMETHEUS_PORT",
                                                "value": "9000"
                                            }
                                        ],
                                        "image": "gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/controller:v0.17.1@sha256:6b270599fde41dd1eb0f00aa4889bfd0c3529886a2357c568673efb9838a404d",
                                        "name": "tekton-triggers-controller",
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "runAsUser": 65532
                                        }
                                    }
                                ],
                                "serviceAccountName": "tekton-triggers-controller"
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "controller",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "app.kubernetes.io/version": "v0.17.1",
                                "triggers.tekton.dev/release": "v0.17.1"
                            },
                            "name": "tekton-triggers-controller",
                            "namespace": "tekton-pipelines"
                        },
                        "spec": {
                            "replicas": 1,
                            "selector": {
                                "matchLabels": {
                                    "app.kubernetes.io/component": "controller",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "controller",
                                    "app.kubernetes.io/part-of": "tekton-triggers"
                                }
                            },
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "app": "tekton-triggers-controller",
                                        "app.kubernetes.io/component": "controller",
                                        "app.kubernetes.io/instance": "default",
                                        "app.kubernetes.io/name": "controller",
                                        "app.kubernetes.io/part-of": "tekton-triggers",
                                        "app.kubernetes.io/version": "v0.17.1",
                                        "triggers.tekton.dev/release": "v0.17.1",
                                        "version": "v0.17.1"
                                    }
                                },
                                "spec": {
                                    "containers": [
                                        {
                                            "args": [
                                                "-logtostderr",
                                                "-stderrthreshold",
                                                "INFO",
                                                "-el-image",
                                                "gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/eventlistenersink:v0.17.1@sha256:2d298f88e9b53072ed665acbd946ff203f2b3f24b71e2014ca9416d8271d8d77",
                                                "-el-port",
                                                "8080",
                                                "-el-security-context=true",
                                                "-el-readtimeout",
                                                "5",
                                                "-el-writetimeout",
                                                "40",
                                                "-el-idletimeout",
                                                "120",
                                                "-el-timeouthandler",
                                                "30",
                                                "-period-seconds",
                                                "10",
                                                "-failure-threshold",
                                                "1"
                                            ],
                                            "env": [
                                                {
                                                    "name": "SYSTEM_NAMESPACE",
                                                    "valueFrom": {
                                                        "fieldRef": {
                                                            "fieldPath": "metadata.namespace"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "CONFIG_LOGGING_NAME",
                                                    "value": "config-logging-triggers"
                                                },
                                                {
                                                    "name": "CONFIG_OBSERVABILITY_NAME",
                                                    "value": "config-observability-triggers"
                                                },
                                                {
                                                    "name": "CONFIG_DEFAULTS_NAME",
                                                    "value": "config-defaults-triggers"
                                                },
                                                {
                                                    "name": "METRICS_DOMAIN",
                                                    "value": "tekton.dev/triggers"
                                                },
                                                {
                                                    "name": "METRICS_PROMETHEUS_PORT",
                                                    "value": "9000"
                                                }
                                            ],
                                            "image": "gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/controller:v0.17.1@sha256:6b270599fde41dd1eb0f00aa4889bfd0c3529886a2357c568673efb9838a404d",
                                            "name": "tekton-triggers-controller",
                                            "securityContext": {
                                                "allowPrivilegeEscalation": false,
                                                "runAsUser": 65532
                                            }
                                        }
                                    ],
                                    "serviceAccountName": "tekton-triggers-controller"
                                }
                            }
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "annotations": {
                            "deployment.kubernetes.io/revision": "1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"controller\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"app.kubernetes.io/version\":\"v0.17.1\",\"triggers.tekton.dev/release\":\"v0.17.1\"},\"name\":\"tekton-triggers-controller\",\"namespace\":\"tekton-pipelines\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"controller\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"tekton-triggers-controller\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"controller\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"app.kubernetes.io/version\":\"v0.17.1\",\"triggers.tekton.dev/release\":\"v0.17.1\",\"version\":\"v0.17.1\"}},\"spec\":{\"containers\":[{\"args\":[\"-logtostderr\",\"-stderrthreshold\",\"INFO\",\"-el-image\",\"gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/eventlistenersink:v0.17.1@sha256:2d298f88e9b53072ed665acbd946ff203f2b3f24b71e2014ca9416d8271d8d77\",\"-el-port\",\"8080\",\"-el-security-context=true\",\"-el-readtimeout\",\"5\",\"-el-writetimeout\",\"40\",\"-el-idletimeout\",\"120\",\"-el-timeouthandler\",\"30\",\"-period-seconds\",\"10\",\"-failure-threshold\",\"1\"],\"env\":[{\"name\":\"SYSTEM_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"CONFIG_LOGGING_NAME\",\"value\":\"config-logging-triggers\"},{\"name\":\"CONFIG_OBSERVABILITY_NAME\",\"value\":\"config-observability-triggers\"},{\"name\":\"CONFIG_DEFAULTS_NAME\",\"value\":\"config-defaults-triggers\"},{\"name\":\"METRICS_DOMAIN\",\"value\":\"tekton.dev/triggers\"},{\"name\":\"METRICS_PROMETHEUS_PORT\",\"value\":\"9000\"}],\"image\":\"gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/controller:v0.17.1@sha256:6b270599fde41dd1eb0f00aa4889bfd0c3529886a2357c568673efb9838a404d\",\"name\":\"tekton-triggers-controller\",\"securityContext\":{\"allowPrivilegeEscalation\":false,\"runAsUser\":65532}}],\"serviceAccountName\":\"tekton-triggers-controller\"}}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:45Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "controller",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "app.kubernetes.io/version": "v0.17.1",
                            "triggers.tekton.dev/release": "v0.17.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:triggers.tekton.dev/release": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:progressDeadlineSeconds": {},
                                        "f:replicas": {},
                                        "f:revisionHistoryLimit": {},
                                        "f:selector": {},
                                        "f:strategy": {
                                            "f:rollingUpdate": {
                                                ".": {},
                                                "f:maxSurge": {},
                                                "f:maxUnavailable": {}
                                            },
                                            "f:type": {}
                                        },
                                        "f:template": {
                                            "f:metadata": {
                                                "f:labels": {
                                                    ".": {},
                                                    "f:app": {},
                                                    "f:app.kubernetes.io/component": {},
                                                    "f:app.kubernetes.io/instance": {},
                                                    "f:app.kubernetes.io/name": {},
                                                    "f:app.kubernetes.io/part-of": {},
                                                    "f:app.kubernetes.io/version": {},
                                                    "f:triggers.tekton.dev/release": {},
                                                    "f:version": {}
                                                }
                                            },
                                            "f:spec": {
                                                "f:containers": {
                                                    "k:{\"name\":\"tekton-triggers-controller\"}": {
                                                        ".": {},
                                                        "f:args": {},
                                                        "f:env": {
                                                            ".": {},
                                                            "k:{\"name\":\"CONFIG_DEFAULTS_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"CONFIG_LOGGING_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"CONFIG_OBSERVABILITY_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"METRICS_DOMAIN\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"METRICS_PROMETHEUS_PORT\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"SYSTEM_NAMESPACE\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:fieldRef": {
                                                                        ".": {},
                                                                        "f:apiVersion": {},
                                                                        "f:fieldPath": {}
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "f:image": {},
                                                        "f:imagePullPolicy": {},
                                                        "f:name": {},
                                                        "f:resources": {},
                                                        "f:securityContext": {
                                                            ".": {},
                                                            "f:allowPrivilegeEscalation": {},
                                                            "f:runAsUser": {}
                                                        },
                                                        "f:terminationMessagePath": {},
                                                        "f:terminationMessagePolicy": {}
                                                    }
                                                },
                                                "f:dnsPolicy": {},
                                                "f:restartPolicy": {},
                                                "f:schedulerName": {},
                                                "f:securityContext": {},
                                                "f:serviceAccount": {},
                                                "f:serviceAccountName": {},
                                                "f:terminationGracePeriodSeconds": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:45Z"
                            },
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            "f:deployment.kubernetes.io/revision": {}
                                        }
                                    },
                                    "f:status": {
                                        "f:availableReplicas": {},
                                        "f:conditions": {
                                            ".": {},
                                            "k:{\"type\":\"Available\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"Progressing\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:observedGeneration": {},
                                        "f:readyReplicas": {},
                                        "f:replicas": {},
                                        "f:updatedReplicas": {}
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:57Z"
                            }
                        ],
                        "name": "tekton-triggers-controller",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126160",
                        "uid": "8832bdbe-0d4b-460d-97e5-b4ca5f922a99"
                    },
                    "spec": {
                        "progressDeadlineSeconds": 600,
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "controller",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            }
                        },
                        "strategy": {
                            "rollingUpdate": {
                                "maxSurge": "25%",
                                "maxUnavailable": "25%"
                            },
                            "type": "RollingUpdate"
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "tekton-triggers-controller",
                                    "app.kubernetes.io/component": "controller",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "controller",
                                    "app.kubernetes.io/part-of": "tekton-triggers",
                                    "app.kubernetes.io/version": "v0.17.1",
                                    "triggers.tekton.dev/release": "v0.17.1",
                                    "version": "v0.17.1"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "args": [
                                            "-logtostderr",
                                            "-stderrthreshold",
                                            "INFO",
                                            "-el-image",
                                            "gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/eventlistenersink:v0.17.1@sha256:2d298f88e9b53072ed665acbd946ff203f2b3f24b71e2014ca9416d8271d8d77",
                                            "-el-port",
                                            "8080",
                                            "-el-security-context=true",
                                            "-el-readtimeout",
                                            "5",
                                            "-el-writetimeout",
                                            "40",
                                            "-el-idletimeout",
                                            "120",
                                            "-el-timeouthandler",
                                            "30",
                                            "-period-seconds",
                                            "10",
                                            "-failure-threshold",
                                            "1"
                                        ],
                                        "env": [
                                            {
                                                "name": "SYSTEM_NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "apiVersion": "v1",
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "CONFIG_LOGGING_NAME",
                                                "value": "config-logging-triggers"
                                            },
                                            {
                                                "name": "CONFIG_OBSERVABILITY_NAME",
                                                "value": "config-observability-triggers"
                                            },
                                            {
                                                "name": "CONFIG_DEFAULTS_NAME",
                                                "value": "config-defaults-triggers"
                                            },
                                            {
                                                "name": "METRICS_DOMAIN",
                                                "value": "tekton.dev/triggers"
                                            },
                                            {
                                                "name": "METRICS_PROMETHEUS_PORT",
                                                "value": "9000"
                                            }
                                        ],
                                        "image": "gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/controller:v0.17.1@sha256:6b270599fde41dd1eb0f00aa4889bfd0c3529886a2357c568673efb9838a404d",
                                        "imagePullPolicy": "IfNotPresent",
                                        "name": "tekton-triggers-controller",
                                        "resources": {},
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "runAsUser": 65532
                                        },
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File"
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {},
                                "serviceAccount": "tekton-triggers-controller",
                                "serviceAccountName": "tekton-triggers-controller",
                                "terminationGracePeriodSeconds": 30
                            }
                        }
                    },
                    "status": {
                        "availableReplicas": 1,
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:45:45Z",
                                "lastUpdateTime": "2021-12-19T03:45:51Z",
                                "message": "ReplicaSet \"tekton-triggers-controller-57b5d6b645\" has successfully progressed.",
                                "reason": "NewReplicaSetAvailable",
                                "status": "True",
                                "type": "Progressing"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:45:57Z",
                                "lastUpdateTime": "2021-12-19T03:45:57Z",
                                "message": "Deployment has minimum availability.",
                                "reason": "MinimumReplicasAvailable",
                                "status": "True",
                                "type": "Available"
                            }
                        ],
                        "observedGeneration": 1,
                        "readyReplicas": 1,
                        "replicas": 1,
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::tekton-aggregate-edit",
                "custom": true,
                "id": "tekton-aggregate-edit",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "rbac.authorization.k8s.io/aggregate-to-admin": "true",
                            "rbac.authorization.k8s.io/aggregate-to-edit": "true"
                        },
                        "name": "tekton-aggregate-edit"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "tasks",
                                "taskruns",
                                "pipelines",
                                "pipelineruns",
                                "pipelineresources",
                                "conditions"
                            ],
                            "verbs": [
                                "create",
                                "delete",
                                "deletecollection",
                                "get",
                                "list",
                                "patch",
                                "update",
                                "watch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "rbac.authorization.k8s.io/aggregate-to-admin": "true",
                                "rbac.authorization.k8s.io/aggregate-to-edit": "true"
                            },
                            "name": "tekton-aggregate-edit"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "tekton.dev"
                                ],
                                "resources": [
                                    "tasks",
                                    "taskruns",
                                    "pipelines",
                                    "pipelineruns",
                                    "pipelineresources",
                                    "conditions"
                                ],
                                "verbs": [
                                    "create",
                                    "delete",
                                    "deletecollection",
                                    "get",
                                    "list",
                                    "patch",
                                    "update",
                                    "watch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"rbac.authorization.k8s.io/aggregate-to-admin\":\"true\",\"rbac.authorization.k8s.io/aggregate-to-edit\":\"true\"},\"name\":\"tekton-aggregate-edit\"},\"rules\":[{\"apiGroups\":[\"tekton.dev\"],\"resources\":[\"tasks\",\"taskruns\",\"pipelines\",\"pipelineruns\",\"pipelineresources\",\"conditions\"],\"verbs\":[\"create\",\"delete\",\"deletecollection\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:40Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "rbac.authorization.k8s.io/aggregate-to-admin": "true",
                            "rbac.authorization.k8s.io/aggregate-to-edit": "true"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:rbac.authorization.k8s.io/aggregate-to-admin": {},
                                            "f:rbac.authorization.k8s.io/aggregate-to-edit": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:40Z"
                            }
                        ],
                        "name": "tekton-aggregate-edit",
                        "resourceVersion": "125988",
                        "uid": "9c3d6cf6-d434-4ca8-882b-54ee0e78ffd8"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "tasks",
                                "taskruns",
                                "pipelines",
                                "pipelineruns",
                                "pipelineresources",
                                "conditions"
                            ],
                            "verbs": [
                                "create",
                                "delete",
                                "deletecollection",
                                "get",
                                "list",
                                "patch",
                                "update",
                                "watch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ConfigMap::tekton-pipelines/config-defaults",
                "custom": true,
                "id": "tekton-pipelines/config-defaults",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "_example": "################################\n#                              #\n#    EXAMPLE CONFIGURATION     #\n#                              #\n################################\n\n# This block is not actually functional configuration,\n# but serves to illustrate the available configuration\n# options and document them in a way that is accessible\n# to users that `kubectl edit` this config map.\n#\n# These sample configuration options may be copied out of\n# this example block and unindented to be in the data block\n# to actually change the configuration.\n\n# default-timeout-minutes contains the default number of\n# minutes to use for TaskRun and PipelineRun, if none is specified.\ndefault-timeout-minutes: \"60\"  # 60 minutes\n\n# default-service-account contains the default service account name\n# to use for TaskRun and PipelineRun, if none is specified.\ndefault-service-account: \"default\"\n\n# default-managed-by-label-value contains the default value given to the\n# \"app.kubernetes.io/managed-by\" label applied to all Pods created for\n# TaskRuns. If a user's requested TaskRun specifies another value for this\n# label, the user's request supercedes.\ndefault-managed-by-label-value: \"tekton-pipelines\"\n\n# default-pod-template contains the default pod template to use\n# TaskRun and PipelineRun, if none is specified. If a pod template\n# is specified, the default pod template is ignored.\n# default-pod-template:\n\n# default-cloud-events-sink contains the default CloudEvents sink to be\n# used for TaskRun and PipelineRun, when no sink is specified.\n# Note that right now it is still not possible to set a PipelineRun or\n# TaskRun specific sink, so the default is the only option available.\n# If no sink is specified, no CloudEvent is generated\n# default-cloud-events-sink:\n\n# default-task-run-workspace-binding contains the default workspace\n# configuration provided for any Workspaces that a Task declares\n# but that a TaskRun does not explicitly provide.\n# default-task-run-workspace-binding: |\n#   emptyDir: {}\n"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "config-defaults",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "_example": "################################\n#                              #\n#    EXAMPLE CONFIGURATION     #\n#                              #\n################################\n\n# This block is not actually functional configuration,\n# but serves to illustrate the available configuration\n# options and document them in a way that is accessible\n# to users that `kubectl edit` this config map.\n#\n# These sample configuration options may be copied out of\n# this example block and unindented to be in the data block\n# to actually change the configuration.\n\n# default-timeout-minutes contains the default number of\n# minutes to use for TaskRun and PipelineRun, if none is specified.\ndefault-timeout-minutes: \"60\"  # 60 minutes\n\n# default-service-account contains the default service account name\n# to use for TaskRun and PipelineRun, if none is specified.\ndefault-service-account: \"default\"\n\n# default-managed-by-label-value contains the default value given to the\n# \"app.kubernetes.io/managed-by\" label applied to all Pods created for\n# TaskRuns. If a user's requested TaskRun specifies another value for this\n# label, the user's request supercedes.\ndefault-managed-by-label-value: \"tekton-pipelines\"\n\n# default-pod-template contains the default pod template to use\n# TaskRun and PipelineRun, if none is specified. If a pod template\n# is specified, the default pod template is ignored.\n# default-pod-template:\n\n# default-cloud-events-sink contains the default CloudEvents sink to be\n# used for TaskRun and PipelineRun, when no sink is specified.\n# Note that right now it is still not possible to set a PipelineRun or\n# TaskRun specific sink, so the default is the only option available.\n# If no sink is specified, no CloudEvent is generated\n# default-cloud-events-sink:\n\n# default-task-run-workspace-binding contains the default workspace\n# configuration provided for any Workspaces that a Task declares\n# but that a TaskRun does not explicitly provide.\n# default-task-run-workspace-binding: |\n#   emptyDir: {}\n"
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "config-defaults",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "_example": "################################\n#                              #\n#    EXAMPLE CONFIGURATION     #\n#                              #\n################################\n\n# This block is not actually functional configuration,\n# but serves to illustrate the available configuration\n# options and document them in a way that is accessible\n# to users that `kubectl edit` this config map.\n#\n# These sample configuration options may be copied out of\n# this example block and unindented to be in the data block\n# to actually change the configuration.\n\n# default-timeout-minutes contains the default number of\n# minutes to use for TaskRun and PipelineRun, if none is specified.\ndefault-timeout-minutes: \"60\"  # 60 minutes\n\n# default-service-account contains the default service account name\n# to use for TaskRun and PipelineRun, if none is specified.\ndefault-service-account: \"default\"\n\n# default-managed-by-label-value contains the default value given to the\n# \"app.kubernetes.io/managed-by\" label applied to all Pods created for\n# TaskRuns. If a user's requested TaskRun specifies another value for this\n# label, the user's request supercedes.\ndefault-managed-by-label-value: \"tekton-pipelines\"\n\n# default-pod-template contains the default pod template to use\n# TaskRun and PipelineRun, if none is specified. If a pod template\n# is specified, the default pod template is ignored.\n# default-pod-template:\n\n# default-cloud-events-sink contains the default CloudEvents sink to be\n# used for TaskRun and PipelineRun, when no sink is specified.\n# Note that right now it is still not possible to set a PipelineRun or\n# TaskRun specific sink, so the default is the only option available.\n# If no sink is specified, no CloudEvent is generated\n# default-cloud-events-sink:\n\n# default-task-run-workspace-binding contains the default workspace\n# configuration provided for any Workspaces that a Task declares\n# but that a TaskRun does not explicitly provide.\n# default-task-run-workspace-binding: |\n#   emptyDir: {}\n"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"_example\":\"################################\\n#                              #\\n#    EXAMPLE CONFIGURATION     #\\n#                              #\\n################################\\n\\n# This block is not actually functional configuration,\\n# but serves to illustrate the available configuration\\n# options and document them in a way that is accessible\\n# to users that `kubectl edit` this config map.\\n#\\n# These sample configuration options may be copied out of\\n# this example block and unindented to be in the data block\\n# to actually change the configuration.\\n\\n# default-timeout-minutes contains the default number of\\n# minutes to use for TaskRun and PipelineRun, if none is specified.\\ndefault-timeout-minutes: \\\"60\\\"  # 60 minutes\\n\\n# default-service-account contains the default service account name\\n# to use for TaskRun and PipelineRun, if none is specified.\\ndefault-service-account: \\\"default\\\"\\n\\n# default-managed-by-label-value contains the default value given to the\\n# \\\"app.kubernetes.io/managed-by\\\" label applied to all Pods created for\\n# TaskRuns. If a user's requested TaskRun specifies another value for this\\n# label, the user's request supercedes.\\ndefault-managed-by-label-value: \\\"tekton-pipelines\\\"\\n\\n# default-pod-template contains the default pod template to use\\n# TaskRun and PipelineRun, if none is specified. If a pod template\\n# is specified, the default pod template is ignored.\\n# default-pod-template:\\n\\n# default-cloud-events-sink contains the default CloudEvents sink to be\\n# used for TaskRun and PipelineRun, when no sink is specified.\\n# Note that right now it is still not possible to set a PipelineRun or\\n# TaskRun specific sink, so the default is the only option available.\\n# If no sink is specified, no CloudEvent is generated\\n# default-cloud-events-sink:\\n\\n# default-task-run-workspace-binding contains the default workspace\\n# configuration provided for any Workspaces that a Task declares\\n# but that a TaskRun does not explicitly provide.\\n# default-task-run-workspace-binding: |\\n#   emptyDir: {}\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"config-defaults\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:46:01Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:data": {
                                        ".": {},
                                        "f:_example": {}
                                    },
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:46:01Z"
                            }
                        ],
                        "name": "config-defaults",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126237",
                        "uid": "698f44fe-2137-4b74-bf75-f40b282bf981"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "data": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apps/v1:Deployment::tekton-pipelines/tekton-pipelines-webhook",
                "custom": true,
                "id": "tekton-pipelines/tekton-pipelines-webhook",
                "type": "kubernetes:apps/v1:Deployment",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "app.kubernetes.io/version": "v0.31.0",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "name": "tekton-pipelines-webhook",
                        "namespace": "tekton-pipelines"
                    },
                    "spec": {
                        "replicas": 1,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "webhook",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            }
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "tekton-pipelines-webhook",
                                    "app.kubernetes.io/component": "webhook",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "webhook",
                                    "app.kubernetes.io/part-of": "tekton-pipelines",
                                    "app.kubernetes.io/version": "v0.31.0",
                                    "pipeline.tekton.dev/release": "v0.31.0",
                                    "version": "v0.31.0"
                                }
                            },
                            "spec": {
                                "affinity": {
                                    "nodeAffinity": {
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                            "nodeSelectorTerms": [
                                                {
                                                    "matchExpressions": [
                                                        {
                                                            "key": "kubernetes.io/os",
                                                            "operator": "NotIn",
                                                            "values": [
                                                                "windows"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    },
                                    "podAntiAffinity": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": [
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/component": "webhook",
                                                            "app.kubernetes.io/instance": "default",
                                                            "app.kubernetes.io/name": "webhook",
                                                            "app.kubernetes.io/part-of": "tekton-pipelines"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 100
                                            }
                                        ]
                                    }
                                },
                                "containers": [
                                    {
                                        "env": [
                                            {
                                                "name": "SYSTEM_NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "CONFIG_LOGGING_NAME",
                                                "value": "config-logging"
                                            },
                                            {
                                                "name": "CONFIG_OBSERVABILITY_NAME",
                                                "value": "config-observability"
                                            },
                                            {
                                                "name": "CONFIG_LEADERELECTION_NAME",
                                                "value": "config-leader-election"
                                            },
                                            {
                                                "name": "CONFIG_FEATURE_FLAGS_NAME",
                                                "value": "feature-flags"
                                            },
                                            {
                                                "name": "WEBHOOK_SERVICE_NAME",
                                                "value": "tekton-pipelines-webhook"
                                            },
                                            {
                                                "name": "WEBHOOK_SECRET_NAME",
                                                "value": "webhook-certs"
                                            },
                                            {
                                                "name": "METRICS_DOMAIN",
                                                "value": "tekton.dev/pipeline"
                                            }
                                        ],
                                        "image": "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/webhook:v0.31.0@sha256:93a93d845204485b576d985f59f1f6cc3085a35faff76ec70ead6e5963220333",
                                        "livenessProbe": {
                                            "httpGet": {
                                                "path": "/health",
                                                "port": "probes",
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10,
                                            "timeoutSeconds": 5
                                        },
                                        "name": "webhook",
                                        "ports": [
                                            {
                                                "containerPort": 9090,
                                                "name": "metrics"
                                            },
                                            {
                                                "containerPort": 8008,
                                                "name": "profiling"
                                            },
                                            {
                                                "containerPort": 8443,
                                                "name": "https-webhook"
                                            },
                                            {
                                                "containerPort": 8080,
                                                "name": "probes"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "httpGet": {
                                                "path": "/readiness",
                                                "port": "probes",
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10,
                                            "timeoutSeconds": 5
                                        },
                                        "resources": {
                                            "limits": {
                                                "cpu": "500m",
                                                "memory": "500Mi"
                                            },
                                            "requests": {
                                                "cpu": "100m",
                                                "memory": "100Mi"
                                            }
                                        },
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "capabilities": {
                                                "drop": [
                                                    "all"
                                                ]
                                            },
                                            "runAsGroup": 65532,
                                            "runAsUser": 65532
                                        }
                                    }
                                ],
                                "serviceAccountName": "tekton-pipelines-webhook"
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "webhook",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "app.kubernetes.io/version": "v0.31.0",
                                "pipeline.tekton.dev/release": "v0.31.0",
                                "version": "v0.31.0"
                            },
                            "name": "tekton-pipelines-webhook",
                            "namespace": "tekton-pipelines"
                        },
                        "spec": {
                            "replicas": 1,
                            "selector": {
                                "matchLabels": {
                                    "app.kubernetes.io/component": "webhook",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "webhook",
                                    "app.kubernetes.io/part-of": "tekton-pipelines"
                                }
                            },
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "app": "tekton-pipelines-webhook",
                                        "app.kubernetes.io/component": "webhook",
                                        "app.kubernetes.io/instance": "default",
                                        "app.kubernetes.io/name": "webhook",
                                        "app.kubernetes.io/part-of": "tekton-pipelines",
                                        "app.kubernetes.io/version": "v0.31.0",
                                        "pipeline.tekton.dev/release": "v0.31.0",
                                        "version": "v0.31.0"
                                    }
                                },
                                "spec": {
                                    "affinity": {
                                        "nodeAffinity": {
                                            "requiredDuringSchedulingIgnoredDuringExecution": {
                                                "nodeSelectorTerms": [
                                                    {
                                                        "matchExpressions": [
                                                            {
                                                                "key": "kubernetes.io/os",
                                                                "operator": "NotIn",
                                                                "values": [
                                                                    "windows"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        "podAntiAffinity": {
                                            "preferredDuringSchedulingIgnoredDuringExecution": [
                                                {
                                                    "podAffinityTerm": {
                                                        "labelSelector": {
                                                            "matchLabels": {
                                                                "app.kubernetes.io/component": "webhook",
                                                                "app.kubernetes.io/instance": "default",
                                                                "app.kubernetes.io/name": "webhook",
                                                                "app.kubernetes.io/part-of": "tekton-pipelines"
                                                            }
                                                        },
                                                        "topologyKey": "kubernetes.io/hostname"
                                                    },
                                                    "weight": 100
                                                }
                                            ]
                                        }
                                    },
                                    "containers": [
                                        {
                                            "env": [
                                                {
                                                    "name": "SYSTEM_NAMESPACE",
                                                    "valueFrom": {
                                                        "fieldRef": {
                                                            "fieldPath": "metadata.namespace"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "CONFIG_LOGGING_NAME",
                                                    "value": "config-logging"
                                                },
                                                {
                                                    "name": "CONFIG_OBSERVABILITY_NAME",
                                                    "value": "config-observability"
                                                },
                                                {
                                                    "name": "CONFIG_LEADERELECTION_NAME",
                                                    "value": "config-leader-election"
                                                },
                                                {
                                                    "name": "CONFIG_FEATURE_FLAGS_NAME",
                                                    "value": "feature-flags"
                                                },
                                                {
                                                    "name": "WEBHOOK_SERVICE_NAME",
                                                    "value": "tekton-pipelines-webhook"
                                                },
                                                {
                                                    "name": "WEBHOOK_SECRET_NAME",
                                                    "value": "webhook-certs"
                                                },
                                                {
                                                    "name": "METRICS_DOMAIN",
                                                    "value": "tekton.dev/pipeline"
                                                }
                                            ],
                                            "image": "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/webhook:v0.31.0@sha256:93a93d845204485b576d985f59f1f6cc3085a35faff76ec70ead6e5963220333",
                                            "livenessProbe": {
                                                "httpGet": {
                                                    "path": "/health",
                                                    "port": "probes",
                                                    "scheme": "HTTP"
                                                },
                                                "initialDelaySeconds": 5,
                                                "periodSeconds": 10,
                                                "timeoutSeconds": 5
                                            },
                                            "name": "webhook",
                                            "ports": [
                                                {
                                                    "containerPort": 9090,
                                                    "name": "metrics"
                                                },
                                                {
                                                    "containerPort": 8008,
                                                    "name": "profiling"
                                                },
                                                {
                                                    "containerPort": 8443,
                                                    "name": "https-webhook"
                                                },
                                                {
                                                    "containerPort": 8080,
                                                    "name": "probes"
                                                }
                                            ],
                                            "readinessProbe": {
                                                "httpGet": {
                                                    "path": "/readiness",
                                                    "port": "probes",
                                                    "scheme": "HTTP"
                                                },
                                                "initialDelaySeconds": 5,
                                                "periodSeconds": 10,
                                                "timeoutSeconds": 5
                                            },
                                            "resources": {
                                                "limits": {
                                                    "cpu": "500m",
                                                    "memory": "500Mi"
                                                },
                                                "requests": {
                                                    "cpu": "100m",
                                                    "memory": "100Mi"
                                                }
                                            },
                                            "securityContext": {
                                                "allowPrivilegeEscalation": false,
                                                "capabilities": {
                                                    "drop": [
                                                        "all"
                                                    ]
                                                },
                                                "runAsGroup": 65532,
                                                "runAsUser": 65532
                                            }
                                        }
                                    ],
                                    "serviceAccountName": "tekton-pipelines-webhook"
                                }
                            }
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "annotations": {
                            "deployment.kubernetes.io/revision": "1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"app.kubernetes.io/version\":\"v0.31.0\",\"pipeline.tekton.dev/release\":\"v0.31.0\",\"version\":\"v0.31.0\"},\"name\":\"tekton-pipelines-webhook\",\"namespace\":\"tekton-pipelines\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"tekton-pipelines-webhook\",\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"app.kubernetes.io/version\":\"v0.31.0\",\"pipeline.tekton.dev/release\":\"v0.31.0\",\"version\":\"v0.31.0\"}},\"spec\":{\"affinity\":{\"nodeAffinity\":{\"requiredDuringSchedulingIgnoredDuringExecution\":{\"nodeSelectorTerms\":[{\"matchExpressions\":[{\"key\":\"kubernetes.io/os\",\"operator\":\"NotIn\",\"values\":[\"windows\"]}]}]}},\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":100}]}},\"containers\":[{\"env\":[{\"name\":\"SYSTEM_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"CONFIG_LOGGING_NAME\",\"value\":\"config-logging\"},{\"name\":\"CONFIG_OBSERVABILITY_NAME\",\"value\":\"config-observability\"},{\"name\":\"CONFIG_LEADERELECTION_NAME\",\"value\":\"config-leader-election\"},{\"name\":\"CONFIG_FEATURE_FLAGS_NAME\",\"value\":\"feature-flags\"},{\"name\":\"WEBHOOK_SERVICE_NAME\",\"value\":\"tekton-pipelines-webhook\"},{\"name\":\"WEBHOOK_SECRET_NAME\",\"value\":\"webhook-certs\"},{\"name\":\"METRICS_DOMAIN\",\"value\":\"tekton.dev/pipeline\"}],\"image\":\"gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/webhook:v0.31.0@sha256:93a93d845204485b576d985f59f1f6cc3085a35faff76ec70ead6e5963220333\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/health\",\"port\":\"probes\",\"scheme\":\"HTTP\"},\"initialDelaySeconds\":5,\"periodSeconds\":10,\"timeoutSeconds\":5},\"name\":\"webhook\",\"ports\":[{\"containerPort\":9090,\"name\":\"metrics\"},{\"containerPort\":8008,\"name\":\"profiling\"},{\"containerPort\":8443,\"name\":\"https-webhook\"},{\"containerPort\":8080,\"name\":\"probes\"}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/readiness\",\"port\":\"probes\",\"scheme\":\"HTTP\"},\"initialDelaySeconds\":5,\"periodSeconds\":10,\"timeoutSeconds\":5},\"resources\":{\"limits\":{\"cpu\":\"500m\",\"memory\":\"500Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"100Mi\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"all\"]},\"runAsGroup\":65532,\"runAsUser\":65532}}],\"serviceAccountName\":\"tekton-pipelines-webhook\"}}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:46:01Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "app.kubernetes.io/version": "v0.31.0",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:pipeline.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:progressDeadlineSeconds": {},
                                        "f:replicas": {},
                                        "f:revisionHistoryLimit": {},
                                        "f:selector": {},
                                        "f:strategy": {
                                            "f:rollingUpdate": {
                                                ".": {},
                                                "f:maxSurge": {},
                                                "f:maxUnavailable": {}
                                            },
                                            "f:type": {}
                                        },
                                        "f:template": {
                                            "f:metadata": {
                                                "f:labels": {
                                                    ".": {},
                                                    "f:app": {},
                                                    "f:app.kubernetes.io/component": {},
                                                    "f:app.kubernetes.io/instance": {},
                                                    "f:app.kubernetes.io/name": {},
                                                    "f:app.kubernetes.io/part-of": {},
                                                    "f:app.kubernetes.io/version": {},
                                                    "f:pipeline.tekton.dev/release": {},
                                                    "f:version": {}
                                                }
                                            },
                                            "f:spec": {
                                                "f:affinity": {
                                                    ".": {},
                                                    "f:nodeAffinity": {
                                                        ".": {},
                                                        "f:requiredDuringSchedulingIgnoredDuringExecution": {
                                                            ".": {},
                                                            "f:nodeSelectorTerms": {}
                                                        }
                                                    },
                                                    "f:podAntiAffinity": {
                                                        ".": {},
                                                        "f:preferredDuringSchedulingIgnoredDuringExecution": {}
                                                    }
                                                },
                                                "f:containers": {
                                                    "k:{\"name\":\"webhook\"}": {
                                                        ".": {},
                                                        "f:env": {
                                                            ".": {},
                                                            "k:{\"name\":\"CONFIG_FEATURE_FLAGS_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"CONFIG_LEADERELECTION_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"CONFIG_LOGGING_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"CONFIG_OBSERVABILITY_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"METRICS_DOMAIN\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"SYSTEM_NAMESPACE\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:fieldRef": {
                                                                        ".": {},
                                                                        "f:apiVersion": {},
                                                                        "f:fieldPath": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"WEBHOOK_SECRET_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"WEBHOOK_SERVICE_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            }
                                                        },
                                                        "f:image": {},
                                                        "f:imagePullPolicy": {},
                                                        "f:livenessProbe": {
                                                            ".": {},
                                                            "f:failureThreshold": {},
                                                            "f:httpGet": {
                                                                ".": {},
                                                                "f:path": {},
                                                                "f:port": {},
                                                                "f:scheme": {}
                                                            },
                                                            "f:initialDelaySeconds": {},
                                                            "f:periodSeconds": {},
                                                            "f:successThreshold": {},
                                                            "f:timeoutSeconds": {}
                                                        },
                                                        "f:name": {},
                                                        "f:ports": {
                                                            ".": {},
                                                            "k:{\"containerPort\":8008,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:name": {},
                                                                "f:protocol": {}
                                                            },
                                                            "k:{\"containerPort\":8080,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:name": {},
                                                                "f:protocol": {}
                                                            },
                                                            "k:{\"containerPort\":8443,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:name": {},
                                                                "f:protocol": {}
                                                            },
                                                            "k:{\"containerPort\":9090,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:name": {},
                                                                "f:protocol": {}
                                                            }
                                                        },
                                                        "f:readinessProbe": {
                                                            ".": {},
                                                            "f:failureThreshold": {},
                                                            "f:httpGet": {
                                                                ".": {},
                                                                "f:path": {},
                                                                "f:port": {},
                                                                "f:scheme": {}
                                                            },
                                                            "f:initialDelaySeconds": {},
                                                            "f:periodSeconds": {},
                                                            "f:successThreshold": {},
                                                            "f:timeoutSeconds": {}
                                                        },
                                                        "f:resources": {
                                                            ".": {},
                                                            "f:limits": {
                                                                ".": {},
                                                                "f:cpu": {},
                                                                "f:memory": {}
                                                            },
                                                            "f:requests": {
                                                                ".": {},
                                                                "f:cpu": {},
                                                                "f:memory": {}
                                                            }
                                                        },
                                                        "f:securityContext": {
                                                            ".": {},
                                                            "f:allowPrivilegeEscalation": {},
                                                            "f:capabilities": {
                                                                ".": {},
                                                                "f:drop": {}
                                                            },
                                                            "f:runAsGroup": {},
                                                            "f:runAsUser": {}
                                                        },
                                                        "f:terminationMessagePath": {},
                                                        "f:terminationMessagePolicy": {}
                                                    }
                                                },
                                                "f:dnsPolicy": {},
                                                "f:restartPolicy": {},
                                                "f:schedulerName": {},
                                                "f:securityContext": {},
                                                "f:serviceAccount": {},
                                                "f:serviceAccountName": {},
                                                "f:terminationGracePeriodSeconds": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:46:01Z"
                            },
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            "f:deployment.kubernetes.io/revision": {}
                                        }
                                    },
                                    "f:status": {
                                        "f:availableReplicas": {},
                                        "f:conditions": {
                                            ".": {},
                                            "k:{\"type\":\"Available\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"Progressing\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:observedGeneration": {},
                                        "f:readyReplicas": {},
                                        "f:replicas": {},
                                        "f:updatedReplicas": {}
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T03:46:21Z"
                            }
                        ],
                        "name": "tekton-pipelines-webhook",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126521",
                        "uid": "7a98aae3-f786-4353-97c9-3fba5a634a03"
                    },
                    "spec": {
                        "progressDeadlineSeconds": 600,
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "webhook",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            }
                        },
                        "strategy": {
                            "rollingUpdate": {
                                "maxSurge": "25%",
                                "maxUnavailable": "25%"
                            },
                            "type": "RollingUpdate"
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "tekton-pipelines-webhook",
                                    "app.kubernetes.io/component": "webhook",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "webhook",
                                    "app.kubernetes.io/part-of": "tekton-pipelines",
                                    "app.kubernetes.io/version": "v0.31.0",
                                    "pipeline.tekton.dev/release": "v0.31.0",
                                    "version": "v0.31.0"
                                }
                            },
                            "spec": {
                                "affinity": {
                                    "nodeAffinity": {
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                            "nodeSelectorTerms": [
                                                {
                                                    "matchExpressions": [
                                                        {
                                                            "key": "kubernetes.io/os",
                                                            "operator": "NotIn",
                                                            "values": [
                                                                "windows"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    },
                                    "podAntiAffinity": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": [
                                            {
                                                "podAffinityTerm": {
                                                    "labelSelector": {
                                                        "matchLabels": {
                                                            "app.kubernetes.io/component": "webhook",
                                                            "app.kubernetes.io/instance": "default",
                                                            "app.kubernetes.io/name": "webhook",
                                                            "app.kubernetes.io/part-of": "tekton-pipelines"
                                                        }
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                },
                                                "weight": 100
                                            }
                                        ]
                                    }
                                },
                                "containers": [
                                    {
                                        "env": [
                                            {
                                                "name": "SYSTEM_NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "apiVersion": "v1",
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "CONFIG_LOGGING_NAME",
                                                "value": "config-logging"
                                            },
                                            {
                                                "name": "CONFIG_OBSERVABILITY_NAME",
                                                "value": "config-observability"
                                            },
                                            {
                                                "name": "CONFIG_LEADERELECTION_NAME",
                                                "value": "config-leader-election"
                                            },
                                            {
                                                "name": "CONFIG_FEATURE_FLAGS_NAME",
                                                "value": "feature-flags"
                                            },
                                            {
                                                "name": "WEBHOOK_SERVICE_NAME",
                                                "value": "tekton-pipelines-webhook"
                                            },
                                            {
                                                "name": "WEBHOOK_SECRET_NAME",
                                                "value": "webhook-certs"
                                            },
                                            {
                                                "name": "METRICS_DOMAIN",
                                                "value": "tekton.dev/pipeline"
                                            }
                                        ],
                                        "image": "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/webhook:v0.31.0@sha256:93a93d845204485b576d985f59f1f6cc3085a35faff76ec70ead6e5963220333",
                                        "imagePullPolicy": "IfNotPresent",
                                        "livenessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/health",
                                                "port": "probes",
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 5
                                        },
                                        "name": "webhook",
                                        "ports": [
                                            {
                                                "containerPort": 9090,
                                                "name": "metrics",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 8008,
                                                "name": "profiling",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 8443,
                                                "name": "https-webhook",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 8080,
                                                "name": "probes",
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/readiness",
                                                "port": "probes",
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 5
                                        },
                                        "resources": {
                                            "limits": {
                                                "cpu": "500m",
                                                "memory": "500Mi"
                                            },
                                            "requests": {
                                                "cpu": "100m",
                                                "memory": "100Mi"
                                            }
                                        },
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "capabilities": {
                                                "drop": [
                                                    "all"
                                                ]
                                            },
                                            "runAsGroup": 65532,
                                            "runAsUser": 65532
                                        },
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File"
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {},
                                "serviceAccount": "tekton-pipelines-webhook",
                                "serviceAccountName": "tekton-pipelines-webhook",
                                "terminationGracePeriodSeconds": 30
                            }
                        }
                    },
                    "status": {
                        "availableReplicas": 1,
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:46:21Z",
                                "lastUpdateTime": "2021-12-19T03:46:21Z",
                                "message": "Deployment has minimum availability.",
                                "reason": "MinimumReplicasAvailable",
                                "status": "True",
                                "type": "Available"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:46:01Z",
                                "lastUpdateTime": "2021-12-19T03:46:21Z",
                                "message": "ReplicaSet \"tekton-pipelines-webhook-55c9dd7446\" has successfully progressed.",
                                "reason": "NewReplicaSetAvailable",
                                "status": "True",
                                "type": "Progressing"
                            }
                        ],
                        "observedGeneration": 1,
                        "readyReplicas": 1,
                        "replicas": 1,
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:Service::tekton-pipelines/tekton-dashboard",
                "custom": true,
                "id": "tekton-pipelines/tekton-dashboard",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app": "tekton-dashboard",
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "dashboard",
                            "app.kubernetes.io/part-of": "tekton-dashboard",
                            "app.kubernetes.io/version": "v0.23.0",
                            "dashboard.tekton.dev/release": "v0.23.0",
                            "version": "v0.23.0"
                        },
                        "name": "tekton-dashboard",
                        "namespace": "tekton-pipelines"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "http",
                                "port": 9097,
                                "protocol": "TCP",
                                "targetPort": 9097
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/name": "dashboard",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app": "tekton-dashboard",
                                "app.kubernetes.io/component": "dashboard",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "dashboard",
                                "app.kubernetes.io/part-of": "tekton-dashboard",
                                "app.kubernetes.io/version": "v0.23.0",
                                "dashboard.tekton.dev/release": "v0.23.0",
                                "version": "v0.23.0"
                            },
                            "name": "tekton-dashboard",
                            "namespace": "tekton-pipelines"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "http",
                                    "port": 9097,
                                    "protocol": "TCP",
                                    "targetPort": 9097
                                }
                            ],
                            "selector": {
                                "app.kubernetes.io/component": "dashboard",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "dashboard",
                                "app.kubernetes.io/part-of": "tekton-dashboard"
                            }
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app\":\"tekton-dashboard\",\"app.kubernetes.io/component\":\"dashboard\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"dashboard\",\"app.kubernetes.io/part-of\":\"tekton-dashboard\",\"app.kubernetes.io/version\":\"v0.23.0\",\"dashboard.tekton.dev/release\":\"v0.23.0\",\"version\":\"v0.23.0\"},\"name\":\"tekton-dashboard\",\"namespace\":\"tekton-pipelines\"},\"spec\":{\"ports\":[{\"name\":\"http\",\"port\":9097,\"protocol\":\"TCP\",\"targetPort\":9097}],\"selector\":{\"app.kubernetes.io/component\":\"dashboard\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"dashboard\",\"app.kubernetes.io/part-of\":\"tekton-dashboard\"}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:59Z",
                        "labels": {
                            "app": "tekton-dashboard",
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "dashboard",
                            "app.kubernetes.io/part-of": "tekton-dashboard",
                            "app.kubernetes.io/version": "v0.23.0",
                            "dashboard.tekton.dev/release": "v0.23.0",
                            "version": "v0.23.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:dashboard.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"port\":9097,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            }
                                        },
                                        "f:selector": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        },
                                        "f:sessionAffinity": {},
                                        "f:type": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:59Z"
                            }
                        ],
                        "name": "tekton-dashboard",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126181",
                        "uid": "515a84c8-21f0-4e94-b201-549d1818109f"
                    },
                    "spec": {
                        "clusterIP": "10.245.110.30",
                        "clusterIPs": [
                            "10.245.110.30"
                        ],
                        "ipFamilies": [
                            "IPv4"
                        ],
                        "ipFamilyPolicy": "SingleStack",
                        "ports": [
                            {
                                "name": "http",
                                "port": 9097,
                                "protocol": "TCP",
                                "targetPort": 9097
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/name": "dashboard",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::tekton-pipelines/tekton-triggers-webhook-admin",
                "custom": true,
                "id": "tekton-pipelines/tekton-triggers-webhook-admin",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-webhook-admin",
                        "namespace": "tekton-pipelines"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-triggers-admin-webhook"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-triggers-webhook",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-webhook-admin",
                            "namespace": "tekton-pipelines"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "tekton-triggers-admin-webhook"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "tekton-triggers-webhook",
                                "namespace": "tekton-pipelines"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-webhook-admin\",\"namespace\":\"tekton-pipelines\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"tekton-triggers-admin-webhook\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"tekton-triggers-webhook\",\"namespace\":\"tekton-pipelines\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:58Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:58Z"
                            }
                        ],
                        "name": "tekton-triggers-webhook-admin",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126173",
                        "uid": "79c2bed7-1030-4b5c-bc88-8480dfc64e53"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-triggers-admin-webhook"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-triggers-webhook",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:triggers.tekton.dev/v1alpha1:ClusterInterceptor::cel",
                "custom": true,
                "id": "cel",
                "type": "kubernetes:triggers.tekton.dev/v1alpha1:ClusterInterceptor",
                "inputs": {
                    "apiVersion": "triggers.tekton.dev/v1alpha1",
                    "kind": "ClusterInterceptor",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "cel"
                    },
                    "spec": {
                        "clientConfig": {
                            "service": {
                                "name": "tekton-triggers-core-interceptors",
                                "namespace": "tekton-pipelines",
                                "path": "cel"
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "triggers.tekton.dev/v1alpha1",
                    "__inputs": {
                        "apiVersion": "triggers.tekton.dev/v1alpha1",
                        "kind": "ClusterInterceptor",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "cel"
                        },
                        "spec": {
                            "clientConfig": {
                                "service": {
                                    "name": "tekton-triggers-core-interceptors",
                                    "namespace": "tekton-pipelines",
                                    "path": "cel"
                                }
                            }
                        }
                    },
                    "apiVersion": "triggers.tekton.dev/v1alpha1",
                    "kind": "ClusterInterceptor",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"triggers.tekton.dev/v1alpha1\",\"kind\":\"ClusterInterceptor\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"cel\"},\"spec\":{\"clientConfig\":{\"service\":{\"name\":\"tekton-triggers-core-interceptors\",\"namespace\":\"tekton-pipelines\",\"path\":\"cel\"}}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:40Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "triggers.tekton.dev/v1alpha1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        ".": {},
                                        "f:clientConfig": {
                                            ".": {},
                                            "f:service": {
                                                ".": {},
                                                "f:name": {},
                                                "f:namespace": {},
                                                "f:path": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:40Z"
                            }
                        ],
                        "name": "cel",
                        "resourceVersion": "125986",
                        "uid": "7f253596-bce9-4b3e-a88f-83cdd4b58cc0"
                    },
                    "spec": {
                        "clientConfig": {
                            "service": {
                                "name": "tekton-triggers-core-interceptors",
                                "namespace": "tekton-pipelines",
                                "path": "cel"
                            }
                        }
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:Service::tekton-pipelines/tekton-pipelines-webhook",
                "custom": true,
                "id": "tekton-pipelines/tekton-pipelines-webhook",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app": "tekton-pipelines-webhook",
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "app.kubernetes.io/version": "v0.31.0",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "name": "tekton-pipelines-webhook",
                        "namespace": "tekton-pipelines"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "http-metrics",
                                "port": 9090,
                                "targetPort": 9090
                            },
                            {
                                "name": "http-profiling",
                                "port": 8008,
                                "targetPort": 8008
                            },
                            {
                                "name": "https-webhook",
                                "port": 443,
                                "targetPort": 8443
                            },
                            {
                                "name": "probes",
                                "port": 8080
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app": "tekton-pipelines-webhook",
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "webhook",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "app.kubernetes.io/version": "v0.31.0",
                                "pipeline.tekton.dev/release": "v0.31.0",
                                "version": "v0.31.0"
                            },
                            "name": "tekton-pipelines-webhook",
                            "namespace": "tekton-pipelines"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "http-metrics",
                                    "port": 9090,
                                    "targetPort": 9090
                                },
                                {
                                    "name": "http-profiling",
                                    "port": 8008,
                                    "targetPort": 8008
                                },
                                {
                                    "name": "https-webhook",
                                    "port": 443,
                                    "targetPort": 8443
                                },
                                {
                                    "name": "probes",
                                    "port": 8080
                                }
                            ],
                            "selector": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "webhook",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            }
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app\":\"tekton-pipelines-webhook\",\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"app.kubernetes.io/version\":\"v0.31.0\",\"pipeline.tekton.dev/release\":\"v0.31.0\",\"version\":\"v0.31.0\"},\"name\":\"tekton-pipelines-webhook\",\"namespace\":\"tekton-pipelines\"},\"spec\":{\"ports\":[{\"name\":\"http-metrics\",\"port\":9090,\"targetPort\":9090},{\"name\":\"http-profiling\",\"port\":8008,\"targetPort\":8008},{\"name\":\"https-webhook\",\"port\":443,\"targetPort\":8443},{\"name\":\"probes\",\"port\":8080}],\"selector\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:45Z",
                        "labels": {
                            "app": "tekton-pipelines-webhook",
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "app.kubernetes.io/version": "v0.31.0",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:pipeline.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"port\":443,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            },
                                            "k:{\"port\":8008,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            },
                                            "k:{\"port\":8080,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            },
                                            "k:{\"port\":9090,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            }
                                        },
                                        "f:selector": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        },
                                        "f:sessionAffinity": {},
                                        "f:type": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:45Z"
                            }
                        ],
                        "name": "tekton-pipelines-webhook",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126093",
                        "uid": "98f3cc81-08c7-4a70-ab6f-5868dd1e57e3"
                    },
                    "spec": {
                        "clusterIP": "10.245.94.134",
                        "clusterIPs": [
                            "10.245.94.134"
                        ],
                        "ipFamilies": [
                            "IPv4"
                        ],
                        "ipFamilyPolicy": "SingleStack",
                        "ports": [
                            {
                                "name": "http-metrics",
                                "port": 9090,
                                "protocol": "TCP",
                                "targetPort": 9090
                            },
                            {
                                "name": "http-profiling",
                                "port": 8008,
                                "protocol": "TCP",
                                "targetPort": 8008
                            },
                            {
                                "name": "https-webhook",
                                "port": 443,
                                "protocol": "TCP",
                                "targetPort": 8443
                            },
                            {
                                "name": "probes",
                                "port": 8080,
                                "protocol": "TCP",
                                "targetPort": 8080
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:triggers.tekton.dev/v1alpha1:ClusterInterceptor::bitbucket",
                "custom": true,
                "id": "bitbucket",
                "type": "kubernetes:triggers.tekton.dev/v1alpha1:ClusterInterceptor",
                "inputs": {
                    "apiVersion": "triggers.tekton.dev/v1alpha1",
                    "kind": "ClusterInterceptor",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "bitbucket"
                    },
                    "spec": {
                        "clientConfig": {
                            "service": {
                                "name": "tekton-triggers-core-interceptors",
                                "namespace": "tekton-pipelines",
                                "path": "bitbucket"
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "triggers.tekton.dev/v1alpha1",
                    "__inputs": {
                        "apiVersion": "triggers.tekton.dev/v1alpha1",
                        "kind": "ClusterInterceptor",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "bitbucket"
                        },
                        "spec": {
                            "clientConfig": {
                                "service": {
                                    "name": "tekton-triggers-core-interceptors",
                                    "namespace": "tekton-pipelines",
                                    "path": "bitbucket"
                                }
                            }
                        }
                    },
                    "apiVersion": "triggers.tekton.dev/v1alpha1",
                    "kind": "ClusterInterceptor",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"triggers.tekton.dev/v1alpha1\",\"kind\":\"ClusterInterceptor\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"bitbucket\"},\"spec\":{\"clientConfig\":{\"service\":{\"name\":\"tekton-triggers-core-interceptors\",\"namespace\":\"tekton-pipelines\",\"path\":\"bitbucket\"}}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:59Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "triggers.tekton.dev/v1alpha1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        ".": {},
                                        "f:address": {
                                            ".": {},
                                            "f:url": {}
                                        }
                                    }
                                },
                                "manager": "controller",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:59Z"
                            },
                            {
                                "apiVersion": "triggers.tekton.dev/v1alpha1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        ".": {},
                                        "f:clientConfig": {
                                            ".": {},
                                            "f:service": {
                                                ".": {},
                                                "f:name": {},
                                                "f:namespace": {},
                                                "f:path": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:59Z"
                            }
                        ],
                        "name": "bitbucket",
                        "resourceVersion": "126188",
                        "uid": "e898ac36-9d54-49ba-807d-1840d845f9a9"
                    },
                    "spec": {
                        "clientConfig": {
                            "service": {
                                "name": "tekton-triggers-core-interceptors",
                                "namespace": "tekton-pipelines",
                                "path": "bitbucket"
                            }
                        }
                    },
                    "status": {
                        "address": {
                            "url": "http://tekton-triggers-core-interceptors.tekton-pipelines.svc:80/bitbucket"
                        }
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ServiceAccount::tekton-pipelines/tekton-dashboard",
                "custom": true,
                "id": "tekton-pipelines/tekton-dashboard",
                "type": "kubernetes:core/v1:ServiceAccount",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "name": "tekton-dashboard",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ServiceAccount",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "dashboard",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-dashboard"
                            },
                            "name": "tekton-dashboard",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"dashboard\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-dashboard\"},\"name\":\"tekton-dashboard\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:06Z",
                        "labels": {
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:secrets": {
                                        ".": {},
                                        "k:{\"name\":\"tekton-dashboard-token-hzr96\"}": {
                                            ".": {},
                                            "f:name": {}
                                        }
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:06Z"
                            },
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:06Z"
                            }
                        ],
                        "name": "tekton-dashboard",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125901",
                        "uid": "fd3309d3-bfcb-4c52-a47c-c31336a70e26"
                    },
                    "secrets": [
                        {
                            "name": "tekton-dashboard-token-hzr96"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:admissionregistration.k8s.io/v1:ValidatingWebhookConfiguration::validation.webhook.pipeline.tekton.dev",
                "custom": true,
                "id": "validation.webhook.pipeline.tekton.dev",
                "type": "kubernetes:admissionregistration.k8s.io/v1:ValidatingWebhookConfiguration",
                "inputs": {
                    "apiVersion": "admissionregistration.k8s.io/v1",
                    "kind": "ValidatingWebhookConfiguration",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0"
                        },
                        "name": "validation.webhook.pipeline.tekton.dev"
                    },
                    "webhooks": [
                        {
                            "admissionReviewVersions": [
                                "v1"
                            ],
                            "clientConfig": {
                                "service": {
                                    "name": "tekton-pipelines-webhook",
                                    "namespace": "tekton-pipelines"
                                }
                            },
                            "failurePolicy": "Fail",
                            "name": "validation.webhook.pipeline.tekton.dev",
                            "sideEffects": "None"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "admissionregistration.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "admissionregistration.k8s.io/v1",
                        "kind": "ValidatingWebhookConfiguration",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "pipeline.tekton.dev/release": "v0.31.0"
                            },
                            "name": "validation.webhook.pipeline.tekton.dev"
                        },
                        "webhooks": [
                            {
                                "admissionReviewVersions": [
                                    "v1"
                                ],
                                "clientConfig": {
                                    "service": {
                                        "name": "tekton-pipelines-webhook",
                                        "namespace": "tekton-pipelines"
                                    }
                                },
                                "failurePolicy": "Fail",
                                "name": "validation.webhook.pipeline.tekton.dev",
                                "sideEffects": "None"
                            }
                        ]
                    },
                    "apiVersion": "admissionregistration.k8s.io/v1",
                    "kind": "ValidatingWebhookConfiguration",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"admissionregistration.k8s.io/v1\",\"kind\":\"ValidatingWebhookConfiguration\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"pipeline.tekton.dev/release\":\"v0.31.0\"},\"name\":\"validation.webhook.pipeline.tekton.dev\"},\"webhooks\":[{\"admissionReviewVersions\":[\"v1\"],\"clientConfig\":{\"service\":{\"name\":\"tekton-pipelines-webhook\",\"namespace\":\"tekton-pipelines\"}},\"failurePolicy\":\"Fail\",\"name\":\"validation.webhook.pipeline.tekton.dev\",\"sideEffects\":\"None\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:07Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "admissionregistration.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:pipeline.tekton.dev/release": {}
                                        }
                                    },
                                    "f:webhooks": {
                                        ".": {},
                                        "k:{\"name\":\"validation.webhook.pipeline.tekton.dev\"}": {
                                            ".": {},
                                            "f:admissionReviewVersions": {},
                                            "f:clientConfig": {
                                                ".": {},
                                                "f:service": {
                                                    ".": {},
                                                    "f:name": {},
                                                    "f:namespace": {},
                                                    "f:port": {}
                                                }
                                            },
                                            "f:failurePolicy": {},
                                            "f:matchPolicy": {},
                                            "f:name": {},
                                            "f:namespaceSelector": {},
                                            "f:objectSelector": {},
                                            "f:sideEffects": {},
                                            "f:timeoutSeconds": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:07Z"
                            }
                        ],
                        "name": "validation.webhook.pipeline.tekton.dev",
                        "resourceVersion": "125906",
                        "uid": "5ce4b1b0-488a-4858-901b-16a91f546189"
                    },
                    "webhooks": [
                        {
                            "admissionReviewVersions": [
                                "v1"
                            ],
                            "clientConfig": {
                                "service": {
                                    "name": "tekton-pipelines-webhook",
                                    "namespace": "tekton-pipelines",
                                    "port": 443
                                }
                            },
                            "failurePolicy": "Fail",
                            "matchPolicy": "Equivalent",
                            "name": "validation.webhook.pipeline.tekton.dev",
                            "namespaceSelector": {},
                            "objectSelector": {},
                            "sideEffects": "None",
                            "timeoutSeconds": 10
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "webhooks": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::tekton-pipelines-webhook-cluster-access",
                "custom": true,
                "id": "tekton-pipelines-webhook-cluster-access",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines-webhook-cluster-access"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "apiextensions.k8s.io"
                            ],
                            "resources": [
                                "customresourcedefinitions",
                                "customresourcedefinitions/status"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "update",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "admissionregistration.k8s.io"
                            ],
                            "resources": [
                                "mutatingwebhookconfigurations",
                                "validatingwebhookconfigurations"
                            ],
                            "verbs": [
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "admissionregistration.k8s.io"
                            ],
                            "resourceNames": [
                                "webhook.pipeline.tekton.dev"
                            ],
                            "resources": [
                                "mutatingwebhookconfigurations"
                            ],
                            "verbs": [
                                "get",
                                "update",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                "admissionregistration.k8s.io"
                            ],
                            "resourceNames": [
                                "validation.webhook.pipeline.tekton.dev",
                                "config.webhook.pipeline.tekton.dev"
                            ],
                            "resources": [
                                "validatingwebhookconfigurations"
                            ],
                            "verbs": [
                                "get",
                                "update",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                "policy"
                            ],
                            "resourceNames": [
                                "tekton-pipelines"
                            ],
                            "resources": [
                                "podsecuritypolicies"
                            ],
                            "verbs": [
                                "use"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "tekton-pipelines"
                            ],
                            "resources": [
                                "namespaces"
                            ],
                            "verbs": [
                                "get"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "tekton-pipelines"
                            ],
                            "resources": [
                                "namespaces/finalizers"
                            ],
                            "verbs": [
                                "update"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines-webhook-cluster-access"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "apiextensions.k8s.io"
                                ],
                                "resources": [
                                    "customresourcedefinitions",
                                    "customresourcedefinitions/status"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "update",
                                    "patch",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "admissionregistration.k8s.io"
                                ],
                                "resources": [
                                    "mutatingwebhookconfigurations",
                                    "validatingwebhookconfigurations"
                                ],
                                "verbs": [
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "admissionregistration.k8s.io"
                                ],
                                "resourceNames": [
                                    "webhook.pipeline.tekton.dev"
                                ],
                                "resources": [
                                    "mutatingwebhookconfigurations"
                                ],
                                "verbs": [
                                    "get",
                                    "update",
                                    "delete"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "admissionregistration.k8s.io"
                                ],
                                "resourceNames": [
                                    "validation.webhook.pipeline.tekton.dev",
                                    "config.webhook.pipeline.tekton.dev"
                                ],
                                "resources": [
                                    "validatingwebhookconfigurations"
                                ],
                                "verbs": [
                                    "get",
                                    "update",
                                    "delete"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "policy"
                                ],
                                "resourceNames": [
                                    "tekton-pipelines"
                                ],
                                "resources": [
                                    "podsecuritypolicies"
                                ],
                                "verbs": [
                                    "use"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resourceNames": [
                                    "tekton-pipelines"
                                ],
                                "resources": [
                                    "namespaces"
                                ],
                                "verbs": [
                                    "get"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resourceNames": [
                                    "tekton-pipelines"
                                ],
                                "resources": [
                                    "namespaces/finalizers"
                                ],
                                "verbs": [
                                    "update"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines-webhook-cluster-access\"},\"rules\":[{\"apiGroups\":[\"apiextensions.k8s.io\"],\"resources\":[\"customresourcedefinitions\",\"customresourcedefinitions/status\"],\"verbs\":[\"get\",\"list\",\"update\",\"patch\",\"watch\"]},{\"apiGroups\":[\"admissionregistration.k8s.io\"],\"resources\":[\"mutatingwebhookconfigurations\",\"validatingwebhookconfigurations\"],\"verbs\":[\"list\",\"watch\"]},{\"apiGroups\":[\"admissionregistration.k8s.io\"],\"resourceNames\":[\"webhook.pipeline.tekton.dev\"],\"resources\":[\"mutatingwebhookconfigurations\"],\"verbs\":[\"get\",\"update\",\"delete\"]},{\"apiGroups\":[\"admissionregistration.k8s.io\"],\"resourceNames\":[\"validation.webhook.pipeline.tekton.dev\",\"config.webhook.pipeline.tekton.dev\"],\"resources\":[\"validatingwebhookconfigurations\"],\"verbs\":[\"get\",\"update\",\"delete\"]},{\"apiGroups\":[\"policy\"],\"resourceNames\":[\"tekton-pipelines\"],\"resources\":[\"podsecuritypolicies\"],\"verbs\":[\"use\"]},{\"apiGroups\":[\"\"],\"resourceNames\":[\"tekton-pipelines\"],\"resources\":[\"namespaces\"],\"verbs\":[\"get\"]},{\"apiGroups\":[\"\"],\"resourceNames\":[\"tekton-pipelines\"],\"resources\":[\"namespaces/finalizers\"],\"verbs\":[\"update\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:08Z",
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:08Z"
                            }
                        ],
                        "name": "tekton-pipelines-webhook-cluster-access",
                        "resourceVersion": "125908",
                        "uid": "97e5e8de-e3ad-424c-995a-67cd85ab2a45"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "apiextensions.k8s.io"
                            ],
                            "resources": [
                                "customresourcedefinitions",
                                "customresourcedefinitions/status"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "update",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "admissionregistration.k8s.io"
                            ],
                            "resources": [
                                "mutatingwebhookconfigurations",
                                "validatingwebhookconfigurations"
                            ],
                            "verbs": [
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "admissionregistration.k8s.io"
                            ],
                            "resourceNames": [
                                "webhook.pipeline.tekton.dev"
                            ],
                            "resources": [
                                "mutatingwebhookconfigurations"
                            ],
                            "verbs": [
                                "get",
                                "update",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                "admissionregistration.k8s.io"
                            ],
                            "resourceNames": [
                                "validation.webhook.pipeline.tekton.dev",
                                "config.webhook.pipeline.tekton.dev"
                            ],
                            "resources": [
                                "validatingwebhookconfigurations"
                            ],
                            "verbs": [
                                "get",
                                "update",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                "policy"
                            ],
                            "resourceNames": [
                                "tekton-pipelines"
                            ],
                            "resources": [
                                "podsecuritypolicies"
                            ],
                            "verbs": [
                                "use"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "tekton-pipelines"
                            ],
                            "resources": [
                                "namespaces"
                            ],
                            "verbs": [
                                "get"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "tekton-pipelines"
                            ],
                            "resources": [
                                "namespaces/finalizers"
                            ],
                            "verbs": [
                                "update"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::tekton-pipelines/tekton-pipelines-webhook-leaderelection",
                "custom": true,
                "id": "tekton-pipelines/tekton-pipelines-webhook-leaderelection",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines-webhook-leaderelection",
                        "namespace": "tekton-pipelines"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-pipelines-leader-election"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-pipelines-webhook",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines-webhook-leaderelection",
                            "namespace": "tekton-pipelines"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "tekton-pipelines-leader-election"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "tekton-pipelines-webhook",
                                "namespace": "tekton-pipelines"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines-webhook-leaderelection\",\"namespace\":\"tekton-pipelines\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"tekton-pipelines-leader-election\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"tekton-pipelines-webhook\",\"namespace\":\"tekton-pipelines\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:20Z",
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:20Z"
                            }
                        ],
                        "name": "tekton-pipelines-webhook-leaderelection",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125943",
                        "uid": "50b46206-b957-4597-80c1-583e3a492720"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-pipelines-leader-election"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-pipelines-webhook",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::tekton-pipelines-controller-tenant-access",
                "custom": true,
                "id": "tekton-pipelines-controller-tenant-access",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines-controller-tenant-access"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "tekton-pipelines-controller-tenant-access"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-pipelines-controller",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines-controller-tenant-access"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "tekton-pipelines-controller-tenant-access"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "tekton-pipelines-controller",
                                "namespace": "tekton-pipelines"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines-controller-tenant-access\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"tekton-pipelines-controller-tenant-access\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"tekton-pipelines-controller\",\"namespace\":\"tekton-pipelines\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:09Z",
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:09Z"
                            }
                        ],
                        "name": "tekton-pipelines-controller-tenant-access",
                        "resourceVersion": "125917",
                        "uid": "dd9e70fa-9db7-492e-980c-bb12070ad5aa"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "tekton-pipelines-controller-tenant-access"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-pipelines-controller",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:policy/v1beta1:PodSecurityPolicy::tekton-triggers",
                "custom": true,
                "id": "tekton-triggers",
                "type": "kubernetes:policy/v1beta1:PodSecurityPolicy",
                "inputs": {
                    "apiVersion": "policy/v1beta1",
                    "kind": "PodSecurityPolicy",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers"
                    },
                    "spec": {
                        "allowPrivilegeEscalation": false,
                        "fsGroup": {
                            "ranges": [
                                {
                                    "max": 65535,
                                    "min": 1
                                }
                            ],
                            "rule": "MustRunAs"
                        },
                        "hostIPC": false,
                        "hostNetwork": false,
                        "hostPID": false,
                        "privileged": false,
                        "runAsUser": {
                            "rule": "MustRunAsNonRoot"
                        },
                        "seLinux": {
                            "rule": "RunAsAny"
                        },
                        "supplementalGroups": {
                            "ranges": [
                                {
                                    "max": 65535,
                                    "min": 1
                                }
                            ],
                            "rule": "MustRunAs"
                        },
                        "volumes": [
                            "emptyDir",
                            "configMap",
                            "secret"
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "policy/v1beta1",
                    "__inputs": {
                        "apiVersion": "policy/v1beta1",
                        "kind": "PodSecurityPolicy",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers"
                        },
                        "spec": {
                            "allowPrivilegeEscalation": false,
                            "fsGroup": {
                                "ranges": [
                                    {
                                        "max": 65535,
                                        "min": 1
                                    }
                                ],
                                "rule": "MustRunAs"
                            },
                            "hostIPC": false,
                            "hostNetwork": false,
                            "hostPID": false,
                            "privileged": false,
                            "runAsUser": {
                                "rule": "MustRunAsNonRoot"
                            },
                            "seLinux": {
                                "rule": "RunAsAny"
                            },
                            "supplementalGroups": {
                                "ranges": [
                                    {
                                        "max": 65535,
                                        "min": 1
                                    }
                                ],
                                "rule": "MustRunAs"
                            },
                            "volumes": [
                                "emptyDir",
                                "configMap",
                                "secret"
                            ]
                        }
                    },
                    "apiVersion": "policy/v1beta1",
                    "kind": "PodSecurityPolicy",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"policy/v1beta1\",\"kind\":\"PodSecurityPolicy\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers\"},\"spec\":{\"allowPrivilegeEscalation\":false,\"fsGroup\":{\"ranges\":[{\"max\":65535,\"min\":1}],\"rule\":\"MustRunAs\"},\"hostIPC\":false,\"hostNetwork\":false,\"hostPID\":false,\"privileged\":false,\"runAsUser\":{\"rule\":\"MustRunAsNonRoot\"},\"seLinux\":{\"rule\":\"RunAsAny\"},\"supplementalGroups\":{\"ranges\":[{\"max\":65535,\"min\":1}],\"rule\":\"MustRunAs\"},\"volumes\":[\"emptyDir\",\"configMap\",\"secret\"]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:46Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "policy/v1beta1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:allowPrivilegeEscalation": {},
                                        "f:fsGroup": {
                                            "f:ranges": {},
                                            "f:rule": {}
                                        },
                                        "f:runAsUser": {
                                            "f:rule": {}
                                        },
                                        "f:seLinux": {
                                            "f:rule": {}
                                        },
                                        "f:supplementalGroups": {
                                            "f:ranges": {},
                                            "f:rule": {}
                                        },
                                        "f:volumes": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:46Z"
                            }
                        ],
                        "name": "tekton-triggers",
                        "resourceVersion": "126114",
                        "uid": "0ebced96-2e40-4132-b95b-74f25c1bf815"
                    },
                    "spec": {
                        "allowPrivilegeEscalation": false,
                        "fsGroup": {
                            "ranges": [
                                {
                                    "max": 65535,
                                    "min": 1
                                }
                            ],
                            "rule": "MustRunAs"
                        },
                        "runAsUser": {
                            "rule": "MustRunAsNonRoot"
                        },
                        "seLinux": {
                            "rule": "RunAsAny"
                        },
                        "supplementalGroups": {
                            "ranges": [
                                {
                                    "max": 65535,
                                    "min": 1
                                }
                            ],
                            "rule": "MustRunAs"
                        },
                        "volumes": [
                            "emptyDir",
                            "configMap",
                            "secret"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:Role::tekton-pipelines/tekton-pipelines-controller",
                "custom": true,
                "id": "tekton-pipelines/tekton-pipelines-controller",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:Role",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines-controller",
                        "namespace": "tekton-pipelines"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "config-logging",
                                "config-observability",
                                "config-artifact-bucket",
                                "config-artifact-pvc",
                                "feature-flags",
                                "config-leader-election",
                                "config-registry-cert"
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get"
                            ]
                        },
                        {
                            "apiGroups": [
                                "policy"
                            ],
                            "resourceNames": [
                                "tekton-pipelines"
                            ],
                            "resources": [
                                "podsecuritypolicies"
                            ],
                            "verbs": [
                                "use"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "Role",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines-controller",
                            "namespace": "tekton-pipelines"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "configmaps"
                                ],
                                "verbs": [
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resourceNames": [
                                    "config-logging",
                                    "config-observability",
                                    "config-artifact-bucket",
                                    "config-artifact-pvc",
                                    "feature-flags",
                                    "config-leader-election",
                                    "config-registry-cert"
                                ],
                                "resources": [
                                    "configmaps"
                                ],
                                "verbs": [
                                    "get"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "policy"
                                ],
                                "resourceNames": [
                                    "tekton-pipelines"
                                ],
                                "resources": [
                                    "podsecuritypolicies"
                                ],
                                "verbs": [
                                    "use"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"Role\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines-controller\",\"namespace\":\"tekton-pipelines\"},\"rules\":[{\"apiGroups\":[\"\"],\"resources\":[\"configmaps\"],\"verbs\":[\"list\",\"watch\"]},{\"apiGroups\":[\"\"],\"resourceNames\":[\"config-logging\",\"config-observability\",\"config-artifact-bucket\",\"config-artifact-pvc\",\"feature-flags\",\"config-leader-election\",\"config-registry-cert\"],\"resources\":[\"configmaps\"],\"verbs\":[\"get\"]},{\"apiGroups\":[\"policy\"],\"resourceNames\":[\"tekton-pipelines\"],\"resources\":[\"podsecuritypolicies\"],\"verbs\":[\"use\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:40Z",
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:40Z"
                            }
                        ],
                        "name": "tekton-pipelines-controller",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125994",
                        "uid": "a5338296-c6dc-4541-a62f-1af0dec7ad52"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "config-logging",
                                "config-observability",
                                "config-artifact-bucket",
                                "config-artifact-pvc",
                                "feature-flags",
                                "config-leader-election",
                                "config-registry-cert"
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get"
                            ]
                        },
                        {
                            "apiGroups": [
                                "policy"
                            ],
                            "resourceNames": [
                                "tekton-pipelines"
                            ],
                            "resources": [
                                "podsecuritypolicies"
                            ],
                            "verbs": [
                                "use"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::tekton-pipelines-webhook-cluster-access",
                "custom": true,
                "id": "tekton-pipelines-webhook-cluster-access",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines-webhook-cluster-access"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "tekton-pipelines-webhook-cluster-access"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-pipelines-webhook",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines-webhook-cluster-access"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "tekton-pipelines-webhook-cluster-access"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "tekton-pipelines-webhook",
                                "namespace": "tekton-pipelines"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines-webhook-cluster-access\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"tekton-pipelines-webhook-cluster-access\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"tekton-pipelines-webhook\",\"namespace\":\"tekton-pipelines\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:12Z",
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:12Z"
                            }
                        ],
                        "name": "tekton-pipelines-webhook-cluster-access",
                        "resourceVersion": "125930",
                        "uid": "884fb7f2-9c7f-45ec-9ae9-766b3a69b71f"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "tekton-pipelines-webhook-cluster-access"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-pipelines-webhook",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::tekton-pipelines/tekton-dashboard-info",
                "custom": true,
                "id": "tekton-pipelines/tekton-dashboard-info",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "name": "tekton-dashboard-info",
                        "namespace": "tekton-pipelines"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-dashboard-info"
                    },
                    "subjects": [
                        {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Group",
                            "name": "system:authenticated"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-dashboard"
                            },
                            "name": "tekton-dashboard-info",
                            "namespace": "tekton-pipelines"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "tekton-dashboard-info"
                        },
                        "subjects": [
                            {
                                "apiGroup": "rbac.authorization.k8s.io",
                                "kind": "Group",
                                "name": "system:authenticated"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-dashboard\"},\"name\":\"tekton-dashboard-info\",\"namespace\":\"tekton-pipelines\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"tekton-dashboard-info\"},\"subjects\":[{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Group\",\"name\":\"system:authenticated\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:44Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:44Z"
                            }
                        ],
                        "name": "tekton-dashboard-info",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126066",
                        "uid": "f992d0a1-9689-40de-99e0-740ecb026e7b"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-dashboard-info"
                    },
                    "subjects": [
                        {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Group",
                            "name": "system:authenticated"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::tekton-pipelines/tekton-triggers-core-interceptors",
                "custom": true,
                "id": "tekton-pipelines/tekton-triggers-core-interceptors",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-core-interceptors",
                        "namespace": "tekton-pipelines"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-triggers-core-interceptors"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-triggers-core-interceptors",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-core-interceptors",
                            "namespace": "tekton-pipelines"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "tekton-triggers-core-interceptors"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "tekton-triggers-core-interceptors",
                                "namespace": "tekton-pipelines"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-core-interceptors\",\"namespace\":\"tekton-pipelines\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"tekton-triggers-core-interceptors\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"tekton-triggers-core-interceptors\",\"namespace\":\"tekton-pipelines\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:03Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:03Z"
                            }
                        ],
                        "name": "tekton-triggers-core-interceptors",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125876",
                        "uid": "2067c1f8-5ac8-4088-b513-0e094383d1e4"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-triggers-core-interceptors"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-triggers-core-interceptors",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::tekton-pipelines/tekton-pipelines-controller",
                "custom": true,
                "id": "tekton-pipelines/tekton-pipelines-controller",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines-controller",
                        "namespace": "tekton-pipelines"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-pipelines-controller"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-pipelines-controller",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines-controller",
                            "namespace": "tekton-pipelines"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "tekton-pipelines-controller"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "tekton-pipelines-controller",
                                "namespace": "tekton-pipelines"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines-controller\",\"namespace\":\"tekton-pipelines\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"tekton-pipelines-controller\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"tekton-pipelines-controller\",\"namespace\":\"tekton-pipelines\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:08Z",
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:08Z"
                            }
                        ],
                        "name": "tekton-pipelines-controller",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125909",
                        "uid": "f0f0db54-7c12-4ab8-9d03-cbdadfd8da33"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-pipelines-controller"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-pipelines-controller",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::tekton-triggers-core-interceptors",
                "custom": true,
                "id": "tekton-triggers-core-interceptors",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-core-interceptors"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-core-interceptors"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "secrets"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-core-interceptors\"},\"rules\":[{\"apiGroups\":[\"\"],\"resources\":[\"secrets\"],\"verbs\":[\"get\",\"list\",\"watch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:44Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:44Z"
                            }
                        ],
                        "name": "tekton-triggers-core-interceptors",
                        "resourceVersion": "126063",
                        "uid": "ffa35998-a250-46bd-8700-3836152aeb0c"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::tekton-pipelines/tekton-pipelines-controller-leaderelection",
                "custom": true,
                "id": "tekton-pipelines/tekton-pipelines-controller-leaderelection",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines-controller-leaderelection",
                        "namespace": "tekton-pipelines"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-pipelines-leader-election"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-pipelines-controller",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines-controller-leaderelection",
                            "namespace": "tekton-pipelines"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "tekton-pipelines-leader-election"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "tekton-pipelines-controller",
                                "namespace": "tekton-pipelines"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines-controller-leaderelection\",\"namespace\":\"tekton-pipelines\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"tekton-pipelines-leader-election\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"tekton-pipelines-controller\",\"namespace\":\"tekton-pipelines\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:20Z",
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:20Z"
                            }
                        ],
                        "name": "tekton-pipelines-controller-leaderelection",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125942",
                        "uid": "869a2a62-2d25-4497-9e13-f75b8dbd9e39"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-pipelines-leader-election"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-pipelines-controller",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::tekton-dashboard-backend",
                "custom": true,
                "id": "tekton-dashboard-backend",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "name": "tekton-dashboard-backend"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "tekton-dashboard-backend"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-dashboard",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "dashboard",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-dashboard"
                            },
                            "name": "tekton-dashboard-backend"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "tekton-dashboard-backend"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "tekton-dashboard",
                                "namespace": "tekton-pipelines"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"dashboard\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-dashboard\"},\"name\":\"tekton-dashboard-backend\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"tekton-dashboard-backend\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"tekton-dashboard\",\"namespace\":\"tekton-pipelines\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:46:01Z",
                        "labels": {
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:46:01Z"
                            }
                        ],
                        "name": "tekton-dashboard-backend",
                        "resourceVersion": "126255",
                        "uid": "30892735-4a45-4344-b34d-38cce9743f6c"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "tekton-dashboard-backend"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-dashboard",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ServiceAccount::tekton-pipelines/tekton-pipelines-controller",
                "custom": true,
                "id": "tekton-pipelines/tekton-pipelines-controller",
                "type": "kubernetes:core/v1:ServiceAccount",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines-controller",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ServiceAccount",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines-controller",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines-controller\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:59Z",
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:secrets": {
                                        ".": {},
                                        "k:{\"name\":\"tekton-pipelines-controller-token-fbsh2\"}": {
                                            ".": {},
                                            "f:name": {}
                                        }
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:59Z"
                            },
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:59Z"
                            }
                        ],
                        "name": "tekton-pipelines-controller",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126179",
                        "uid": "80aa7fb4-540b-4656-98d1-d1bef06a7b4c"
                    },
                    "secrets": [
                        {
                            "name": "tekton-pipelines-controller-token-fbsh2"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:triggers.tekton.dev/v1alpha1:ClusterInterceptor::github",
                "custom": true,
                "id": "github",
                "type": "kubernetes:triggers.tekton.dev/v1alpha1:ClusterInterceptor",
                "inputs": {
                    "apiVersion": "triggers.tekton.dev/v1alpha1",
                    "kind": "ClusterInterceptor",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "github"
                    },
                    "spec": {
                        "clientConfig": {
                            "service": {
                                "name": "tekton-triggers-core-interceptors",
                                "namespace": "tekton-pipelines",
                                "path": "github"
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "triggers.tekton.dev/v1alpha1",
                    "__inputs": {
                        "apiVersion": "triggers.tekton.dev/v1alpha1",
                        "kind": "ClusterInterceptor",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "github"
                        },
                        "spec": {
                            "clientConfig": {
                                "service": {
                                    "name": "tekton-triggers-core-interceptors",
                                    "namespace": "tekton-pipelines",
                                    "path": "github"
                                }
                            }
                        }
                    },
                    "apiVersion": "triggers.tekton.dev/v1alpha1",
                    "kind": "ClusterInterceptor",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"triggers.tekton.dev/v1alpha1\",\"kind\":\"ClusterInterceptor\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"github\"},\"spec\":{\"clientConfig\":{\"service\":{\"name\":\"tekton-triggers-core-interceptors\",\"namespace\":\"tekton-pipelines\",\"path\":\"github\"}}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:46:00Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "triggers.tekton.dev/v1alpha1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        ".": {},
                                        "f:address": {
                                            ".": {},
                                            "f:url": {}
                                        }
                                    }
                                },
                                "manager": "controller",
                                "operation": "Update",
                                "time": "2021-12-19T03:46:00Z"
                            },
                            {
                                "apiVersion": "triggers.tekton.dev/v1alpha1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        ".": {},
                                        "f:clientConfig": {
                                            ".": {},
                                            "f:service": {
                                                ".": {},
                                                "f:name": {},
                                                "f:namespace": {},
                                                "f:path": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:46:00Z"
                            }
                        ],
                        "name": "github",
                        "resourceVersion": "126191",
                        "uid": "0e078b36-1ba9-49e9-a44e-639de1145b9f"
                    },
                    "spec": {
                        "clientConfig": {
                            "service": {
                                "name": "tekton-triggers-core-interceptors",
                                "namespace": "tekton-pipelines",
                                "path": "github"
                            }
                        }
                    },
                    "status": {
                        "address": {
                            "url": "http://tekton-triggers-core-interceptors.tekton-pipelines.svc:80/github"
                        }
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ServiceAccount::tekton-pipelines/tekton-pipelines-webhook",
                "custom": true,
                "id": "tekton-pipelines/tekton-pipelines-webhook",
                "type": "kubernetes:core/v1:ServiceAccount",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines-webhook",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ServiceAccount",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines-webhook",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines-webhook\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:59Z",
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:secrets": {
                                        ".": {},
                                        "k:{\"name\":\"tekton-pipelines-webhook-token-zs4ck\"}": {
                                            ".": {},
                                            "f:name": {}
                                        }
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:59Z"
                            },
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:59Z"
                            }
                        ],
                        "name": "tekton-pipelines-webhook",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126186",
                        "uid": "1306fa3c-85f4-4aba-a00c-e3db6b9913a9"
                    },
                    "secrets": [
                        {
                            "name": "tekton-pipelines-webhook-token-zs4ck"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apps/v1:Deployment::tekton-pipelines/tekton-dashboard",
                "custom": true,
                "id": "tekton-pipelines/tekton-dashboard",
                "type": "kubernetes:apps/v1:Deployment",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "labels": {
                            "app": "tekton-dashboard",
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "dashboard",
                            "app.kubernetes.io/part-of": "tekton-dashboard",
                            "app.kubernetes.io/version": "v0.23.0",
                            "dashboard.tekton.dev/release": "v0.23.0",
                            "version": "v0.23.0"
                        },
                        "name": "tekton-dashboard",
                        "namespace": "tekton-pipelines"
                    },
                    "spec": {
                        "replicas": 1,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/component": "dashboard",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "dashboard",
                                "app.kubernetes.io/part-of": "tekton-dashboard"
                            }
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "tekton-dashboard",
                                    "app.kubernetes.io/component": "dashboard",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "dashboard",
                                    "app.kubernetes.io/part-of": "tekton-dashboard",
                                    "app.kubernetes.io/version": "v0.23.0"
                                },
                                "name": "tekton-dashboard"
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "args": [
                                            "--port=9097",
                                            "--logout-url=",
                                            "--pipelines-namespace=tekton-pipelines",
                                            "--triggers-namespace=tekton-pipelines",
                                            "--read-only=false",
                                            "--log-level=info",
                                            "--log-format=json",
                                            "--namespace=",
                                            "--stream-logs=true",
                                            "--external-logs="
                                        ],
                                        "env": [
                                            {
                                                "name": "INSTALLED_NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            }
                                        ],
                                        "image": "gcr.io/tekton-releases/github.com/tektoncd/dashboard/cmd/dashboard:v0.23.0@sha256:4f70cd5f10bb6c8594b7810cf1fd8a8950d535ef0bb95e2c5f214a620646d720",
                                        "livenessProbe": {
                                            "httpGet": {
                                                "path": "/health",
                                                "port": 9097
                                            }
                                        },
                                        "name": "tekton-dashboard",
                                        "ports": [
                                            {
                                                "containerPort": 9097
                                            }
                                        ],
                                        "readinessProbe": {
                                            "httpGet": {
                                                "path": "/readiness",
                                                "port": 9097
                                            }
                                        }
                                    }
                                ],
                                "nodeSelector": {
                                    "kubernetes.io/os": "linux"
                                },
                                "securityContext": {
                                    "runAsNonRoot": true,
                                    "runAsUser": 65532
                                },
                                "serviceAccountName": "tekton-dashboard",
                                "volumes": []
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "metadata": {
                            "labels": {
                                "app": "tekton-dashboard",
                                "app.kubernetes.io/component": "dashboard",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "dashboard",
                                "app.kubernetes.io/part-of": "tekton-dashboard",
                                "app.kubernetes.io/version": "v0.23.0",
                                "dashboard.tekton.dev/release": "v0.23.0",
                                "version": "v0.23.0"
                            },
                            "name": "tekton-dashboard",
                            "namespace": "tekton-pipelines"
                        },
                        "spec": {
                            "replicas": 1,
                            "selector": {
                                "matchLabels": {
                                    "app.kubernetes.io/component": "dashboard",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "dashboard",
                                    "app.kubernetes.io/part-of": "tekton-dashboard"
                                }
                            },
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "app": "tekton-dashboard",
                                        "app.kubernetes.io/component": "dashboard",
                                        "app.kubernetes.io/instance": "default",
                                        "app.kubernetes.io/name": "dashboard",
                                        "app.kubernetes.io/part-of": "tekton-dashboard",
                                        "app.kubernetes.io/version": "v0.23.0"
                                    },
                                    "name": "tekton-dashboard"
                                },
                                "spec": {
                                    "containers": [
                                        {
                                            "args": [
                                                "--port=9097",
                                                "--logout-url=",
                                                "--pipelines-namespace=tekton-pipelines",
                                                "--triggers-namespace=tekton-pipelines",
                                                "--read-only=false",
                                                "--log-level=info",
                                                "--log-format=json",
                                                "--namespace=",
                                                "--stream-logs=true",
                                                "--external-logs="
                                            ],
                                            "env": [
                                                {
                                                    "name": "INSTALLED_NAMESPACE",
                                                    "valueFrom": {
                                                        "fieldRef": {
                                                            "fieldPath": "metadata.namespace"
                                                        }
                                                    }
                                                }
                                            ],
                                            "image": "gcr.io/tekton-releases/github.com/tektoncd/dashboard/cmd/dashboard:v0.23.0@sha256:4f70cd5f10bb6c8594b7810cf1fd8a8950d535ef0bb95e2c5f214a620646d720",
                                            "livenessProbe": {
                                                "httpGet": {
                                                    "path": "/health",
                                                    "port": 9097
                                                }
                                            },
                                            "name": "tekton-dashboard",
                                            "ports": [
                                                {
                                                    "containerPort": 9097
                                                }
                                            ],
                                            "readinessProbe": {
                                                "httpGet": {
                                                    "path": "/readiness",
                                                    "port": 9097
                                                }
                                            }
                                        }
                                    ],
                                    "nodeSelector": {
                                        "kubernetes.io/os": "linux"
                                    },
                                    "securityContext": {
                                        "runAsNonRoot": true,
                                        "runAsUser": 65532
                                    },
                                    "serviceAccountName": "tekton-dashboard",
                                    "volumes": []
                                }
                            }
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "annotations": {
                            "deployment.kubernetes.io/revision": "1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app\":\"tekton-dashboard\",\"app.kubernetes.io/component\":\"dashboard\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"dashboard\",\"app.kubernetes.io/part-of\":\"tekton-dashboard\",\"app.kubernetes.io/version\":\"v0.23.0\",\"dashboard.tekton.dev/release\":\"v0.23.0\",\"version\":\"v0.23.0\"},\"name\":\"tekton-dashboard\",\"namespace\":\"tekton-pipelines\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app.kubernetes.io/component\":\"dashboard\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"dashboard\",\"app.kubernetes.io/part-of\":\"tekton-dashboard\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"tekton-dashboard\",\"app.kubernetes.io/component\":\"dashboard\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"dashboard\",\"app.kubernetes.io/part-of\":\"tekton-dashboard\",\"app.kubernetes.io/version\":\"v0.23.0\"},\"name\":\"tekton-dashboard\"},\"spec\":{\"containers\":[{\"args\":[\"--port=9097\",\"--logout-url=\",\"--pipelines-namespace=tekton-pipelines\",\"--triggers-namespace=tekton-pipelines\",\"--read-only=false\",\"--log-level=info\",\"--log-format=json\",\"--namespace=\",\"--stream-logs=true\",\"--external-logs=\"],\"env\":[{\"name\":\"INSTALLED_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}}],\"image\":\"gcr.io/tekton-releases/github.com/tektoncd/dashboard/cmd/dashboard:v0.23.0@sha256:4f70cd5f10bb6c8594b7810cf1fd8a8950d535ef0bb95e2c5f214a620646d720\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/health\",\"port\":9097}},\"name\":\"tekton-dashboard\",\"ports\":[{\"containerPort\":9097}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/readiness\",\"port\":9097}}}],\"nodeSelector\":{\"kubernetes.io/os\":\"linux\"},\"securityContext\":{\"runAsNonRoot\":true,\"runAsUser\":65532},\"serviceAccountName\":\"tekton-dashboard\",\"volumes\":[]}}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:46:00Z",
                        "generation": 1,
                        "labels": {
                            "app": "tekton-dashboard",
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "dashboard",
                            "app.kubernetes.io/part-of": "tekton-dashboard",
                            "app.kubernetes.io/version": "v0.23.0",
                            "dashboard.tekton.dev/release": "v0.23.0",
                            "version": "v0.23.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:dashboard.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:progressDeadlineSeconds": {},
                                        "f:replicas": {},
                                        "f:revisionHistoryLimit": {},
                                        "f:selector": {},
                                        "f:strategy": {
                                            "f:rollingUpdate": {
                                                ".": {},
                                                "f:maxSurge": {},
                                                "f:maxUnavailable": {}
                                            },
                                            "f:type": {}
                                        },
                                        "f:template": {
                                            "f:metadata": {
                                                "f:labels": {
                                                    ".": {},
                                                    "f:app": {},
                                                    "f:app.kubernetes.io/component": {},
                                                    "f:app.kubernetes.io/instance": {},
                                                    "f:app.kubernetes.io/name": {},
                                                    "f:app.kubernetes.io/part-of": {},
                                                    "f:app.kubernetes.io/version": {}
                                                },
                                                "f:name": {}
                                            },
                                            "f:spec": {
                                                "f:containers": {
                                                    "k:{\"name\":\"tekton-dashboard\"}": {
                                                        ".": {},
                                                        "f:args": {},
                                                        "f:env": {
                                                            ".": {},
                                                            "k:{\"name\":\"INSTALLED_NAMESPACE\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:fieldRef": {
                                                                        ".": {},
                                                                        "f:apiVersion": {},
                                                                        "f:fieldPath": {}
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "f:image": {},
                                                        "f:imagePullPolicy": {},
                                                        "f:livenessProbe": {
                                                            ".": {},
                                                            "f:failureThreshold": {},
                                                            "f:httpGet": {
                                                                ".": {},
                                                                "f:path": {},
                                                                "f:port": {},
                                                                "f:scheme": {}
                                                            },
                                                            "f:periodSeconds": {},
                                                            "f:successThreshold": {},
                                                            "f:timeoutSeconds": {}
                                                        },
                                                        "f:name": {},
                                                        "f:ports": {
                                                            ".": {},
                                                            "k:{\"containerPort\":9097,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:protocol": {}
                                                            }
                                                        },
                                                        "f:readinessProbe": {
                                                            ".": {},
                                                            "f:failureThreshold": {},
                                                            "f:httpGet": {
                                                                ".": {},
                                                                "f:path": {},
                                                                "f:port": {},
                                                                "f:scheme": {}
                                                            },
                                                            "f:periodSeconds": {},
                                                            "f:successThreshold": {},
                                                            "f:timeoutSeconds": {}
                                                        },
                                                        "f:resources": {},
                                                        "f:terminationMessagePath": {},
                                                        "f:terminationMessagePolicy": {}
                                                    }
                                                },
                                                "f:dnsPolicy": {},
                                                "f:nodeSelector": {
                                                    ".": {},
                                                    "f:kubernetes.io/os": {}
                                                },
                                                "f:restartPolicy": {},
                                                "f:schedulerName": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:runAsNonRoot": {},
                                                    "f:runAsUser": {}
                                                },
                                                "f:serviceAccount": {},
                                                "f:serviceAccountName": {},
                                                "f:terminationGracePeriodSeconds": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:46:00Z"
                            },
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            "f:deployment.kubernetes.io/revision": {}
                                        }
                                    },
                                    "f:status": {
                                        "f:availableReplicas": {},
                                        "f:conditions": {
                                            ".": {},
                                            "k:{\"type\":\"Available\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"Progressing\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:observedGeneration": {},
                                        "f:readyReplicas": {},
                                        "f:replicas": {},
                                        "f:updatedReplicas": {}
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T03:46:07Z"
                            }
                        ],
                        "name": "tekton-dashboard",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126365",
                        "uid": "7ceba153-d25a-4c90-937e-e2c630d8ac4c"
                    },
                    "spec": {
                        "progressDeadlineSeconds": 600,
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/component": "dashboard",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "dashboard",
                                "app.kubernetes.io/part-of": "tekton-dashboard"
                            }
                        },
                        "strategy": {
                            "rollingUpdate": {
                                "maxSurge": "25%",
                                "maxUnavailable": "25%"
                            },
                            "type": "RollingUpdate"
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "tekton-dashboard",
                                    "app.kubernetes.io/component": "dashboard",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "dashboard",
                                    "app.kubernetes.io/part-of": "tekton-dashboard",
                                    "app.kubernetes.io/version": "v0.23.0"
                                },
                                "name": "tekton-dashboard"
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "args": [
                                            "--port=9097",
                                            "--logout-url=",
                                            "--pipelines-namespace=tekton-pipelines",
                                            "--triggers-namespace=tekton-pipelines",
                                            "--read-only=false",
                                            "--log-level=info",
                                            "--log-format=json",
                                            "--namespace=",
                                            "--stream-logs=true",
                                            "--external-logs="
                                        ],
                                        "env": [
                                            {
                                                "name": "INSTALLED_NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "apiVersion": "v1",
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            }
                                        ],
                                        "image": "gcr.io/tekton-releases/github.com/tektoncd/dashboard/cmd/dashboard:v0.23.0@sha256:4f70cd5f10bb6c8594b7810cf1fd8a8950d535ef0bb95e2c5f214a620646d720",
                                        "imagePullPolicy": "IfNotPresent",
                                        "livenessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/health",
                                                "port": 9097,
                                                "scheme": "HTTP"
                                            },
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 1
                                        },
                                        "name": "tekton-dashboard",
                                        "ports": [
                                            {
                                                "containerPort": 9097,
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/readiness",
                                                "port": 9097,
                                                "scheme": "HTTP"
                                            },
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 1
                                        },
                                        "resources": {},
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File"
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "nodeSelector": {
                                    "kubernetes.io/os": "linux"
                                },
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {
                                    "runAsNonRoot": true,
                                    "runAsUser": 65532
                                },
                                "serviceAccount": "tekton-dashboard",
                                "serviceAccountName": "tekton-dashboard",
                                "terminationGracePeriodSeconds": 30
                            }
                        }
                    },
                    "status": {
                        "availableReplicas": 1,
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:46:07Z",
                                "lastUpdateTime": "2021-12-19T03:46:07Z",
                                "message": "Deployment has minimum availability.",
                                "reason": "MinimumReplicasAvailable",
                                "status": "True",
                                "type": "Available"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:46:00Z",
                                "lastUpdateTime": "2021-12-19T03:46:07Z",
                                "message": "ReplicaSet \"tekton-dashboard-7487777d44\" has successfully progressed.",
                                "reason": "NewReplicaSetAvailable",
                                "status": "True",
                                "type": "Progressing"
                            }
                        ],
                        "observedGeneration": 1,
                        "readyReplicas": 1,
                        "replicas": 1,
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::extensions.dashboard.tekton.dev",
                "custom": true,
                "id": "extensions.dashboard.tekton.dev",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "name": "extensions.dashboard.tekton.dev"
                    },
                    "spec": {
                        "group": "dashboard.tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-dashboard"
                            ],
                            "kind": "Extension",
                            "plural": "extensions",
                            "shortNames": [
                                "ext",
                                "exts"
                            ]
                        },
                        "preserveUnknownFields": false,
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".spec.apiVersion",
                                        "name": "API version",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.name",
                                        "name": "Kind",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.displayname",
                                        "name": "Display name",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "dashboard",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-dashboard"
                            },
                            "name": "extensions.dashboard.tekton.dev"
                        },
                        "spec": {
                            "group": "dashboard.tekton.dev",
                            "names": {
                                "categories": [
                                    "tekton",
                                    "tekton-dashboard"
                                ],
                                "kind": "Extension",
                                "plural": "extensions",
                                "shortNames": [
                                    "ext",
                                    "exts"
                                ]
                            },
                            "preserveUnknownFields": false,
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "additionalPrinterColumns": [
                                        {
                                            "jsonPath": ".spec.apiVersion",
                                            "name": "API version",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".spec.name",
                                            "name": "Kind",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".spec.displayname",
                                            "name": "Display name",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".metadata.creationTimestamp",
                                            "name": "Age",
                                            "type": "date"
                                        }
                                    ],
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {
                                        "status": {}
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"dashboard\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-dashboard\"},\"name\":\"extensions.dashboard.tekton.dev\"},\"spec\":{\"group\":\"dashboard.tekton.dev\",\"names\":{\"categories\":[\"tekton\",\"tekton-dashboard\"],\"kind\":\"Extension\",\"plural\":\"extensions\",\"shortNames\":[\"ext\",\"exts\"]},\"preserveUnknownFields\":false,\"scope\":\"Namespaced\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".spec.apiVersion\",\"name\":\"API version\",\"type\":\"string\"},{\"jsonPath\":\".spec.name\",\"name\":\"Kind\",\"type\":\"string\"},{\"jsonPath\":\".spec.displayname\",\"name\":\"Display name\",\"type\":\"string\"},{\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"}],\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:06Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:06Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:06Z"
                            }
                        ],
                        "name": "extensions.dashboard.tekton.dev",
                        "resourceVersion": "125895",
                        "uid": "7bf210cc-b613-47a7-ba01-48c03dcf1c82"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "dashboard.tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-dashboard"
                            ],
                            "kind": "Extension",
                            "listKind": "ExtensionList",
                            "plural": "extensions",
                            "shortNames": [
                                "ext",
                                "exts"
                            ],
                            "singular": "extension"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".spec.apiVersion",
                                        "name": "API version",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.name",
                                        "name": "Kind",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.displayname",
                                        "name": "Display name",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "categories": [
                                "tekton",
                                "tekton-dashboard"
                            ],
                            "kind": "Extension",
                            "listKind": "ExtensionList",
                            "plural": "extensions",
                            "shortNames": [
                                "ext",
                                "exts"
                            ],
                            "singular": "extension"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:45:06Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:45:06Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1alpha1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::triggers.triggers.tekton.dev",
                "custom": true,
                "id": "triggers.triggers.tekton.dev",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "name": "triggers.triggers.tekton.dev"
                    },
                    "spec": {
                        "group": "triggers.tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "Trigger",
                            "plural": "triggers",
                            "shortNames": [
                                "tri"
                            ],
                            "singular": "trigger"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "triggers.tekton.dev/release": "v0.17.1",
                                "version": "v0.17.1"
                            },
                            "name": "triggers.triggers.tekton.dev"
                        },
                        "spec": {
                            "group": "triggers.tekton.dev",
                            "names": {
                                "categories": [
                                    "tekton",
                                    "tekton-triggers"
                                ],
                                "kind": "Trigger",
                                "plural": "triggers",
                                "shortNames": [
                                    "tri"
                                ],
                                "singular": "trigger"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "name": "v1beta1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {
                                        "status": {}
                                    }
                                },
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": false,
                                    "subresources": {
                                        "status": {}
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"triggers.tekton.dev/release\":\"v0.17.1\",\"version\":\"v0.17.1\"},\"name\":\"triggers.triggers.tekton.dev\"},\"spec\":{\"group\":\"triggers.tekton.dev\",\"names\":{\"categories\":[\"tekton\",\"tekton-triggers\"],\"kind\":\"Trigger\",\"plural\":\"triggers\",\"shortNames\":[\"tri\"],\"singular\":\"trigger\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1beta1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}},{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":false,\"subresources\":{\"status\":{}}}]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:12Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:12Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:triggers.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:12Z"
                            }
                        ],
                        "name": "triggers.triggers.tekton.dev",
                        "resourceVersion": "125933",
                        "uid": "d84e87d5-475b-4951-bac9-95338fcad36e"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "triggers.tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "Trigger",
                            "listKind": "TriggerList",
                            "plural": "triggers",
                            "shortNames": [
                                "tri"
                            ],
                            "singular": "trigger"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "Trigger",
                            "listKind": "TriggerList",
                            "plural": "triggers",
                            "shortNames": [
                                "tri"
                            ],
                            "singular": "trigger"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:45:12Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:45:12Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1beta1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::tekton-triggers-admin",
                "custom": true,
                "id": "tekton-triggers-admin",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-admin"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps",
                                "services",
                                "events"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "apps"
                            ],
                            "resources": [
                                "deployments",
                                "deployments/finalizers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "admissionregistration.k8s.io"
                            ],
                            "resources": [
                                "mutatingwebhookconfigurations",
                                "validatingwebhookconfigurations"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "clustertriggerbindings",
                                "clusterinterceptors",
                                "eventlisteners",
                                "triggerbindings",
                                "triggertemplates",
                                "triggers",
                                "eventlisteners/finalizers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "clustertriggerbindings/status",
                                "clusterinterceptors/status",
                                "eventlisteners/status",
                                "triggerbindings/status",
                                "triggertemplates/status",
                                "triggers/status"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "coordination.k8s.io"
                            ],
                            "resources": [
                                "leases"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "serving.knative.dev"
                            ],
                            "resources": [
                                "*",
                                "*/status",
                                "*/finalizers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "deletecollection",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "tekton-pipelines"
                            ],
                            "resources": [
                                "namespaces"
                            ],
                            "verbs": [
                                "get"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-admin"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "configmaps",
                                    "services",
                                    "events"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "create",
                                    "update",
                                    "delete",
                                    "patch",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "apps"
                                ],
                                "resources": [
                                    "deployments",
                                    "deployments/finalizers"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "create",
                                    "update",
                                    "delete",
                                    "patch",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "admissionregistration.k8s.io"
                                ],
                                "resources": [
                                    "mutatingwebhookconfigurations",
                                    "validatingwebhookconfigurations"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "create",
                                    "update",
                                    "delete",
                                    "patch",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "triggers.tekton.dev"
                                ],
                                "resources": [
                                    "clustertriggerbindings",
                                    "clusterinterceptors",
                                    "eventlisteners",
                                    "triggerbindings",
                                    "triggertemplates",
                                    "triggers",
                                    "eventlisteners/finalizers"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "create",
                                    "update",
                                    "delete",
                                    "patch",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "triggers.tekton.dev"
                                ],
                                "resources": [
                                    "clustertriggerbindings/status",
                                    "clusterinterceptors/status",
                                    "eventlisteners/status",
                                    "triggerbindings/status",
                                    "triggertemplates/status",
                                    "triggers/status"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "create",
                                    "update",
                                    "delete",
                                    "patch",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "coordination.k8s.io"
                                ],
                                "resources": [
                                    "leases"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "create",
                                    "update",
                                    "delete",
                                    "patch",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "serving.knative.dev"
                                ],
                                "resources": [
                                    "*",
                                    "*/status",
                                    "*/finalizers"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "create",
                                    "update",
                                    "delete",
                                    "deletecollection",
                                    "patch",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resourceNames": [
                                    "tekton-pipelines"
                                ],
                                "resources": [
                                    "namespaces"
                                ],
                                "verbs": [
                                    "get"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-admin\"},\"rules\":[{\"apiGroups\":[\"\"],\"resources\":[\"configmaps\",\"services\",\"events\"],\"verbs\":[\"get\",\"list\",\"create\",\"update\",\"delete\",\"patch\",\"watch\"]},{\"apiGroups\":[\"apps\"],\"resources\":[\"deployments\",\"deployments/finalizers\"],\"verbs\":[\"get\",\"list\",\"create\",\"update\",\"delete\",\"patch\",\"watch\"]},{\"apiGroups\":[\"admissionregistration.k8s.io\"],\"resources\":[\"mutatingwebhookconfigurations\",\"validatingwebhookconfigurations\"],\"verbs\":[\"get\",\"list\",\"create\",\"update\",\"delete\",\"patch\",\"watch\"]},{\"apiGroups\":[\"triggers.tekton.dev\"],\"resources\":[\"clustertriggerbindings\",\"clusterinterceptors\",\"eventlisteners\",\"triggerbindings\",\"triggertemplates\",\"triggers\",\"eventlisteners/finalizers\"],\"verbs\":[\"get\",\"list\",\"create\",\"update\",\"delete\",\"patch\",\"watch\"]},{\"apiGroups\":[\"triggers.tekton.dev\"],\"resources\":[\"clustertriggerbindings/status\",\"clusterinterceptors/status\",\"eventlisteners/status\",\"triggerbindings/status\",\"triggertemplates/status\",\"triggers/status\"],\"verbs\":[\"get\",\"list\",\"create\",\"update\",\"delete\",\"patch\",\"watch\"]},{\"apiGroups\":[\"coordination.k8s.io\"],\"resources\":[\"leases\"],\"verbs\":[\"get\",\"list\",\"create\",\"update\",\"delete\",\"patch\",\"watch\"]},{\"apiGroups\":[\"serving.knative.dev\"],\"resources\":[\"*\",\"*/status\",\"*/finalizers\"],\"verbs\":[\"get\",\"list\",\"create\",\"update\",\"delete\",\"deletecollection\",\"patch\",\"watch\"]},{\"apiGroups\":[\"\"],\"resourceNames\":[\"tekton-pipelines\"],\"resources\":[\"namespaces\"],\"verbs\":[\"get\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:30Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:30Z"
                            }
                        ],
                        "name": "tekton-triggers-admin",
                        "resourceVersion": "125966",
                        "uid": "e2b54e17-a43e-4cc9-96bf-c3b8922c1bb9"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps",
                                "services",
                                "events"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "apps"
                            ],
                            "resources": [
                                "deployments",
                                "deployments/finalizers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "admissionregistration.k8s.io"
                            ],
                            "resources": [
                                "mutatingwebhookconfigurations",
                                "validatingwebhookconfigurations"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "clustertriggerbindings",
                                "clusterinterceptors",
                                "eventlisteners",
                                "triggerbindings",
                                "triggertemplates",
                                "triggers",
                                "eventlisteners/finalizers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "clustertriggerbindings/status",
                                "clusterinterceptors/status",
                                "eventlisteners/status",
                                "triggerbindings/status",
                                "triggertemplates/status",
                                "triggers/status"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "coordination.k8s.io"
                            ],
                            "resources": [
                                "leases"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "serving.knative.dev"
                            ],
                            "resources": [
                                "*",
                                "*/status",
                                "*/finalizers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "create",
                                "update",
                                "delete",
                                "deletecollection",
                                "patch",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "tekton-pipelines"
                            ],
                            "resources": [
                                "namespaces"
                            ],
                            "verbs": [
                                "get"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::tekton-triggers-eventlistener-roles",
                "custom": true,
                "id": "tekton-triggers-eventlistener-roles",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "name": "tekton-triggers-eventlistener-roles"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "eventlisteners",
                                "triggerbindings",
                                "triggertemplates",
                                "triggers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "pipelineruns",
                                "pipelineresources",
                                "taskruns"
                            ],
                            "verbs": [
                                "create"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "serviceaccounts"
                            ],
                            "verbs": [
                                "impersonate"
                            ]
                        },
                        {
                            "apiGroups": [
                                "policy"
                            ],
                            "resourceNames": [
                                "tekton-triggers"
                            ],
                            "resources": [
                                "podsecuritypolicies"
                            ],
                            "verbs": [
                                "use"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            },
                            "name": "tekton-triggers-eventlistener-roles"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "triggers.tekton.dev"
                                ],
                                "resources": [
                                    "eventlisteners",
                                    "triggerbindings",
                                    "triggertemplates",
                                    "triggers"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "configmaps"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "tekton.dev"
                                ],
                                "resources": [
                                    "pipelineruns",
                                    "pipelineresources",
                                    "taskruns"
                                ],
                                "verbs": [
                                    "create"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "serviceaccounts"
                                ],
                                "verbs": [
                                    "impersonate"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "policy"
                                ],
                                "resourceNames": [
                                    "tekton-triggers"
                                ],
                                "resources": [
                                    "podsecuritypolicies"
                                ],
                                "verbs": [
                                    "use"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"},\"name\":\"tekton-triggers-eventlistener-roles\"},\"rules\":[{\"apiGroups\":[\"triggers.tekton.dev\"],\"resources\":[\"eventlisteners\",\"triggerbindings\",\"triggertemplates\",\"triggers\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"configmaps\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"tekton.dev\"],\"resources\":[\"pipelineruns\",\"pipelineresources\",\"taskruns\"],\"verbs\":[\"create\"]},{\"apiGroups\":[\"\"],\"resources\":[\"serviceaccounts\"],\"verbs\":[\"impersonate\"]},{\"apiGroups\":[\"policy\"],\"resourceNames\":[\"tekton-triggers\"],\"resources\":[\"podsecuritypolicies\"],\"verbs\":[\"use\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:46Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:46Z"
                            }
                        ],
                        "name": "tekton-triggers-eventlistener-roles",
                        "resourceVersion": "126102",
                        "uid": "653e02db-d1f0-4b24-9780-aae3c2761027"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "eventlisteners",
                                "triggerbindings",
                                "triggertemplates",
                                "triggers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "pipelineruns",
                                "pipelineresources",
                                "taskruns"
                            ],
                            "verbs": [
                                "create"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "serviceaccounts"
                            ],
                            "verbs": [
                                "impersonate"
                            ]
                        },
                        {
                            "apiGroups": [
                                "policy"
                            ],
                            "resourceNames": [
                                "tekton-triggers"
                            ],
                            "resources": [
                                "podsecuritypolicies"
                            ],
                            "verbs": [
                                "use"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::tekton-triggers-aggregate-edit",
                "custom": true,
                "id": "tekton-triggers-aggregate-edit",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "rbac.authorization.k8s.io/aggregate-to-admin": "true",
                            "rbac.authorization.k8s.io/aggregate-to-edit": "true"
                        },
                        "name": "tekton-triggers-aggregate-edit"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "clustertriggerbindings",
                                "clusterinterceptors",
                                "eventlisteners",
                                "triggers",
                                "triggerbindings",
                                "triggertemplates"
                            ],
                            "verbs": [
                                "create",
                                "delete",
                                "deletecollection",
                                "get",
                                "list",
                                "patch",
                                "update",
                                "watch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "rbac.authorization.k8s.io/aggregate-to-admin": "true",
                                "rbac.authorization.k8s.io/aggregate-to-edit": "true"
                            },
                            "name": "tekton-triggers-aggregate-edit"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "triggers.tekton.dev"
                                ],
                                "resources": [
                                    "clustertriggerbindings",
                                    "clusterinterceptors",
                                    "eventlisteners",
                                    "triggers",
                                    "triggerbindings",
                                    "triggertemplates"
                                ],
                                "verbs": [
                                    "create",
                                    "delete",
                                    "deletecollection",
                                    "get",
                                    "list",
                                    "patch",
                                    "update",
                                    "watch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"rbac.authorization.k8s.io/aggregate-to-admin\":\"true\",\"rbac.authorization.k8s.io/aggregate-to-edit\":\"true\"},\"name\":\"tekton-triggers-aggregate-edit\"},\"rules\":[{\"apiGroups\":[\"triggers.tekton.dev\"],\"resources\":[\"clustertriggerbindings\",\"clusterinterceptors\",\"eventlisteners\",\"triggers\",\"triggerbindings\",\"triggertemplates\"],\"verbs\":[\"create\",\"delete\",\"deletecollection\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:45Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "rbac.authorization.k8s.io/aggregate-to-admin": "true",
                            "rbac.authorization.k8s.io/aggregate-to-edit": "true"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:rbac.authorization.k8s.io/aggregate-to-admin": {},
                                            "f:rbac.authorization.k8s.io/aggregate-to-edit": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:45Z"
                            }
                        ],
                        "name": "tekton-triggers-aggregate-edit",
                        "resourceVersion": "126076",
                        "uid": "8a0b39f2-4cdb-408b-b29d-16230c6f6c99"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "clustertriggerbindings",
                                "clusterinterceptors",
                                "eventlisteners",
                                "triggers",
                                "triggerbindings",
                                "triggertemplates"
                            ],
                            "verbs": [
                                "create",
                                "delete",
                                "deletecollection",
                                "get",
                                "list",
                                "patch",
                                "update",
                                "watch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::tekton-pipelines/tekton-pipelines-webhook",
                "custom": true,
                "id": "tekton-pipelines/tekton-pipelines-webhook",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines-webhook",
                        "namespace": "tekton-pipelines"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-pipelines-webhook"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-pipelines-webhook",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines-webhook",
                            "namespace": "tekton-pipelines"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "tekton-pipelines-webhook"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "tekton-pipelines-webhook",
                                "namespace": "tekton-pipelines"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines-webhook\",\"namespace\":\"tekton-pipelines\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"tekton-pipelines-webhook\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"tekton-pipelines-webhook\",\"namespace\":\"tekton-pipelines\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:09Z",
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:09Z"
                            }
                        ],
                        "name": "tekton-pipelines-webhook",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125918",
                        "uid": "e8ea82db-f9f7-4954-8a81-0c9731295df6"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-pipelines-webhook"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-pipelines-webhook",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::tekton-dashboard-tenant",
                "custom": true,
                "id": "tekton-dashboard-tenant",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "name": "tekton-dashboard-tenant"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "tekton-dashboard-tenant"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-dashboard",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "dashboard",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-dashboard"
                            },
                            "name": "tekton-dashboard-tenant"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "tekton-dashboard-tenant"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "tekton-dashboard",
                                "namespace": "tekton-pipelines"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"dashboard\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-dashboard\"},\"name\":\"tekton-dashboard-tenant\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"tekton-dashboard-tenant\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"tekton-dashboard\",\"namespace\":\"tekton-pipelines\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:01Z",
                        "labels": {
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:01Z"
                            }
                        ],
                        "name": "tekton-dashboard-tenant",
                        "resourceVersion": "125856",
                        "uid": "1946ebf6-c6c2-4387-814e-df45f5759ae0"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "tekton-dashboard-tenant"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-dashboard",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:ConfigMap::tekton-pipelines/dashboard-info",
                "custom": true,
                "id": "tekton-pipelines/dashboard-info",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "version": "v0.23.0"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "name": "dashboard-info",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "version": "v0.23.0"
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-dashboard"
                            },
                            "name": "dashboard-info",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "version": "v0.23.0"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"version\":\"v0.23.0\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-dashboard\"},\"name\":\"dashboard-info\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:58Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:data": {
                                        ".": {},
                                        "f:version": {}
                                    },
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:58Z"
                            }
                        ],
                        "name": "dashboard-info",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126176",
                        "uid": "baa36944-10f4-40b3-948d-23f8d0c8392d"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "data": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::tekton-pipelines-controller-cluster-access",
                "custom": true,
                "id": "tekton-pipelines-controller-cluster-access",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines-controller-cluster-access"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "tekton-pipelines-controller-cluster-access"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-pipelines-controller",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines-controller-cluster-access"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "tekton-pipelines-controller-cluster-access"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "tekton-pipelines-controller",
                                "namespace": "tekton-pipelines"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines-controller-cluster-access\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"tekton-pipelines-controller-cluster-access\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"tekton-pipelines-controller\",\"namespace\":\"tekton-pipelines\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:40Z",
                        "labels": {
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:40Z"
                            }
                        ],
                        "name": "tekton-pipelines-controller-cluster-access",
                        "resourceVersion": "126010",
                        "uid": "f210dc48-9602-403b-a860-f1023b67a2a7"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "tekton-pipelines-controller-cluster-access"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "tekton-pipelines-controller",
                            "namespace": "tekton-pipelines"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apps/v1:Deployment::tekton-pipelines/tekton-triggers-webhook",
                "custom": true,
                "id": "tekton-pipelines/tekton-triggers-webhook",
                "type": "kubernetes:apps/v1:Deployment",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "app.kubernetes.io/version": "v0.17.1",
                            "triggers.tekton.dev/release": "v0.17.1"
                        },
                        "name": "tekton-triggers-webhook",
                        "namespace": "tekton-pipelines"
                    },
                    "spec": {
                        "replicas": 1,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "webhook",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            }
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "tekton-triggers-webhook",
                                    "app.kubernetes.io/component": "webhook",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "webhook",
                                    "app.kubernetes.io/part-of": "tekton-triggers",
                                    "app.kubernetes.io/version": "v0.17.1",
                                    "triggers.tekton.dev/release": "v0.17.1",
                                    "version": "v0.17.1"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "env": [
                                            {
                                                "name": "SYSTEM_NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "CONFIG_LOGGING_NAME",
                                                "value": "config-logging-triggers"
                                            },
                                            {
                                                "name": "WEBHOOK_SERVICE_NAME",
                                                "value": "tekton-triggers-webhook"
                                            },
                                            {
                                                "name": "WEBHOOK_SECRET_NAME",
                                                "value": "triggers-webhook-certs"
                                            },
                                            {
                                                "name": "METRICS_DOMAIN",
                                                "value": "tekton.dev/triggers"
                                            }
                                        ],
                                        "image": "gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/webhook:v0.17.1@sha256:6e33eb65f35c238675a92e295d26965bebcb8b9a5dcaf622211f72e77377e16f",
                                        "name": "webhook",
                                        "ports": [
                                            {
                                                "containerPort": 9000,
                                                "name": "metrics"
                                            },
                                            {
                                                "containerPort": 8008,
                                                "name": "profiling"
                                            },
                                            {
                                                "containerPort": 8443,
                                                "name": "https-webhook"
                                            }
                                        ],
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "runAsUser": 65532
                                        }
                                    }
                                ],
                                "serviceAccountName": "tekton-triggers-webhook"
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "webhook",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "app.kubernetes.io/version": "v0.17.1",
                                "triggers.tekton.dev/release": "v0.17.1"
                            },
                            "name": "tekton-triggers-webhook",
                            "namespace": "tekton-pipelines"
                        },
                        "spec": {
                            "replicas": 1,
                            "selector": {
                                "matchLabels": {
                                    "app.kubernetes.io/component": "webhook",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "webhook",
                                    "app.kubernetes.io/part-of": "tekton-triggers"
                                }
                            },
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "app": "tekton-triggers-webhook",
                                        "app.kubernetes.io/component": "webhook",
                                        "app.kubernetes.io/instance": "default",
                                        "app.kubernetes.io/name": "webhook",
                                        "app.kubernetes.io/part-of": "tekton-triggers",
                                        "app.kubernetes.io/version": "v0.17.1",
                                        "triggers.tekton.dev/release": "v0.17.1",
                                        "version": "v0.17.1"
                                    }
                                },
                                "spec": {
                                    "containers": [
                                        {
                                            "env": [
                                                {
                                                    "name": "SYSTEM_NAMESPACE",
                                                    "valueFrom": {
                                                        "fieldRef": {
                                                            "fieldPath": "metadata.namespace"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "CONFIG_LOGGING_NAME",
                                                    "value": "config-logging-triggers"
                                                },
                                                {
                                                    "name": "WEBHOOK_SERVICE_NAME",
                                                    "value": "tekton-triggers-webhook"
                                                },
                                                {
                                                    "name": "WEBHOOK_SECRET_NAME",
                                                    "value": "triggers-webhook-certs"
                                                },
                                                {
                                                    "name": "METRICS_DOMAIN",
                                                    "value": "tekton.dev/triggers"
                                                }
                                            ],
                                            "image": "gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/webhook:v0.17.1@sha256:6e33eb65f35c238675a92e295d26965bebcb8b9a5dcaf622211f72e77377e16f",
                                            "name": "webhook",
                                            "ports": [
                                                {
                                                    "containerPort": 9000,
                                                    "name": "metrics"
                                                },
                                                {
                                                    "containerPort": 8008,
                                                    "name": "profiling"
                                                },
                                                {
                                                    "containerPort": 8443,
                                                    "name": "https-webhook"
                                                }
                                            ],
                                            "securityContext": {
                                                "allowPrivilegeEscalation": false,
                                                "runAsUser": 65532
                                            }
                                        }
                                    ],
                                    "serviceAccountName": "tekton-triggers-webhook"
                                }
                            }
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "annotations": {
                            "deployment.kubernetes.io/revision": "1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"app.kubernetes.io/version\":\"v0.17.1\",\"triggers.tekton.dev/release\":\"v0.17.1\"},\"name\":\"tekton-triggers-webhook\",\"namespace\":\"tekton-pipelines\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"tekton-triggers-webhook\",\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"app.kubernetes.io/version\":\"v0.17.1\",\"triggers.tekton.dev/release\":\"v0.17.1\",\"version\":\"v0.17.1\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"SYSTEM_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"CONFIG_LOGGING_NAME\",\"value\":\"config-logging-triggers\"},{\"name\":\"WEBHOOK_SERVICE_NAME\",\"value\":\"tekton-triggers-webhook\"},{\"name\":\"WEBHOOK_SECRET_NAME\",\"value\":\"triggers-webhook-certs\"},{\"name\":\"METRICS_DOMAIN\",\"value\":\"tekton.dev/triggers\"}],\"image\":\"gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/webhook:v0.17.1@sha256:6e33eb65f35c238675a92e295d26965bebcb8b9a5dcaf622211f72e77377e16f\",\"name\":\"webhook\",\"ports\":[{\"containerPort\":9000,\"name\":\"metrics\"},{\"containerPort\":8008,\"name\":\"profiling\"},{\"containerPort\":8443,\"name\":\"https-webhook\"}],\"securityContext\":{\"allowPrivilegeEscalation\":false,\"runAsUser\":65532}}],\"serviceAccountName\":\"tekton-triggers-webhook\"}}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:46:02Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "app.kubernetes.io/version": "v0.17.1",
                            "triggers.tekton.dev/release": "v0.17.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:triggers.tekton.dev/release": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:progressDeadlineSeconds": {},
                                        "f:replicas": {},
                                        "f:revisionHistoryLimit": {},
                                        "f:selector": {},
                                        "f:strategy": {
                                            "f:rollingUpdate": {
                                                ".": {},
                                                "f:maxSurge": {},
                                                "f:maxUnavailable": {}
                                            },
                                            "f:type": {}
                                        },
                                        "f:template": {
                                            "f:metadata": {
                                                "f:labels": {
                                                    ".": {},
                                                    "f:app": {},
                                                    "f:app.kubernetes.io/component": {},
                                                    "f:app.kubernetes.io/instance": {},
                                                    "f:app.kubernetes.io/name": {},
                                                    "f:app.kubernetes.io/part-of": {},
                                                    "f:app.kubernetes.io/version": {},
                                                    "f:triggers.tekton.dev/release": {},
                                                    "f:version": {}
                                                }
                                            },
                                            "f:spec": {
                                                "f:containers": {
                                                    "k:{\"name\":\"webhook\"}": {
                                                        ".": {},
                                                        "f:env": {
                                                            ".": {},
                                                            "k:{\"name\":\"CONFIG_LOGGING_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"METRICS_DOMAIN\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"SYSTEM_NAMESPACE\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:fieldRef": {
                                                                        ".": {},
                                                                        "f:apiVersion": {},
                                                                        "f:fieldPath": {}
                                                                    }
                                                                }
                                                            },
                                                            "k:{\"name\":\"WEBHOOK_SECRET_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"WEBHOOK_SERVICE_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            }
                                                        },
                                                        "f:image": {},
                                                        "f:imagePullPolicy": {},
                                                        "f:name": {},
                                                        "f:ports": {
                                                            ".": {},
                                                            "k:{\"containerPort\":8008,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:name": {},
                                                                "f:protocol": {}
                                                            },
                                                            "k:{\"containerPort\":8443,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:name": {},
                                                                "f:protocol": {}
                                                            },
                                                            "k:{\"containerPort\":9000,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:name": {},
                                                                "f:protocol": {}
                                                            }
                                                        },
                                                        "f:resources": {},
                                                        "f:securityContext": {
                                                            ".": {},
                                                            "f:allowPrivilegeEscalation": {},
                                                            "f:runAsUser": {}
                                                        },
                                                        "f:terminationMessagePath": {},
                                                        "f:terminationMessagePolicy": {}
                                                    }
                                                },
                                                "f:dnsPolicy": {},
                                                "f:restartPolicy": {},
                                                "f:schedulerName": {},
                                                "f:securityContext": {},
                                                "f:serviceAccount": {},
                                                "f:serviceAccountName": {},
                                                "f:terminationGracePeriodSeconds": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:46:02Z"
                            },
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            "f:deployment.kubernetes.io/revision": {}
                                        }
                                    },
                                    "f:status": {
                                        "f:availableReplicas": {},
                                        "f:conditions": {
                                            ".": {},
                                            "k:{\"type\":\"Available\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"Progressing\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:observedGeneration": {},
                                        "f:readyReplicas": {},
                                        "f:replicas": {},
                                        "f:updatedReplicas": {}
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T03:46:08Z"
                            }
                        ],
                        "name": "tekton-triggers-webhook",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126391",
                        "uid": "ba324772-6078-4e6f-996e-1cda1cc019e4"
                    },
                    "spec": {
                        "progressDeadlineSeconds": 600,
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "webhook",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            }
                        },
                        "strategy": {
                            "rollingUpdate": {
                                "maxSurge": "25%",
                                "maxUnavailable": "25%"
                            },
                            "type": "RollingUpdate"
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "tekton-triggers-webhook",
                                    "app.kubernetes.io/component": "webhook",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "webhook",
                                    "app.kubernetes.io/part-of": "tekton-triggers",
                                    "app.kubernetes.io/version": "v0.17.1",
                                    "triggers.tekton.dev/release": "v0.17.1",
                                    "version": "v0.17.1"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "env": [
                                            {
                                                "name": "SYSTEM_NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "apiVersion": "v1",
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "CONFIG_LOGGING_NAME",
                                                "value": "config-logging-triggers"
                                            },
                                            {
                                                "name": "WEBHOOK_SERVICE_NAME",
                                                "value": "tekton-triggers-webhook"
                                            },
                                            {
                                                "name": "WEBHOOK_SECRET_NAME",
                                                "value": "triggers-webhook-certs"
                                            },
                                            {
                                                "name": "METRICS_DOMAIN",
                                                "value": "tekton.dev/triggers"
                                            }
                                        ],
                                        "image": "gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/webhook:v0.17.1@sha256:6e33eb65f35c238675a92e295d26965bebcb8b9a5dcaf622211f72e77377e16f",
                                        "imagePullPolicy": "IfNotPresent",
                                        "name": "webhook",
                                        "ports": [
                                            {
                                                "containerPort": 9000,
                                                "name": "metrics",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 8008,
                                                "name": "profiling",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 8443,
                                                "name": "https-webhook",
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "resources": {},
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "runAsUser": 65532
                                        },
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File"
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {},
                                "serviceAccount": "tekton-triggers-webhook",
                                "serviceAccountName": "tekton-triggers-webhook",
                                "terminationGracePeriodSeconds": 30
                            }
                        }
                    },
                    "status": {
                        "availableReplicas": 1,
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:46:08Z",
                                "lastUpdateTime": "2021-12-19T03:46:08Z",
                                "message": "Deployment has minimum availability.",
                                "reason": "MinimumReplicasAvailable",
                                "status": "True",
                                "type": "Available"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:46:02Z",
                                "lastUpdateTime": "2021-12-19T03:46:08Z",
                                "message": "ReplicaSet \"tekton-triggers-webhook-78458dbb76\" has successfully progressed.",
                                "reason": "NewReplicaSetAvailable",
                                "status": "True",
                                "type": "Progressing"
                            }
                        ],
                        "observedGeneration": 1,
                        "readyReplicas": 1,
                        "replicas": 1,
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apps/v1:Deployment::tekton-pipelines/tekton-triggers-core-interceptors",
                "custom": true,
                "id": "tekton-pipelines/tekton-triggers-core-interceptors",
                "type": "kubernetes:apps/v1:Deployment",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "interceptors",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "core-interceptors",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "app.kubernetes.io/version": "v0.17.1",
                            "triggers.tekton.dev/release": "v0.17.1"
                        },
                        "name": "tekton-triggers-core-interceptors",
                        "namespace": "tekton-pipelines"
                    },
                    "spec": {
                        "replicas": 1,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/component": "interceptors",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "core-interceptors",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            }
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "tekton-triggers-core-interceptors",
                                    "app.kubernetes.io/component": "interceptors",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "core-interceptors",
                                    "app.kubernetes.io/part-of": "tekton-triggers",
                                    "app.kubernetes.io/version": "v0.17.1",
                                    "triggers.tekton.dev/release": "v0.17.1",
                                    "version": "v0.17.1"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "args": [
                                            "-logtostderr",
                                            "-stderrthreshold",
                                            "INFO"
                                        ],
                                        "env": [
                                            {
                                                "name": "SYSTEM_NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "CONFIG_LOGGING_NAME",
                                                "value": "config-logging-triggers"
                                            },
                                            {
                                                "name": "CONFIG_OBSERVABILITY_NAME",
                                                "value": "config-observability-triggers"
                                            },
                                            {
                                                "name": "METRICS_DOMAIN",
                                                "value": "tekton.dev/triggers"
                                            }
                                        ],
                                        "image": "gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/interceptors:v0.17.1@sha256:1d0b826420be4579d20b7116c415afa19cff08fb17f2f3efc2017bc29b4ea70e",
                                        "name": "tekton-triggers-core-interceptors",
                                        "readinessProbe": {
                                            "httpGet": {
                                                "path": "/ready",
                                                "port": 8082,
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10,
                                            "timeoutSeconds": 5
                                        },
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "capabilities": {
                                                "drop": [
                                                    "all"
                                                ]
                                            },
                                            "runAsGroup": 65532,
                                            "runAsUser": 65532
                                        }
                                    }
                                ],
                                "serviceAccountName": "tekton-triggers-core-interceptors"
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "interceptors",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "core-interceptors",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "app.kubernetes.io/version": "v0.17.1",
                                "triggers.tekton.dev/release": "v0.17.1"
                            },
                            "name": "tekton-triggers-core-interceptors",
                            "namespace": "tekton-pipelines"
                        },
                        "spec": {
                            "replicas": 1,
                            "selector": {
                                "matchLabels": {
                                    "app.kubernetes.io/component": "interceptors",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "core-interceptors",
                                    "app.kubernetes.io/part-of": "tekton-triggers"
                                }
                            },
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "app": "tekton-triggers-core-interceptors",
                                        "app.kubernetes.io/component": "interceptors",
                                        "app.kubernetes.io/instance": "default",
                                        "app.kubernetes.io/name": "core-interceptors",
                                        "app.kubernetes.io/part-of": "tekton-triggers",
                                        "app.kubernetes.io/version": "v0.17.1",
                                        "triggers.tekton.dev/release": "v0.17.1",
                                        "version": "v0.17.1"
                                    }
                                },
                                "spec": {
                                    "containers": [
                                        {
                                            "args": [
                                                "-logtostderr",
                                                "-stderrthreshold",
                                                "INFO"
                                            ],
                                            "env": [
                                                {
                                                    "name": "SYSTEM_NAMESPACE",
                                                    "valueFrom": {
                                                        "fieldRef": {
                                                            "fieldPath": "metadata.namespace"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "CONFIG_LOGGING_NAME",
                                                    "value": "config-logging-triggers"
                                                },
                                                {
                                                    "name": "CONFIG_OBSERVABILITY_NAME",
                                                    "value": "config-observability-triggers"
                                                },
                                                {
                                                    "name": "METRICS_DOMAIN",
                                                    "value": "tekton.dev/triggers"
                                                }
                                            ],
                                            "image": "gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/interceptors:v0.17.1@sha256:1d0b826420be4579d20b7116c415afa19cff08fb17f2f3efc2017bc29b4ea70e",
                                            "name": "tekton-triggers-core-interceptors",
                                            "readinessProbe": {
                                                "httpGet": {
                                                    "path": "/ready",
                                                    "port": 8082,
                                                    "scheme": "HTTP"
                                                },
                                                "initialDelaySeconds": 5,
                                                "periodSeconds": 10,
                                                "timeoutSeconds": 5
                                            },
                                            "securityContext": {
                                                "allowPrivilegeEscalation": false,
                                                "capabilities": {
                                                    "drop": [
                                                        "all"
                                                    ]
                                                },
                                                "runAsGroup": 65532,
                                                "runAsUser": 65532
                                            }
                                        }
                                    ],
                                    "serviceAccountName": "tekton-triggers-core-interceptors"
                                }
                            }
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "annotations": {
                            "deployment.kubernetes.io/revision": "1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"interceptors\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"core-interceptors\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"app.kubernetes.io/version\":\"v0.17.1\",\"triggers.tekton.dev/release\":\"v0.17.1\"},\"name\":\"tekton-triggers-core-interceptors\",\"namespace\":\"tekton-pipelines\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app.kubernetes.io/component\":\"interceptors\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"core-interceptors\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"tekton-triggers-core-interceptors\",\"app.kubernetes.io/component\":\"interceptors\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"core-interceptors\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"app.kubernetes.io/version\":\"v0.17.1\",\"triggers.tekton.dev/release\":\"v0.17.1\",\"version\":\"v0.17.1\"}},\"spec\":{\"containers\":[{\"args\":[\"-logtostderr\",\"-stderrthreshold\",\"INFO\"],\"env\":[{\"name\":\"SYSTEM_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"CONFIG_LOGGING_NAME\",\"value\":\"config-logging-triggers\"},{\"name\":\"CONFIG_OBSERVABILITY_NAME\",\"value\":\"config-observability-triggers\"},{\"name\":\"METRICS_DOMAIN\",\"value\":\"tekton.dev/triggers\"}],\"image\":\"gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/interceptors:v0.17.1@sha256:1d0b826420be4579d20b7116c415afa19cff08fb17f2f3efc2017bc29b4ea70e\",\"name\":\"tekton-triggers-core-interceptors\",\"readinessProbe\":{\"httpGet\":{\"path\":\"/ready\",\"port\":8082,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":5,\"periodSeconds\":10,\"timeoutSeconds\":5},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"all\"]},\"runAsGroup\":65532,\"runAsUser\":65532}}],\"serviceAccountName\":\"tekton-triggers-core-interceptors\"}}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:46:00Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/component": "interceptors",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "core-interceptors",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "app.kubernetes.io/version": "v0.17.1",
                            "triggers.tekton.dev/release": "v0.17.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:triggers.tekton.dev/release": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:progressDeadlineSeconds": {},
                                        "f:replicas": {},
                                        "f:revisionHistoryLimit": {},
                                        "f:selector": {},
                                        "f:strategy": {
                                            "f:rollingUpdate": {
                                                ".": {},
                                                "f:maxSurge": {},
                                                "f:maxUnavailable": {}
                                            },
                                            "f:type": {}
                                        },
                                        "f:template": {
                                            "f:metadata": {
                                                "f:labels": {
                                                    ".": {},
                                                    "f:app": {},
                                                    "f:app.kubernetes.io/component": {},
                                                    "f:app.kubernetes.io/instance": {},
                                                    "f:app.kubernetes.io/name": {},
                                                    "f:app.kubernetes.io/part-of": {},
                                                    "f:app.kubernetes.io/version": {},
                                                    "f:triggers.tekton.dev/release": {},
                                                    "f:version": {}
                                                }
                                            },
                                            "f:spec": {
                                                "f:containers": {
                                                    "k:{\"name\":\"tekton-triggers-core-interceptors\"}": {
                                                        ".": {},
                                                        "f:args": {},
                                                        "f:env": {
                                                            ".": {},
                                                            "k:{\"name\":\"CONFIG_LOGGING_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"CONFIG_OBSERVABILITY_NAME\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"METRICS_DOMAIN\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:value": {}
                                                            },
                                                            "k:{\"name\":\"SYSTEM_NAMESPACE\"}": {
                                                                ".": {},
                                                                "f:name": {},
                                                                "f:valueFrom": {
                                                                    ".": {},
                                                                    "f:fieldRef": {
                                                                        ".": {},
                                                                        "f:apiVersion": {},
                                                                        "f:fieldPath": {}
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "f:image": {},
                                                        "f:imagePullPolicy": {},
                                                        "f:name": {},
                                                        "f:readinessProbe": {
                                                            ".": {},
                                                            "f:failureThreshold": {},
                                                            "f:httpGet": {
                                                                ".": {},
                                                                "f:path": {},
                                                                "f:port": {},
                                                                "f:scheme": {}
                                                            },
                                                            "f:initialDelaySeconds": {},
                                                            "f:periodSeconds": {},
                                                            "f:successThreshold": {},
                                                            "f:timeoutSeconds": {}
                                                        },
                                                        "f:resources": {},
                                                        "f:securityContext": {
                                                            ".": {},
                                                            "f:allowPrivilegeEscalation": {},
                                                            "f:capabilities": {
                                                                ".": {},
                                                                "f:drop": {}
                                                            },
                                                            "f:runAsGroup": {},
                                                            "f:runAsUser": {}
                                                        },
                                                        "f:terminationMessagePath": {},
                                                        "f:terminationMessagePolicy": {}
                                                    }
                                                },
                                                "f:dnsPolicy": {},
                                                "f:restartPolicy": {},
                                                "f:schedulerName": {},
                                                "f:securityContext": {},
                                                "f:serviceAccount": {},
                                                "f:serviceAccountName": {},
                                                "f:terminationGracePeriodSeconds": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:46:00Z"
                            },
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            "f:deployment.kubernetes.io/revision": {}
                                        }
                                    },
                                    "f:status": {
                                        "f:availableReplicas": {},
                                        "f:conditions": {
                                            ".": {},
                                            "k:{\"type\":\"Available\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"Progressing\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:observedGeneration": {},
                                        "f:readyReplicas": {},
                                        "f:replicas": {},
                                        "f:updatedReplicas": {}
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T03:46:20Z"
                            }
                        ],
                        "name": "tekton-triggers-core-interceptors",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126514",
                        "uid": "0e27860a-a4cf-41c7-9fee-3f7bfaab16e8"
                    },
                    "spec": {
                        "progressDeadlineSeconds": 600,
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/component": "interceptors",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "core-interceptors",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            }
                        },
                        "strategy": {
                            "rollingUpdate": {
                                "maxSurge": "25%",
                                "maxUnavailable": "25%"
                            },
                            "type": "RollingUpdate"
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "tekton-triggers-core-interceptors",
                                    "app.kubernetes.io/component": "interceptors",
                                    "app.kubernetes.io/instance": "default",
                                    "app.kubernetes.io/name": "core-interceptors",
                                    "app.kubernetes.io/part-of": "tekton-triggers",
                                    "app.kubernetes.io/version": "v0.17.1",
                                    "triggers.tekton.dev/release": "v0.17.1",
                                    "version": "v0.17.1"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "args": [
                                            "-logtostderr",
                                            "-stderrthreshold",
                                            "INFO"
                                        ],
                                        "env": [
                                            {
                                                "name": "SYSTEM_NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "apiVersion": "v1",
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "CONFIG_LOGGING_NAME",
                                                "value": "config-logging-triggers"
                                            },
                                            {
                                                "name": "CONFIG_OBSERVABILITY_NAME",
                                                "value": "config-observability-triggers"
                                            },
                                            {
                                                "name": "METRICS_DOMAIN",
                                                "value": "tekton.dev/triggers"
                                            }
                                        ],
                                        "image": "gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/interceptors:v0.17.1@sha256:1d0b826420be4579d20b7116c415afa19cff08fb17f2f3efc2017bc29b4ea70e",
                                        "imagePullPolicy": "IfNotPresent",
                                        "name": "tekton-triggers-core-interceptors",
                                        "readinessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/ready",
                                                "port": 8082,
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 5
                                        },
                                        "resources": {},
                                        "securityContext": {
                                            "allowPrivilegeEscalation": false,
                                            "capabilities": {
                                                "drop": [
                                                    "all"
                                                ]
                                            },
                                            "runAsGroup": 65532,
                                            "runAsUser": 65532
                                        },
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File"
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {},
                                "serviceAccount": "tekton-triggers-core-interceptors",
                                "serviceAccountName": "tekton-triggers-core-interceptors",
                                "terminationGracePeriodSeconds": 30
                            }
                        }
                    },
                    "status": {
                        "availableReplicas": 1,
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:46:20Z",
                                "lastUpdateTime": "2021-12-19T03:46:20Z",
                                "message": "Deployment has minimum availability.",
                                "reason": "MinimumReplicasAvailable",
                                "status": "True",
                                "type": "Available"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:46:00Z",
                                "lastUpdateTime": "2021-12-19T03:46:20Z",
                                "message": "ReplicaSet \"tekton-triggers-core-interceptors-65bc694b58\" has successfully progressed.",
                                "reason": "NewReplicaSetAvailable",
                                "status": "True",
                                "type": "Progressing"
                            }
                        ],
                        "observedGeneration": 1,
                        "readyReplicas": 1,
                        "replicas": 1,
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::eventlisteners.triggers.tekton.dev",
                "custom": true,
                "id": "eventlisteners.triggers.tekton.dev",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "name": "eventlisteners.triggers.tekton.dev"
                    },
                    "spec": {
                        "group": "triggers.tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "EventListener",
                            "plural": "eventlisteners",
                            "shortNames": [
                                "el"
                            ],
                            "singular": "eventlistener"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.address.url",
                                        "name": "Address",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type=='Available')].status",
                                        "name": "Available",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type=='Available')].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type=='Ready')].status",
                                        "name": "Ready",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type=='Ready')].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    }
                                ],
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.address.url",
                                        "name": "Address",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type=='Available')].status",
                                        "name": "Available",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type=='Available')].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type=='Ready')].status",
                                        "name": "Ready",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type=='Ready')].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    }
                                ],
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "triggers.tekton.dev/release": "v0.17.1",
                                "version": "v0.17.1"
                            },
                            "name": "eventlisteners.triggers.tekton.dev"
                        },
                        "spec": {
                            "group": "triggers.tekton.dev",
                            "names": {
                                "categories": [
                                    "tekton",
                                    "tekton-triggers"
                                ],
                                "kind": "EventListener",
                                "plural": "eventlisteners",
                                "shortNames": [
                                    "el"
                                ],
                                "singular": "eventlistener"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "additionalPrinterColumns": [
                                        {
                                            "jsonPath": ".status.address.url",
                                            "name": "Address",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type=='Available')].status",
                                            "name": "Available",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type=='Available')].reason",
                                            "name": "Reason",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type=='Ready')].status",
                                            "name": "Ready",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type=='Ready')].reason",
                                            "name": "Reason",
                                            "type": "string"
                                        }
                                    ],
                                    "name": "v1beta1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {
                                        "status": {}
                                    }
                                },
                                {
                                    "additionalPrinterColumns": [
                                        {
                                            "jsonPath": ".status.address.url",
                                            "name": "Address",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type=='Available')].status",
                                            "name": "Available",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type=='Available')].reason",
                                            "name": "Reason",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type=='Ready')].status",
                                            "name": "Ready",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type=='Ready')].reason",
                                            "name": "Reason",
                                            "type": "string"
                                        }
                                    ],
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": false,
                                    "subresources": {
                                        "status": {}
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"triggers.tekton.dev/release\":\"v0.17.1\",\"version\":\"v0.17.1\"},\"name\":\"eventlisteners.triggers.tekton.dev\"},\"spec\":{\"group\":\"triggers.tekton.dev\",\"names\":{\"categories\":[\"tekton\",\"tekton-triggers\"],\"kind\":\"EventListener\",\"plural\":\"eventlisteners\",\"shortNames\":[\"el\"],\"singular\":\"eventlistener\"},\"scope\":\"Namespaced\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.address.url\",\"name\":\"Address\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type=='Available')].status\",\"name\":\"Available\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type=='Available')].reason\",\"name\":\"Reason\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type=='Ready')].status\",\"name\":\"Ready\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type=='Ready')].reason\",\"name\":\"Reason\",\"type\":\"string\"}],\"name\":\"v1beta1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}},{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.address.url\",\"name\":\"Address\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type=='Available')].status\",\"name\":\"Available\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type=='Available')].reason\",\"name\":\"Reason\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type=='Ready')].status\",\"name\":\"Ready\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type=='Ready')].reason\",\"name\":\"Reason\",\"type\":\"string\"}],\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":false,\"subresources\":{\"status\":{}}}]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:07Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:07Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:triggers.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:07Z"
                            }
                        ],
                        "name": "eventlisteners.triggers.tekton.dev",
                        "resourceVersion": "125905",
                        "uid": "6cc0784a-e6ee-48fd-92e2-bb7da7e3f5f8"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "triggers.tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "EventListener",
                            "listKind": "EventListenerList",
                            "plural": "eventlisteners",
                            "shortNames": [
                                "el"
                            ],
                            "singular": "eventlistener"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.address.url",
                                        "name": "Address",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type=='Available')].status",
                                        "name": "Available",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type=='Available')].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type=='Ready')].status",
                                        "name": "Ready",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type=='Ready')].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    }
                                ],
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.address.url",
                                        "name": "Address",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type=='Available')].status",
                                        "name": "Available",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type=='Available')].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type=='Ready')].status",
                                        "name": "Ready",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type=='Ready')].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    }
                                ],
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "EventListener",
                            "listKind": "EventListenerList",
                            "plural": "eventlisteners",
                            "shortNames": [
                                "el"
                            ],
                            "singular": "eventlistener"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:45:07Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:45:07Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1beta1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:core/v1:Service::tekton-pipelines/tekton-triggers-core-interceptors",
                "custom": true,
                "id": "tekton-pipelines/tekton-triggers-core-interceptors",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app": "tekton-triggers-core-interceptors",
                            "app.kubernetes.io/component": "interceptors",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "tekton-triggers-core-interceptors",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "app.kubernetes.io/version": "v0.17.1",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "name": "tekton-triggers-core-interceptors",
                        "namespace": "tekton-pipelines"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "http",
                                "port": 80,
                                "targetPort": 8082
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/component": "interceptors",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/name": "core-interceptors",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app": "tekton-triggers-core-interceptors",
                                "app.kubernetes.io/component": "interceptors",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "tekton-triggers-core-interceptors",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "app.kubernetes.io/version": "v0.17.1",
                                "triggers.tekton.dev/release": "v0.17.1",
                                "version": "v0.17.1"
                            },
                            "name": "tekton-triggers-core-interceptors",
                            "namespace": "tekton-pipelines"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "http",
                                    "port": 80,
                                    "targetPort": 8082
                                }
                            ],
                            "selector": {
                                "app.kubernetes.io/component": "interceptors",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/name": "core-interceptors",
                                "app.kubernetes.io/part-of": "tekton-triggers"
                            }
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app\":\"tekton-triggers-core-interceptors\",\"app.kubernetes.io/component\":\"interceptors\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"tekton-triggers-core-interceptors\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"app.kubernetes.io/version\":\"v0.17.1\",\"triggers.tekton.dev/release\":\"v0.17.1\",\"version\":\"v0.17.1\"},\"name\":\"tekton-triggers-core-interceptors\",\"namespace\":\"tekton-pipelines\"},\"spec\":{\"ports\":[{\"name\":\"http\",\"port\":80,\"targetPort\":8082}],\"selector\":{\"app.kubernetes.io/component\":\"interceptors\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/name\":\"core-interceptors\",\"app.kubernetes.io/part-of\":\"tekton-triggers\"}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:46Z",
                        "labels": {
                            "app": "tekton-triggers-core-interceptors",
                            "app.kubernetes.io/component": "interceptors",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "tekton-triggers-core-interceptors",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "app.kubernetes.io/version": "v0.17.1",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:triggers.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"port\":80,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            }
                                        },
                                        "f:selector": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        },
                                        "f:sessionAffinity": {},
                                        "f:type": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:46Z"
                            }
                        ],
                        "name": "tekton-triggers-core-interceptors",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126110",
                        "uid": "32447e44-8cd7-4cb6-abaf-00b08827b73e"
                    },
                    "spec": {
                        "clusterIP": "10.245.255.196",
                        "clusterIPs": [
                            "10.245.255.196"
                        ],
                        "ipFamilies": [
                            "IPv4"
                        ],
                        "ipFamilyPolicy": "SingleStack",
                        "ports": [
                            {
                                "name": "http",
                                "port": 80,
                                "protocol": "TCP",
                                "targetPort": 8082
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/component": "interceptors",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/name": "core-interceptors",
                            "app.kubernetes.io/part-of": "tekton-triggers"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::tekton-dashboard-tenant",
                "custom": true,
                "id": "tekton-dashboard-tenant",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "name": "tekton-dashboard-tenant"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "dashboard.tekton.dev"
                            ],
                            "resources": [
                                "extensions"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events",
                                "namespaces",
                                "pods",
                                "pods/log"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "tasks",
                                "taskruns",
                                "pipelines",
                                "pipelineruns",
                                "pipelineresources",
                                "conditions",
                                "tasks/status",
                                "taskruns/status",
                                "pipelines/status",
                                "pipelineruns/status",
                                "taskruns/finalizers",
                                "pipelineruns/finalizers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "eventlisteners",
                                "triggerbindings",
                                "triggers",
                                "triggertemplates"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "tasks",
                                "taskruns",
                                "pipelines",
                                "pipelineruns",
                                "pipelineresources",
                                "conditions",
                                "taskruns/finalizers",
                                "pipelineruns/finalizers",
                                "tasks/status",
                                "taskruns/status",
                                "pipelines/status",
                                "pipelineruns/status"
                            ],
                            "verbs": [
                                "create",
                                "update",
                                "delete",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "eventlisteners",
                                "triggerbindings",
                                "triggers",
                                "triggertemplates"
                            ],
                            "verbs": [
                                "create",
                                "update",
                                "delete",
                                "patch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "dashboard",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-dashboard"
                            },
                            "name": "tekton-dashboard-tenant"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "dashboard.tekton.dev"
                                ],
                                "resources": [
                                    "extensions"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "events",
                                    "namespaces",
                                    "pods",
                                    "pods/log"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "tekton.dev"
                                ],
                                "resources": [
                                    "tasks",
                                    "taskruns",
                                    "pipelines",
                                    "pipelineruns",
                                    "pipelineresources",
                                    "conditions",
                                    "tasks/status",
                                    "taskruns/status",
                                    "pipelines/status",
                                    "pipelineruns/status",
                                    "taskruns/finalizers",
                                    "pipelineruns/finalizers"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "triggers.tekton.dev"
                                ],
                                "resources": [
                                    "eventlisteners",
                                    "triggerbindings",
                                    "triggers",
                                    "triggertemplates"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "tekton.dev"
                                ],
                                "resources": [
                                    "tasks",
                                    "taskruns",
                                    "pipelines",
                                    "pipelineruns",
                                    "pipelineresources",
                                    "conditions",
                                    "taskruns/finalizers",
                                    "pipelineruns/finalizers",
                                    "tasks/status",
                                    "taskruns/status",
                                    "pipelines/status",
                                    "pipelineruns/status"
                                ],
                                "verbs": [
                                    "create",
                                    "update",
                                    "delete",
                                    "patch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "triggers.tekton.dev"
                                ],
                                "resources": [
                                    "eventlisteners",
                                    "triggerbindings",
                                    "triggers",
                                    "triggertemplates"
                                ],
                                "verbs": [
                                    "create",
                                    "update",
                                    "delete",
                                    "patch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"dashboard\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-dashboard\"},\"name\":\"tekton-dashboard-tenant\"},\"rules\":[{\"apiGroups\":[\"dashboard.tekton.dev\"],\"resources\":[\"extensions\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"events\",\"namespaces\",\"pods\",\"pods/log\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"tekton.dev\"],\"resources\":[\"tasks\",\"taskruns\",\"pipelines\",\"pipelineruns\",\"pipelineresources\",\"conditions\",\"tasks/status\",\"taskruns/status\",\"pipelines/status\",\"pipelineruns/status\",\"taskruns/finalizers\",\"pipelineruns/finalizers\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"triggers.tekton.dev\"],\"resources\":[\"eventlisteners\",\"triggerbindings\",\"triggers\",\"triggertemplates\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"tekton.dev\"],\"resources\":[\"tasks\",\"taskruns\",\"pipelines\",\"pipelineruns\",\"pipelineresources\",\"conditions\",\"taskruns/finalizers\",\"pipelineruns/finalizers\",\"tasks/status\",\"taskruns/status\",\"pipelines/status\",\"pipelineruns/status\"],\"verbs\":[\"create\",\"update\",\"delete\",\"patch\"]},{\"apiGroups\":[\"triggers.tekton.dev\"],\"resources\":[\"eventlisteners\",\"triggerbindings\",\"triggers\",\"triggertemplates\"],\"verbs\":[\"create\",\"update\",\"delete\",\"patch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:42Z",
                        "labels": {
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:42Z"
                            }
                        ],
                        "name": "tekton-dashboard-tenant",
                        "resourceVersion": "126041",
                        "uid": "c4fb2832-4507-4b88-bc78-8092a4937303"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "dashboard.tekton.dev"
                            ],
                            "resources": [
                                "extensions"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events",
                                "namespaces",
                                "pods",
                                "pods/log"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "tasks",
                                "taskruns",
                                "pipelines",
                                "pipelineruns",
                                "pipelineresources",
                                "conditions",
                                "tasks/status",
                                "taskruns/status",
                                "pipelines/status",
                                "pipelineruns/status",
                                "taskruns/finalizers",
                                "pipelineruns/finalizers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "eventlisteners",
                                "triggerbindings",
                                "triggers",
                                "triggertemplates"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "tasks",
                                "taskruns",
                                "pipelines",
                                "pipelineruns",
                                "pipelineresources",
                                "conditions",
                                "taskruns/finalizers",
                                "pipelineruns/finalizers",
                                "tasks/status",
                                "taskruns/status",
                                "pipelines/status",
                                "pipelineruns/status"
                            ],
                            "verbs": [
                                "create",
                                "update",
                                "delete",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "eventlisteners",
                                "triggerbindings",
                                "triggers",
                                "triggertemplates"
                            ],
                            "verbs": [
                                "create",
                                "update",
                                "delete",
                                "patch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::tekton-dashboard-backend",
                "custom": true,
                "id": "tekton-dashboard-backend",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "name": "tekton-dashboard-backend"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "apiextensions.k8s.io"
                            ],
                            "resources": [
                                "customresourcedefinitions"
                            ],
                            "verbs": [
                                "get",
                                "list"
                            ]
                        },
                        {
                            "apiGroups": [
                                "security.openshift.io"
                            ],
                            "resources": [
                                "securitycontextconstraints"
                            ],
                            "verbs": [
                                "use"
                            ]
                        },
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "clustertasks",
                                "clustertasks/status"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "clusterinterceptors",
                                "clustertriggerbindings"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "serviceaccounts"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "dashboard.tekton.dev"
                            ],
                            "resources": [
                                "extensions"
                            ],
                            "verbs": [
                                "create",
                                "update",
                                "delete",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "clustertasks",
                                "clustertasks/status"
                            ],
                            "verbs": [
                                "create",
                                "update",
                                "delete",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "clusterinterceptors",
                                "clustertriggerbindings"
                            ],
                            "verbs": [
                                "create",
                                "update",
                                "delete",
                                "patch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/component": "dashboard",
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-dashboard"
                            },
                            "name": "tekton-dashboard-backend"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "apiextensions.k8s.io"
                                ],
                                "resources": [
                                    "customresourcedefinitions"
                                ],
                                "verbs": [
                                    "get",
                                    "list"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "security.openshift.io"
                                ],
                                "resources": [
                                    "securitycontextconstraints"
                                ],
                                "verbs": [
                                    "use"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "tekton.dev"
                                ],
                                "resources": [
                                    "clustertasks",
                                    "clustertasks/status"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "triggers.tekton.dev"
                                ],
                                "resources": [
                                    "clusterinterceptors",
                                    "clustertriggerbindings"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "serviceaccounts"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "dashboard.tekton.dev"
                                ],
                                "resources": [
                                    "extensions"
                                ],
                                "verbs": [
                                    "create",
                                    "update",
                                    "delete",
                                    "patch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "tekton.dev"
                                ],
                                "resources": [
                                    "clustertasks",
                                    "clustertasks/status"
                                ],
                                "verbs": [
                                    "create",
                                    "update",
                                    "delete",
                                    "patch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "triggers.tekton.dev"
                                ],
                                "resources": [
                                    "clusterinterceptors",
                                    "clustertriggerbindings"
                                ],
                                "verbs": [
                                    "create",
                                    "update",
                                    "delete",
                                    "patch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"dashboard\",\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-dashboard\"},\"name\":\"tekton-dashboard-backend\"},\"rules\":[{\"apiGroups\":[\"apiextensions.k8s.io\"],\"resources\":[\"customresourcedefinitions\"],\"verbs\":[\"get\",\"list\"]},{\"apiGroups\":[\"security.openshift.io\"],\"resources\":[\"securitycontextconstraints\"],\"verbs\":[\"use\"]},{\"apiGroups\":[\"tekton.dev\"],\"resources\":[\"clustertasks\",\"clustertasks/status\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"triggers.tekton.dev\"],\"resources\":[\"clusterinterceptors\",\"clustertriggerbindings\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"serviceaccounts\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"dashboard.tekton.dev\"],\"resources\":[\"extensions\"],\"verbs\":[\"create\",\"update\",\"delete\",\"patch\"]},{\"apiGroups\":[\"tekton.dev\"],\"resources\":[\"clustertasks\",\"clustertasks/status\"],\"verbs\":[\"create\",\"update\",\"delete\",\"patch\"]},{\"apiGroups\":[\"triggers.tekton.dev\"],\"resources\":[\"clusterinterceptors\",\"clustertriggerbindings\"],\"verbs\":[\"create\",\"update\",\"delete\",\"patch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:40Z",
                        "labels": {
                            "app.kubernetes.io/component": "dashboard",
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:40Z"
                            }
                        ],
                        "name": "tekton-dashboard-backend",
                        "resourceVersion": "125987",
                        "uid": "38d78c9e-f384-4be3-a8bb-f60f331cd975"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "apiextensions.k8s.io"
                            ],
                            "resources": [
                                "customresourcedefinitions"
                            ],
                            "verbs": [
                                "get",
                                "list"
                            ]
                        },
                        {
                            "apiGroups": [
                                "security.openshift.io"
                            ],
                            "resources": [
                                "securitycontextconstraints"
                            ],
                            "verbs": [
                                "use"
                            ]
                        },
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "clustertasks",
                                "clustertasks/status"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "clusterinterceptors",
                                "clustertriggerbindings"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "serviceaccounts"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "dashboard.tekton.dev"
                            ],
                            "resources": [
                                "extensions"
                            ],
                            "verbs": [
                                "create",
                                "update",
                                "delete",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "tekton.dev"
                            ],
                            "resources": [
                                "clustertasks",
                                "clustertasks/status"
                            ],
                            "verbs": [
                                "create",
                                "update",
                                "delete",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "triggers.tekton.dev"
                            ],
                            "resources": [
                                "clusterinterceptors",
                                "clustertriggerbindings"
                            ],
                            "verbs": [
                                "create",
                                "update",
                                "delete",
                                "patch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::clustertasks.tekton.dev",
                "custom": true,
                "id": "clustertasks.tekton.dev",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "name": "clustertasks.tekton.dev"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "Webhook",
                            "webhook": {
                                "clientConfig": {
                                    "service": {
                                        "name": "tekton-pipelines-webhook",
                                        "namespace": "tekton-pipelines"
                                    }
                                },
                                "conversionReviewVersions": [
                                    "v1beta1"
                                ]
                            }
                        },
                        "group": "tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "ClusterTask",
                            "plural": "clustertasks"
                        },
                        "preserveUnknownFields": false,
                        "scope": "Cluster",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "pipeline.tekton.dev/release": "v0.31.0",
                                "version": "v0.31.0"
                            },
                            "name": "clustertasks.tekton.dev"
                        },
                        "spec": {
                            "conversion": {
                                "strategy": "Webhook",
                                "webhook": {
                                    "clientConfig": {
                                        "service": {
                                            "name": "tekton-pipelines-webhook",
                                            "namespace": "tekton-pipelines"
                                        }
                                    },
                                    "conversionReviewVersions": [
                                        "v1beta1"
                                    ]
                                }
                            },
                            "group": "tekton.dev",
                            "names": {
                                "categories": [
                                    "tekton",
                                    "tekton-pipelines"
                                ],
                                "kind": "ClusterTask",
                                "plural": "clustertasks"
                            },
                            "preserveUnknownFields": false,
                            "scope": "Cluster",
                            "versions": [
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": false,
                                    "subresources": {
                                        "status": {}
                                    }
                                },
                                {
                                    "name": "v1beta1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {
                                        "status": {}
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"pipeline.tekton.dev/release\":\"v0.31.0\",\"version\":\"v0.31.0\"},\"name\":\"clustertasks.tekton.dev\"},\"spec\":{\"conversion\":{\"strategy\":\"Webhook\",\"webhook\":{\"clientConfig\":{\"service\":{\"name\":\"tekton-pipelines-webhook\",\"namespace\":\"tekton-pipelines\"}},\"conversionReviewVersions\":[\"v1beta1\"]}},\"group\":\"tekton.dev\",\"names\":{\"categories\":[\"tekton\",\"tekton-pipelines\"],\"kind\":\"ClusterTask\",\"plural\":\"clustertasks\"},\"preserveUnknownFields\":false,\"scope\":\"Cluster\",\"versions\":[{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":false,\"subresources\":{\"status\":{}}},{\"name\":\"v1beta1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:44Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:44Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:pipeline.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {},
                                            "f:webhook": {
                                                ".": {},
                                                "f:clientConfig": {
                                                    ".": {},
                                                    "f:service": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:namespace": {},
                                                        "f:port": {}
                                                    }
                                                },
                                                "f:conversionReviewVersions": {}
                                            }
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:44Z"
                            }
                        ],
                        "name": "clustertasks.tekton.dev",
                        "resourceVersion": "126075",
                        "uid": "29683042-5501-4761-9c45-e50816804964"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "Webhook",
                            "webhook": {
                                "clientConfig": {
                                    "service": {
                                        "name": "tekton-pipelines-webhook",
                                        "namespace": "tekton-pipelines",
                                        "port": 443
                                    }
                                },
                                "conversionReviewVersions": [
                                    "v1beta1"
                                ]
                            }
                        },
                        "group": "tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "ClusterTask",
                            "listKind": "ClusterTaskList",
                            "plural": "clustertasks",
                            "singular": "clustertask"
                        },
                        "scope": "Cluster",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "ClusterTask",
                            "listKind": "ClusterTaskList",
                            "plural": "clustertasks",
                            "singular": "clustertask"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:45:44Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:45:45Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1beta1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::pipelineresources.tekton.dev",
                "custom": true,
                "id": "pipelineresources.tekton.dev",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "name": "pipelineresources.tekton.dev"
                    },
                    "spec": {
                        "group": "tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "PipelineResource",
                            "plural": "pipelineresources"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "pipeline.tekton.dev/release": "v0.31.0",
                                "version": "v0.31.0"
                            },
                            "name": "pipelineresources.tekton.dev"
                        },
                        "spec": {
                            "group": "tekton.dev",
                            "names": {
                                "categories": [
                                    "tekton",
                                    "tekton-pipelines"
                                ],
                                "kind": "PipelineResource",
                                "plural": "pipelineresources"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {
                                        "status": {}
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"pipeline.tekton.dev/release\":\"v0.31.0\",\"version\":\"v0.31.0\"},\"name\":\"pipelineresources.tekton.dev\"},\"spec\":{\"group\":\"tekton.dev\",\"names\":{\"categories\":[\"tekton\",\"tekton-pipelines\"],\"kind\":\"PipelineResource\",\"plural\":\"pipelineresources\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:43Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:43Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:pipeline.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:43Z"
                            }
                        ],
                        "name": "pipelineresources.tekton.dev",
                        "resourceVersion": "126059",
                        "uid": "a93921a2-d7b0-4ed5-b42c-3c50598911e9"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "PipelineResource",
                            "listKind": "PipelineResourceList",
                            "plural": "pipelineresources",
                            "singular": "pipelineresource"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "PipelineResource",
                            "listKind": "PipelineResourceList",
                            "plural": "pipelineresources",
                            "singular": "pipelineresource"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:45:43Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:45:43Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1alpha1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:triggers.tekton.dev/v1alpha1:ClusterInterceptor::gitlab",
                "custom": true,
                "id": "gitlab",
                "type": "kubernetes:triggers.tekton.dev/v1alpha1:ClusterInterceptor",
                "inputs": {
                    "apiVersion": "triggers.tekton.dev/v1alpha1",
                    "kind": "ClusterInterceptor",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "gitlab"
                    },
                    "spec": {
                        "clientConfig": {
                            "service": {
                                "name": "tekton-triggers-core-interceptors",
                                "namespace": "tekton-pipelines",
                                "path": "gitlab"
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "triggers.tekton.dev/v1alpha1",
                    "__inputs": {
                        "apiVersion": "triggers.tekton.dev/v1alpha1",
                        "kind": "ClusterInterceptor",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "gitlab"
                        },
                        "spec": {
                            "clientConfig": {
                                "service": {
                                    "name": "tekton-triggers-core-interceptors",
                                    "namespace": "tekton-pipelines",
                                    "path": "gitlab"
                                }
                            }
                        }
                    },
                    "apiVersion": "triggers.tekton.dev/v1alpha1",
                    "kind": "ClusterInterceptor",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"triggers.tekton.dev/v1alpha1\",\"kind\":\"ClusterInterceptor\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"gitlab\"},\"spec\":{\"clientConfig\":{\"service\":{\"name\":\"tekton-triggers-core-interceptors\",\"namespace\":\"tekton-pipelines\",\"path\":\"gitlab\"}}}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:12Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "triggers.tekton.dev/v1alpha1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        ".": {},
                                        "f:clientConfig": {
                                            ".": {},
                                            "f:service": {
                                                ".": {},
                                                "f:name": {},
                                                "f:namespace": {},
                                                "f:path": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:12Z"
                            }
                        ],
                        "name": "gitlab",
                        "resourceVersion": "125929",
                        "uid": "1dee98e2-c129-4c85-8a5f-74ad1ea99517"
                    },
                    "spec": {
                        "clientConfig": {
                            "service": {
                                "name": "tekton-triggers-core-interceptors",
                                "namespace": "tekton-pipelines",
                                "path": "gitlab"
                            }
                        }
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::pipelineruns.tekton.dev",
                "custom": true,
                "id": "pipelineruns.tekton.dev",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "name": "pipelineruns.tekton.dev"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "Webhook",
                            "webhook": {
                                "clientConfig": {
                                    "service": {
                                        "name": "tekton-pipelines-webhook",
                                        "namespace": "tekton-pipelines"
                                    }
                                },
                                "conversionReviewVersions": [
                                    "v1beta1"
                                ]
                            }
                        },
                        "group": "tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "PipelineRun",
                            "plural": "pipelineruns",
                            "shortNames": [
                                "pr",
                                "prs"
                            ]
                        },
                        "preserveUnknownFields": false,
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status",
                                        "name": "Succeeded",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.startTime",
                                        "name": "StartTime",
                                        "type": "date"
                                    },
                                    {
                                        "jsonPath": ".status.completionTime",
                                        "name": "CompletionTime",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status",
                                        "name": "Succeeded",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.startTime",
                                        "name": "StartTime",
                                        "type": "date"
                                    },
                                    {
                                        "jsonPath": ".status.completionTime",
                                        "name": "CompletionTime",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "pipeline.tekton.dev/release": "v0.31.0",
                                "version": "v0.31.0"
                            },
                            "name": "pipelineruns.tekton.dev"
                        },
                        "spec": {
                            "conversion": {
                                "strategy": "Webhook",
                                "webhook": {
                                    "clientConfig": {
                                        "service": {
                                            "name": "tekton-pipelines-webhook",
                                            "namespace": "tekton-pipelines"
                                        }
                                    },
                                    "conversionReviewVersions": [
                                        "v1beta1"
                                    ]
                                }
                            },
                            "group": "tekton.dev",
                            "names": {
                                "categories": [
                                    "tekton",
                                    "tekton-pipelines"
                                ],
                                "kind": "PipelineRun",
                                "plural": "pipelineruns",
                                "shortNames": [
                                    "pr",
                                    "prs"
                                ]
                            },
                            "preserveUnknownFields": false,
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "additionalPrinterColumns": [
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status",
                                            "name": "Succeeded",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason",
                                            "name": "Reason",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.startTime",
                                            "name": "StartTime",
                                            "type": "date"
                                        },
                                        {
                                            "jsonPath": ".status.completionTime",
                                            "name": "CompletionTime",
                                            "type": "date"
                                        }
                                    ],
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": false,
                                    "subresources": {
                                        "status": {}
                                    }
                                },
                                {
                                    "additionalPrinterColumns": [
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status",
                                            "name": "Succeeded",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason",
                                            "name": "Reason",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.startTime",
                                            "name": "StartTime",
                                            "type": "date"
                                        },
                                        {
                                            "jsonPath": ".status.completionTime",
                                            "name": "CompletionTime",
                                            "type": "date"
                                        }
                                    ],
                                    "name": "v1beta1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {
                                        "status": {}
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"pipeline.tekton.dev/release\":\"v0.31.0\",\"version\":\"v0.31.0\"},\"name\":\"pipelineruns.tekton.dev\"},\"spec\":{\"conversion\":{\"strategy\":\"Webhook\",\"webhook\":{\"clientConfig\":{\"service\":{\"name\":\"tekton-pipelines-webhook\",\"namespace\":\"tekton-pipelines\"}},\"conversionReviewVersions\":[\"v1beta1\"]}},\"group\":\"tekton.dev\",\"names\":{\"categories\":[\"tekton\",\"tekton-pipelines\"],\"kind\":\"PipelineRun\",\"plural\":\"pipelineruns\",\"shortNames\":[\"pr\",\"prs\"]},\"preserveUnknownFields\":false,\"scope\":\"Namespaced\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.conditions[?(@.type==\\\"Succeeded\\\")].status\",\"name\":\"Succeeded\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Succeeded\\\")].reason\",\"name\":\"Reason\",\"type\":\"string\"},{\"jsonPath\":\".status.startTime\",\"name\":\"StartTime\",\"type\":\"date\"},{\"jsonPath\":\".status.completionTime\",\"name\":\"CompletionTime\",\"type\":\"date\"}],\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":false,\"subresources\":{\"status\":{}}},{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.conditions[?(@.type==\\\"Succeeded\\\")].status\",\"name\":\"Succeeded\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Succeeded\\\")].reason\",\"name\":\"Reason\",\"type\":\"string\"},{\"jsonPath\":\".status.startTime\",\"name\":\"StartTime\",\"type\":\"date\"},{\"jsonPath\":\".status.completionTime\",\"name\":\"CompletionTime\",\"type\":\"date\"}],\"name\":\"v1beta1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:46Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:46Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:pipeline.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {},
                                            "f:webhook": {
                                                ".": {},
                                                "f:clientConfig": {
                                                    ".": {},
                                                    "f:service": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:namespace": {},
                                                        "f:port": {}
                                                    }
                                                },
                                                "f:conversionReviewVersions": {}
                                            }
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:46Z"
                            }
                        ],
                        "name": "pipelineruns.tekton.dev",
                        "resourceVersion": "126101",
                        "uid": "33ab2725-6653-481e-8d4d-70360736c479"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "Webhook",
                            "webhook": {
                                "clientConfig": {
                                    "service": {
                                        "name": "tekton-pipelines-webhook",
                                        "namespace": "tekton-pipelines",
                                        "port": 443
                                    }
                                },
                                "conversionReviewVersions": [
                                    "v1beta1"
                                ]
                            }
                        },
                        "group": "tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "PipelineRun",
                            "listKind": "PipelineRunList",
                            "plural": "pipelineruns",
                            "shortNames": [
                                "pr",
                                "prs"
                            ],
                            "singular": "pipelinerun"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status",
                                        "name": "Succeeded",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.startTime",
                                        "name": "StartTime",
                                        "type": "date"
                                    },
                                    {
                                        "jsonPath": ".status.completionTime",
                                        "name": "CompletionTime",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status",
                                        "name": "Succeeded",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.startTime",
                                        "name": "StartTime",
                                        "type": "date"
                                    },
                                    {
                                        "jsonPath": ".status.completionTime",
                                        "name": "CompletionTime",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "PipelineRun",
                            "listKind": "PipelineRunList",
                            "plural": "pipelineruns",
                            "shortNames": [
                                "pr",
                                "prs"
                            ],
                            "singular": "pipelinerun"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:45:46Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:45:46Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1beta1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::conditions.tekton.dev",
                "custom": true,
                "id": "conditions.tekton.dev",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "name": "conditions.tekton.dev"
                    },
                    "spec": {
                        "group": "tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "Condition",
                            "plural": "conditions"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "pipeline.tekton.dev/release": "v0.31.0",
                                "version": "v0.31.0"
                            },
                            "name": "conditions.tekton.dev"
                        },
                        "spec": {
                            "group": "tekton.dev",
                            "names": {
                                "categories": [
                                    "tekton",
                                    "tekton-pipelines"
                                ],
                                "kind": "Condition",
                                "plural": "conditions"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {
                                        "status": {}
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"pipeline.tekton.dev/release\":\"v0.31.0\",\"version\":\"v0.31.0\"},\"name\":\"conditions.tekton.dev\"},\"spec\":{\"group\":\"tekton.dev\",\"names\":{\"categories\":[\"tekton\",\"tekton-pipelines\"],\"kind\":\"Condition\",\"plural\":\"conditions\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:40Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:40Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:pipeline.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:40Z"
                            }
                        ],
                        "name": "conditions.tekton.dev",
                        "resourceVersion": "125996",
                        "uid": "5be81830-eae4-4ac8-a0d7-4845ed11ae73"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "Condition",
                            "listKind": "ConditionList",
                            "plural": "conditions",
                            "singular": "condition"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "Condition",
                            "listKind": "ConditionList",
                            "plural": "conditions",
                            "singular": "condition"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:45:40Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:45:40Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1alpha1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::clustertriggerbindings.triggers.tekton.dev",
                "custom": true,
                "id": "clustertriggerbindings.triggers.tekton.dev",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "name": "clustertriggerbindings.triggers.tekton.dev"
                    },
                    "spec": {
                        "group": "triggers.tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "ClusterTriggerBinding",
                            "plural": "clustertriggerbindings",
                            "shortNames": [
                                "ctb"
                            ],
                            "singular": "clustertriggerbinding"
                        },
                        "scope": "Cluster",
                        "versions": [
                            {
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-triggers",
                                "triggers.tekton.dev/release": "v0.17.1",
                                "version": "v0.17.1"
                            },
                            "name": "clustertriggerbindings.triggers.tekton.dev"
                        },
                        "spec": {
                            "group": "triggers.tekton.dev",
                            "names": {
                                "categories": [
                                    "tekton",
                                    "tekton-triggers"
                                ],
                                "kind": "ClusterTriggerBinding",
                                "plural": "clustertriggerbindings",
                                "shortNames": [
                                    "ctb"
                                ],
                                "singular": "clustertriggerbinding"
                            },
                            "scope": "Cluster",
                            "versions": [
                                {
                                    "name": "v1beta1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {
                                        "status": {}
                                    }
                                },
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": false,
                                    "subresources": {
                                        "status": {}
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-triggers\",\"triggers.tekton.dev/release\":\"v0.17.1\",\"version\":\"v0.17.1\"},\"name\":\"clustertriggerbindings.triggers.tekton.dev\"},\"spec\":{\"group\":\"triggers.tekton.dev\",\"names\":{\"categories\":[\"tekton\",\"tekton-triggers\"],\"kind\":\"ClusterTriggerBinding\",\"plural\":\"clustertriggerbindings\",\"shortNames\":[\"ctb\"],\"singular\":\"clustertriggerbinding\"},\"scope\":\"Cluster\",\"versions\":[{\"name\":\"v1beta1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}},{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":false,\"subresources\":{\"status\":{}}}]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:05Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-triggers",
                            "triggers.tekton.dev/release": "v0.17.1",
                            "version": "v0.17.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:05Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:triggers.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:05Z"
                            }
                        ],
                        "name": "clustertriggerbindings.triggers.tekton.dev",
                        "resourceVersion": "125891",
                        "uid": "289f8aea-4ad4-454f-a52b-c15c2106ebfb"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "triggers.tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "ClusterTriggerBinding",
                            "listKind": "ClusterTriggerBindingList",
                            "plural": "clustertriggerbindings",
                            "shortNames": [
                                "ctb"
                            ],
                            "singular": "clustertriggerbinding"
                        },
                        "scope": "Cluster",
                        "versions": [
                            {
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "categories": [
                                "tekton",
                                "tekton-triggers"
                            ],
                            "kind": "ClusterTriggerBinding",
                            "listKind": "ClusterTriggerBindingList",
                            "plural": "clustertriggerbindings",
                            "shortNames": [
                                "ctb"
                            ],
                            "singular": "clustertriggerbinding"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:45:05Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:45:05Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1beta1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::runs.tekton.dev",
                "custom": true,
                "id": "runs.tekton.dev",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "name": "runs.tekton.dev"
                    },
                    "spec": {
                        "group": "tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "Run",
                            "plural": "runs"
                        },
                        "preserveUnknownFields": false,
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status",
                                        "name": "Succeeded",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.startTime",
                                        "name": "StartTime",
                                        "type": "date"
                                    },
                                    {
                                        "jsonPath": ".status.completionTime",
                                        "name": "CompletionTime",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "pipeline.tekton.dev/release": "v0.31.0",
                                "version": "v0.31.0"
                            },
                            "name": "runs.tekton.dev"
                        },
                        "spec": {
                            "group": "tekton.dev",
                            "names": {
                                "categories": [
                                    "tekton",
                                    "tekton-pipelines"
                                ],
                                "kind": "Run",
                                "plural": "runs"
                            },
                            "preserveUnknownFields": false,
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "additionalPrinterColumns": [
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status",
                                            "name": "Succeeded",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason",
                                            "name": "Reason",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.startTime",
                                            "name": "StartTime",
                                            "type": "date"
                                        },
                                        {
                                            "jsonPath": ".status.completionTime",
                                            "name": "CompletionTime",
                                            "type": "date"
                                        }
                                    ],
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {
                                        "status": {}
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"pipeline.tekton.dev/release\":\"v0.31.0\",\"version\":\"v0.31.0\"},\"name\":\"runs.tekton.dev\"},\"spec\":{\"group\":\"tekton.dev\",\"names\":{\"categories\":[\"tekton\",\"tekton-pipelines\"],\"kind\":\"Run\",\"plural\":\"runs\"},\"preserveUnknownFields\":false,\"scope\":\"Namespaced\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.conditions[?(@.type==\\\"Succeeded\\\")].status\",\"name\":\"Succeeded\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Succeeded\\\")].reason\",\"name\":\"Reason\",\"type\":\"string\"},{\"jsonPath\":\".status.startTime\",\"name\":\"StartTime\",\"type\":\"date\"},{\"jsonPath\":\".status.completionTime\",\"name\":\"CompletionTime\",\"type\":\"date\"}],\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:58Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:58Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:pipeline.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:58Z"
                            }
                        ],
                        "name": "runs.tekton.dev",
                        "resourceVersion": "126163",
                        "uid": "8d873f9e-566b-4b56-90e0-13ad6efa44e3"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "Run",
                            "listKind": "RunList",
                            "plural": "runs",
                            "singular": "run"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status",
                                        "name": "Succeeded",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason",
                                        "name": "Reason",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.startTime",
                                        "name": "StartTime",
                                        "type": "date"
                                    },
                                    {
                                        "jsonPath": ".status.completionTime",
                                        "name": "CompletionTime",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "Run",
                            "listKind": "RunList",
                            "plural": "runs",
                            "singular": "run"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:45:58Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:45:58Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1alpha1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:Role::tekton-pipelines/tekton-dashboard-info",
                "custom": true,
                "id": "tekton-pipelines/tekton-dashboard-info",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:Role",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "name": "tekton-dashboard-info",
                        "namespace": "tekton-pipelines"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "dashboard-info"
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "Role",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-dashboard"
                            },
                            "name": "tekton-dashboard-info",
                            "namespace": "tekton-pipelines"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resourceNames": [
                                    "dashboard-info"
                                ],
                                "resources": [
                                    "configmaps"
                                ],
                                "verbs": [
                                    "get"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"Role\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-dashboard\"},\"name\":\"tekton-dashboard-info\",\"namespace\":\"tekton-pipelines\"},\"rules\":[{\"apiGroups\":[\"\"],\"resourceNames\":[\"dashboard-info\"],\"resources\":[\"configmaps\"],\"verbs\":[\"get\"]}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:02Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-dashboard"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:02Z"
                            }
                        ],
                        "name": "tekton-dashboard-info",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "125872",
                        "uid": "45f7a9ea-1256-4ae6-89eb-d65bada7f73b"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "dashboard-info"
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::tekton-pipelines/tekton-pipelines-info",
                "custom": true,
                "id": "tekton-pipelines/tekton-pipelines-info",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "name": "tekton-pipelines-info",
                        "namespace": "tekton-pipelines"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-pipelines-info"
                    },
                    "subjects": [
                        {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Group",
                            "name": "system:authenticated"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines"
                            },
                            "name": "tekton-pipelines-info",
                            "namespace": "tekton-pipelines"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "tekton-pipelines-info"
                        },
                        "subjects": [
                            {
                                "apiGroup": "rbac.authorization.k8s.io",
                                "kind": "Group",
                                "name": "system:authenticated"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\"},\"name\":\"tekton-pipelines-info\",\"namespace\":\"tekton-pipelines\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"tekton-pipelines-info\"},\"subjects\":[{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Group\",\"name\":\"system:authenticated\"}]}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:41Z",
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:41Z"
                            }
                        ],
                        "name": "tekton-pipelines-info",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "126027",
                        "uid": "c6a01cd6-807f-4650-bef7-b70de8de5f2a"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "tekton-pipelines-info"
                    },
                    "subjects": [
                        {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Group",
                            "name": "system:authenticated"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:core/v1:ConfigMap::tekton-pipelines/config-artifact-pvc",
                "custom": true,
                "id": "tekton-pipelines/config-artifact-pvc",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "size": "10Gi",
                        "storageClassName": "do-block-storage"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "config-artifact-pvc",
                        "namespace": "tekton-pipelines"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "size": "10Gi",
                            "storageClassName": "do-block-storage"
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "config-artifact-pvc",
                            "namespace": "tekton-pipelines"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "size": "10Gi",
                        "storageClassName": "do-block-storage"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"size\":\"10Gi\",\"storageClassName\":\"do-block-storage\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"config-artifact-pvc\",\"namespace\":\"tekton-pipelines\"}}\n"
                        },
                        "creationTimestamp": "2021-12-31T19:54:12Z",
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:data": {
                                        ".": {},
                                        "f:size": {},
                                        "f:storageClassName": {}
                                    },
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:54:12Z"
                            }
                        ],
                        "name": "config-artifact-pvc",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "8922769",
                        "uid": "0a74b7f1-58f3-4f5d-b2b2-5de128c991e8"
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::configmap-pv",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "data": [],
                    "kind": [],
                    "metadata": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::pipelines.tekton.dev",
                "custom": true,
                "id": "pipelines.tekton.dev",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "name": "pipelines.tekton.dev"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "Webhook",
                            "webhook": {
                                "clientConfig": {
                                    "service": {
                                        "name": "tekton-pipelines-webhook",
                                        "namespace": "tekton-pipelines"
                                    }
                                },
                                "conversionReviewVersions": [
                                    "v1beta1"
                                ]
                            }
                        },
                        "group": "tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "Pipeline",
                            "plural": "pipelines"
                        },
                        "preserveUnknownFields": false,
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/instance": "default",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/part-of": "tekton-pipelines",
                                "pipeline.tekton.dev/release": "v0.31.0",
                                "version": "v0.31.0"
                            },
                            "name": "pipelines.tekton.dev"
                        },
                        "spec": {
                            "conversion": {
                                "strategy": "Webhook",
                                "webhook": {
                                    "clientConfig": {
                                        "service": {
                                            "name": "tekton-pipelines-webhook",
                                            "namespace": "tekton-pipelines"
                                        }
                                    },
                                    "conversionReviewVersions": [
                                        "v1beta1"
                                    ]
                                }
                            },
                            "group": "tekton.dev",
                            "names": {
                                "categories": [
                                    "tekton",
                                    "tekton-pipelines"
                                ],
                                "kind": "Pipeline",
                                "plural": "pipelines"
                            },
                            "preserveUnknownFields": false,
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": false,
                                    "subresources": {
                                        "status": {}
                                    }
                                },
                                {
                                    "name": "v1beta1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {
                                        "status": {}
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"default\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/part-of\":\"tekton-pipelines\",\"pipeline.tekton.dev/release\":\"v0.31.0\",\"version\":\"v0.31.0\"},\"name\":\"pipelines.tekton.dev\"},\"spec\":{\"conversion\":{\"strategy\":\"Webhook\",\"webhook\":{\"clientConfig\":{\"service\":{\"name\":\"tekton-pipelines-webhook\",\"namespace\":\"tekton-pipelines\"}},\"conversionReviewVersions\":[\"v1beta1\"]}},\"group\":\"tekton.dev\",\"names\":{\"categories\":[\"tekton\",\"tekton-pipelines\"],\"kind\":\"Pipeline\",\"plural\":\"pipelines\"},\"preserveUnknownFields\":false,\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":false,\"subresources\":{\"status\":{}}},{\"name\":\"v1beta1\",\"schema\":{\"openAPIV3Schema\":{\"type\":\"object\",\"x-kubernetes-preserve-unknown-fields\":true}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
                        },
                        "creationTimestamp": "2021-12-19T03:45:40Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/instance": "default",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/part-of": "tekton-pipelines",
                            "pipeline.tekton.dev/release": "v0.31.0",
                            "version": "v0.31.0"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:40Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:pipeline.tekton.dev/release": {},
                                            "f:version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {},
                                            "f:webhook": {
                                                ".": {},
                                                "f:clientConfig": {
                                                    ".": {},
                                                    "f:service": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:namespace": {},
                                                        "f:port": {}
                                                    }
                                                },
                                                "f:conversionReviewVersions": {}
                                            }
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-19T03:45:40Z"
                            }
                        ],
                        "name": "pipelines.tekton.dev",
                        "resourceVersion": "126003",
                        "uid": "56f07738-fe3d-4605-9824-708188215d36"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "Webhook",
                            "webhook": {
                                "clientConfig": {
                                    "service": {
                                        "name": "tekton-pipelines-webhook",
                                        "namespace": "tekton-pipelines",
                                        "port": 443
                                    }
                                },
                                "conversionReviewVersions": [
                                    "v1beta1"
                                ]
                            }
                        },
                        "group": "tekton.dev",
                        "names": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "Pipeline",
                            "listKind": "PipelineList",
                            "plural": "pipelines",
                            "singular": "pipeline"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "categories": [
                                "tekton",
                                "tekton-pipelines"
                            ],
                            "kind": "Pipeline",
                            "listKind": "PipelineList",
                            "plural": "pipelines",
                            "singular": "pipeline"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T03:45:40Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T03:45:40Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1beta1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigGroup::tekton",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::digitalocean:index/certificate:Certificate::cert",
                "custom": true,
                "id": "cert-b1cba98",
                "type": "digitalocean:index/certificate:Certificate",
                "inputs": {
                    "__defaults": [
                        "name"
                    ],
                    "domains": [
                        "*.fulldeploy.dev"
                    ],
                    "name": "cert-b1cba98",
                    "type": "lets_encrypt"
                },
                "outputs": {
                    "__meta": "{\"schema_version\":\"1\"}",
                    "domains": [
                        "fulldeploy.dev",
                        "*.fulldeploy.dev"
                    ],
                    "id": "cert-b1cba98",
                    "name": "cert-b1cba98",
                    "notAfter": "2022-03-31T19:41:53Z",
                    "sha1Fingerprint": "f65b5279a04f2d1239830b6e58f9a5f2f8bc236c",
                    "state": "verified",
                    "type": "lets_encrypt",
                    "uuid": "b516cb94-730f-4134-b5bb-5736915d0c35"
                },
                "parent": "urn:pulumi:dev::cluster-resources::pulumi:pulumi:Stack::cluster-resources-dev",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:digitalocean::default::0bc20902-3f78-4b61-8f45-9509413ad1dd",
                "propertyDependencies": {
                    "domains": [],
                    "type": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:core/v1:ServiceAccount::networking/traefik",
                "custom": true,
                "id": "networking/traefik",
                "type": "kubernetes:core/v1:ServiceAccount",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "annotations": {
                            "pulumi.com/skipAwait": "true"
                        },
                        "labels": {
                            "app.kubernetes.io/instance": "traefik",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "traefik",
                            "helm.sh/chart": "traefik-10.7.1"
                        },
                        "name": "traefik",
                        "namespace": "networking"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ServiceAccount",
                        "metadata": {
                            "annotations": {
                                "pulumi.com/skipAwait": "true"
                            },
                            "labels": {
                                "app.kubernetes.io/instance": "traefik",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "traefik",
                                "helm.sh/chart": "traefik-10.7.1"
                            },
                            "name": "traefik",
                            "namespace": "networking"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"annotations\":{\"pulumi.com/skipAwait\":\"true\"},\"labels\":{\"app.kubernetes.io/instance\":\"traefik\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"traefik\",\"helm.sh/chart\":\"traefik-10.7.1\"},\"name\":\"traefik\",\"namespace\":\"networking\"}}\n",
                            "pulumi.com/skipAwait": "true"
                        },
                        "creationTimestamp": "2021-12-19T00:10:59Z",
                        "labels": {
                            "app.kubernetes.io/instance": "traefik",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "traefik",
                            "helm.sh/chart": "traefik-10.7.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:secrets": {
                                        ".": {},
                                        "k:{\"name\":\"traefik-token-7br2n\"}": {
                                            ".": {},
                                            "f:name": {}
                                        }
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:59Z"
                            },
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {},
                                            "f:pulumi.com/skipAwait": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:helm.sh/chart": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:54:13Z"
                            }
                        ],
                        "name": "traefik",
                        "namespace": "networking",
                        "resourceVersion": "8922786",
                        "uid": "22508825-9261-4f79-a91d-e46e062fe09b"
                    },
                    "secrets": [
                        {
                            "name": "traefik-token-7br2n"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart::traefik",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": []
                },
                "aliases": [
                    "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:ServiceAccount::networking/traefik"
                ]
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::middlewaretcps.traefik.containo.us",
                "custom": true,
                "id": "middlewaretcps.traefik.containo.us",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "pulumi.com/skipAwait": "true"
                        },
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "middlewaretcps.traefik.containo.us"
                    },
                    "spec": {
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "MiddlewareTCP",
                            "listKind": "MiddlewareTCPList",
                            "plural": "middlewaretcps",
                            "singular": "middlewaretcp"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "MiddlewareTCP is a specification for a MiddlewareTCP resource.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "MiddlewareTCPSpec holds the MiddlewareTCP configuration.",
                                                "properties": {
                                                    "ipWhiteList": {
                                                        "description": "TCPIPWhiteList holds the TCP ip white list configuration.",
                                                        "properties": {
                                                            "sourceRange": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "",
                            "plural": ""
                        },
                        "conditions": [],
                        "storedVersions": []
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "annotations": {
                                "controller-gen.kubebuilder.io/version": "v0.4.1",
                                "pulumi.com/skipAwait": "true"
                            },
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "middlewaretcps.traefik.containo.us"
                        },
                        "spec": {
                            "group": "traefik.containo.us",
                            "names": {
                                "kind": "MiddlewareTCP",
                                "listKind": "MiddlewareTCPList",
                                "plural": "middlewaretcps",
                                "singular": "middlewaretcp"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "MiddlewareTCP is a specification for a MiddlewareTCP resource.",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "MiddlewareTCPSpec holds the MiddlewareTCP configuration.",
                                                    "properties": {
                                                        "ipWhiteList": {
                                                            "description": "TCPIPWhiteList holds the TCP ip white list configuration.",
                                                            "properties": {
                                                                "sourceRange": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "metadata",
                                                "spec"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "served": true,
                                    "storage": true
                                }
                            ]
                        },
                        "status": {
                            "acceptedNames": {
                                "kind": "",
                                "plural": ""
                            },
                            "conditions": [],
                            "storedVersions": []
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.4.1\",\"pulumi.com/skipAwait\":\"true\"},\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"middlewaretcps.traefik.containo.us\"},\"spec\":{\"group\":\"traefik.containo.us\",\"names\":{\"kind\":\"MiddlewareTCP\",\"listKind\":\"MiddlewareTCPList\",\"plural\":\"middlewaretcps\",\"singular\":\"middlewaretcp\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"MiddlewareTCP is a specification for a MiddlewareTCP resource.\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"MiddlewareTCPSpec holds the MiddlewareTCP configuration.\",\"properties\":{\"ipWhiteList\":{\"description\":\"TCPIPWhiteList holds the TCP ip white list configuration.\",\"properties\":{\"sourceRange\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"required\":[\"metadata\",\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true}]},\"status\":{\"acceptedNames\":{\"kind\":\"\",\"plural\":\"\"},\"conditions\":[],\"storedVersions\":[]}}\n",
                            "pulumi.com/skipAwait": "true"
                        },
                        "creationTimestamp": "2021-12-19T00:10:59Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:59Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:controller-gen.kubebuilder.io/version": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {},
                                            "f:pulumi.com/skipAwait": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:54:13Z"
                            }
                        ],
                        "name": "middlewaretcps.traefik.containo.us",
                        "resourceVersion": "8922788",
                        "uid": "8485aaed-4bdc-46b9-b0a1-221ae249db6d"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "MiddlewareTCP",
                            "listKind": "MiddlewareTCPList",
                            "plural": "middlewaretcps",
                            "singular": "middlewaretcp"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "MiddlewareTCP is a specification for a MiddlewareTCP resource.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "MiddlewareTCPSpec holds the MiddlewareTCP configuration.",
                                                "properties": {
                                                    "ipWhiteList": {
                                                        "description": "TCPIPWhiteList holds the TCP ip white list configuration.",
                                                        "properties": {
                                                            "sourceRange": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "MiddlewareTCP",
                            "listKind": "MiddlewareTCPList",
                            "plural": "middlewaretcps",
                            "singular": "middlewaretcp"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T00:10:59Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T00:10:59Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1alpha1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart::traefik",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": [],
                    "status": []
                },
                "aliases": [
                    "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v2:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::middlewaretcps.traefik.containo.us"
                ]
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::tlsoptions.traefik.containo.us",
                "custom": true,
                "id": "tlsoptions.traefik.containo.us",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "pulumi.com/skipAwait": "true"
                        },
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "tlsoptions.traefik.containo.us"
                    },
                    "spec": {
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "TLSOption",
                            "listKind": "TLSOptionList",
                            "plural": "tlsoptions",
                            "singular": "tlsoption"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "TLSOption is a specification for a TLSOption resource.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "TLSOptionSpec configures TLS for an entry point.",
                                                "properties": {
                                                    "alpnProtocols": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "cipherSuites": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "clientAuth": {
                                                        "description": "ClientAuth defines the parameters of the client authentication part of the TLS connection, if any.",
                                                        "properties": {
                                                            "clientAuthType": {
                                                                "description": "ClientAuthType defines the client authentication type to apply.",
                                                                "enum": [
                                                                    "NoClientCert",
                                                                    "RequestClientCert",
                                                                    "RequireAnyClientCert",
                                                                    "VerifyClientCertIfGiven",
                                                                    "RequireAndVerifyClientCert"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "secretNames": {
                                                                "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "curvePreferences": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "maxVersion": {
                                                        "type": "string"
                                                    },
                                                    "minVersion": {
                                                        "type": "string"
                                                    },
                                                    "preferServerCipherSuites": {
                                                        "type": "boolean"
                                                    },
                                                    "sniStrict": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "",
                            "plural": ""
                        },
                        "conditions": [],
                        "storedVersions": []
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "annotations": {
                                "controller-gen.kubebuilder.io/version": "v0.4.1",
                                "pulumi.com/skipAwait": "true"
                            },
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "tlsoptions.traefik.containo.us"
                        },
                        "spec": {
                            "group": "traefik.containo.us",
                            "names": {
                                "kind": "TLSOption",
                                "listKind": "TLSOptionList",
                                "plural": "tlsoptions",
                                "singular": "tlsoption"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "TLSOption is a specification for a TLSOption resource.",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "TLSOptionSpec configures TLS for an entry point.",
                                                    "properties": {
                                                        "alpnProtocols": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "cipherSuites": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "clientAuth": {
                                                            "description": "ClientAuth defines the parameters of the client authentication part of the TLS connection, if any.",
                                                            "properties": {
                                                                "clientAuthType": {
                                                                    "description": "ClientAuthType defines the client authentication type to apply.",
                                                                    "enum": [
                                                                        "NoClientCert",
                                                                        "RequestClientCert",
                                                                        "RequireAnyClientCert",
                                                                        "VerifyClientCertIfGiven",
                                                                        "RequireAndVerifyClientCert"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "secretNames": {
                                                                    "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "curvePreferences": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "maxVersion": {
                                                            "type": "string"
                                                        },
                                                        "minVersion": {
                                                            "type": "string"
                                                        },
                                                        "preferServerCipherSuites": {
                                                            "type": "boolean"
                                                        },
                                                        "sniStrict": {
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "metadata",
                                                "spec"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "served": true,
                                    "storage": true
                                }
                            ]
                        },
                        "status": {
                            "acceptedNames": {
                                "kind": "",
                                "plural": ""
                            },
                            "conditions": [],
                            "storedVersions": []
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.4.1\",\"pulumi.com/skipAwait\":\"true\"},\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"tlsoptions.traefik.containo.us\"},\"spec\":{\"group\":\"traefik.containo.us\",\"names\":{\"kind\":\"TLSOption\",\"listKind\":\"TLSOptionList\",\"plural\":\"tlsoptions\",\"singular\":\"tlsoption\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"TLSOption is a specification for a TLSOption resource.\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"TLSOptionSpec configures TLS for an entry point.\",\"properties\":{\"alpnProtocols\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"cipherSuites\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"clientAuth\":{\"description\":\"ClientAuth defines the parameters of the client authentication part of the TLS connection, if any.\",\"properties\":{\"clientAuthType\":{\"description\":\"ClientAuthType defines the client authentication type to apply.\",\"enum\":[\"NoClientCert\",\"RequestClientCert\",\"RequireAnyClientCert\",\"VerifyClientCertIfGiven\",\"RequireAndVerifyClientCert\"],\"type\":\"string\"},\"secretNames\":{\"description\":\"SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"},\"curvePreferences\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"maxVersion\":{\"type\":\"string\"},\"minVersion\":{\"type\":\"string\"},\"preferServerCipherSuites\":{\"type\":\"boolean\"},\"sniStrict\":{\"type\":\"boolean\"}},\"type\":\"object\"}},\"required\":[\"metadata\",\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true}]},\"status\":{\"acceptedNames\":{\"kind\":\"\",\"plural\":\"\"},\"conditions\":[],\"storedVersions\":[]}}\n",
                            "pulumi.com/skipAwait": "true"
                        },
                        "creationTimestamp": "2021-12-19T00:10:58Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:58Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:controller-gen.kubebuilder.io/version": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {},
                                            "f:pulumi.com/skipAwait": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:54:16Z"
                            }
                        ],
                        "name": "tlsoptions.traefik.containo.us",
                        "resourceVersion": "8922814",
                        "uid": "f5f89f3a-1c22-4149-88f7-3b0baa4268f5"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "TLSOption",
                            "listKind": "TLSOptionList",
                            "plural": "tlsoptions",
                            "singular": "tlsoption"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "TLSOption is a specification for a TLSOption resource.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "TLSOptionSpec configures TLS for an entry point.",
                                                "properties": {
                                                    "alpnProtocols": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "cipherSuites": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "clientAuth": {
                                                        "description": "ClientAuth defines the parameters of the client authentication part of the TLS connection, if any.",
                                                        "properties": {
                                                            "clientAuthType": {
                                                                "description": "ClientAuthType defines the client authentication type to apply.",
                                                                "enum": [
                                                                    "NoClientCert",
                                                                    "RequestClientCert",
                                                                    "RequireAnyClientCert",
                                                                    "VerifyClientCertIfGiven",
                                                                    "RequireAndVerifyClientCert"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "secretNames": {
                                                                "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "curvePreferences": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "maxVersion": {
                                                        "type": "string"
                                                    },
                                                    "minVersion": {
                                                        "type": "string"
                                                    },
                                                    "preferServerCipherSuites": {
                                                        "type": "boolean"
                                                    },
                                                    "sniStrict": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "TLSOption",
                            "listKind": "TLSOptionList",
                            "plural": "tlsoptions",
                            "singular": "tlsoption"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T00:10:58Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T00:10:58Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1alpha1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart::traefik",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": [],
                    "status": []
                },
                "aliases": [
                    "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v2:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::tlsoptions.traefik.containo.us"
                ]
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::ingressrouteudps.traefik.containo.us",
                "custom": true,
                "id": "ingressrouteudps.traefik.containo.us",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "pulumi.com/skipAwait": "true"
                        },
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "ingressrouteudps.traefik.containo.us"
                    },
                    "spec": {
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "IngressRouteUDP",
                            "listKind": "IngressRouteUDPList",
                            "plural": "ingressrouteudps",
                            "singular": "ingressrouteudp"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "IngressRouteUDP is an Ingress CRD specification.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "IngressRouteUDPSpec is a specification for a IngressRouteUDPSpec resource.",
                                                "properties": {
                                                    "entryPoints": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "routes": {
                                                        "items": {
                                                            "description": "RouteUDP contains the set of routes.",
                                                            "properties": {
                                                                "services": {
                                                                    "items": {
                                                                        "description": "ServiceUDP defines an upstream to proxy traffic.",
                                                                        "properties": {
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "namespace": {
                                                                                "type": "string"
                                                                            },
                                                                            "port": {
                                                                                "anyOf": [
                                                                                    {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    {
                                                                                        "type": "string"
                                                                                    }
                                                                                ],
                                                                                "x-kubernetes-int-or-string": true
                                                                            },
                                                                            "weight": {
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "name",
                                                                            "port"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "required": [
                                                    "routes"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "",
                            "plural": ""
                        },
                        "conditions": [],
                        "storedVersions": []
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "annotations": {
                                "controller-gen.kubebuilder.io/version": "v0.4.1",
                                "pulumi.com/skipAwait": "true"
                            },
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "ingressrouteudps.traefik.containo.us"
                        },
                        "spec": {
                            "group": "traefik.containo.us",
                            "names": {
                                "kind": "IngressRouteUDP",
                                "listKind": "IngressRouteUDPList",
                                "plural": "ingressrouteudps",
                                "singular": "ingressrouteudp"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "IngressRouteUDP is an Ingress CRD specification.",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "IngressRouteUDPSpec is a specification for a IngressRouteUDPSpec resource.",
                                                    "properties": {
                                                        "entryPoints": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "routes": {
                                                            "items": {
                                                                "description": "RouteUDP contains the set of routes.",
                                                                "properties": {
                                                                    "services": {
                                                                        "items": {
                                                                            "description": "ServiceUDP defines an upstream to proxy traffic.",
                                                                            "properties": {
                                                                                "name": {
                                                                                    "type": "string"
                                                                                },
                                                                                "namespace": {
                                                                                    "type": "string"
                                                                                },
                                                                                "port": {
                                                                                    "anyOf": [
                                                                                        {
                                                                                            "type": "integer"
                                                                                        },
                                                                                        {
                                                                                            "type": "string"
                                                                                        }
                                                                                    ],
                                                                                    "x-kubernetes-int-or-string": true
                                                                                },
                                                                                "weight": {
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "name",
                                                                                "port"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "required": [
                                                        "routes"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "metadata",
                                                "spec"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "served": true,
                                    "storage": true
                                }
                            ]
                        },
                        "status": {
                            "acceptedNames": {
                                "kind": "",
                                "plural": ""
                            },
                            "conditions": [],
                            "storedVersions": []
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.4.1\",\"pulumi.com/skipAwait\":\"true\"},\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"ingressrouteudps.traefik.containo.us\"},\"spec\":{\"group\":\"traefik.containo.us\",\"names\":{\"kind\":\"IngressRouteUDP\",\"listKind\":\"IngressRouteUDPList\",\"plural\":\"ingressrouteudps\",\"singular\":\"ingressrouteudp\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"IngressRouteUDP is an Ingress CRD specification.\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"IngressRouteUDPSpec is a specification for a IngressRouteUDPSpec resource.\",\"properties\":{\"entryPoints\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"routes\":{\"items\":{\"description\":\"RouteUDP contains the set of routes.\",\"properties\":{\"services\":{\"items\":{\"description\":\"ServiceUDP defines an upstream to proxy traffic.\",\"properties\":{\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"},\"port\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true},\"weight\":{\"type\":\"integer\"}},\"required\":[\"name\",\"port\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"type\":\"array\"}},\"required\":[\"routes\"],\"type\":\"object\"}},\"required\":[\"metadata\",\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true}]},\"status\":{\"acceptedNames\":{\"kind\":\"\",\"plural\":\"\"},\"conditions\":[],\"storedVersions\":[]}}\n",
                            "pulumi.com/skipAwait": "true"
                        },
                        "creationTimestamp": "2021-12-19T00:10:59Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:59Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:controller-gen.kubebuilder.io/version": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {},
                                            "f:pulumi.com/skipAwait": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:54:15Z"
                            }
                        ],
                        "name": "ingressrouteudps.traefik.containo.us",
                        "resourceVersion": "8922813",
                        "uid": "d1b0a36b-28db-4960-b15e-3f494870b512"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "IngressRouteUDP",
                            "listKind": "IngressRouteUDPList",
                            "plural": "ingressrouteudps",
                            "singular": "ingressrouteudp"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "IngressRouteUDP is an Ingress CRD specification.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "IngressRouteUDPSpec is a specification for a IngressRouteUDPSpec resource.",
                                                "properties": {
                                                    "entryPoints": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "routes": {
                                                        "items": {
                                                            "description": "RouteUDP contains the set of routes.",
                                                            "properties": {
                                                                "services": {
                                                                    "items": {
                                                                        "description": "ServiceUDP defines an upstream to proxy traffic.",
                                                                        "properties": {
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "namespace": {
                                                                                "type": "string"
                                                                            },
                                                                            "port": {
                                                                                "anyOf": [
                                                                                    {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    {
                                                                                        "type": "string"
                                                                                    }
                                                                                ],
                                                                                "x-kubernetes-int-or-string": true
                                                                            },
                                                                            "weight": {
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "name",
                                                                            "port"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "required": [
                                                    "routes"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "IngressRouteUDP",
                            "listKind": "IngressRouteUDPList",
                            "plural": "ingressrouteudps",
                            "singular": "ingressrouteudp"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T00:10:59Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T00:10:59Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1alpha1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart::traefik",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": [],
                    "status": []
                },
                "aliases": [
                    "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v2:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::ingressrouteudps.traefik.containo.us"
                ]
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::traefik",
                "custom": true,
                "id": "traefik",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "pulumi.com/skipAwait": "true"
                        },
                        "labels": {
                            "app.kubernetes.io/instance": "traefik",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "traefik",
                            "helm.sh/chart": "traefik-10.7.1"
                        },
                        "name": "traefik"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "traefik"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "traefik",
                            "namespace": "networking"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "annotations": {
                                "pulumi.com/skipAwait": "true"
                            },
                            "labels": {
                                "app.kubernetes.io/instance": "traefik",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "traefik",
                                "helm.sh/chart": "traefik-10.7.1"
                            },
                            "name": "traefik"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "traefik"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "traefik",
                                "namespace": "networking"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"annotations\":{\"pulumi.com/skipAwait\":\"true\"},\"labels\":{\"app.kubernetes.io/instance\":\"traefik\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"traefik\",\"helm.sh/chart\":\"traefik-10.7.1\"},\"name\":\"traefik\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"traefik\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"traefik\",\"namespace\":\"networking\"}]}\n",
                            "pulumi.com/skipAwait": "true"
                        },
                        "creationTimestamp": "2021-12-19T00:11:00Z",
                        "labels": {
                            "app.kubernetes.io/instance": "traefik",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "traefik",
                            "helm.sh/chart": "traefik-10.7.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {},
                                            "f:pulumi.com/skipAwait": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:helm.sh/chart": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:54:12Z"
                            }
                        ],
                        "name": "traefik",
                        "resourceVersion": "8922770",
                        "uid": "ce7bf4b1-c915-4325-9dab-1b3bc5b3d309"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "traefik"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "traefik",
                            "namespace": "networking"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart::traefik",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "roleRef": [],
                    "subjects": []
                },
                "aliases": [
                    "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v2:Chart$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::traefik"
                ]
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apps/v1:Deployment::networking/traefik",
                "custom": true,
                "id": "networking/traefik",
                "type": "kubernetes:apps/v1:Deployment",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "annotations": {
                            "pulumi.com/skipAwait": "true"
                        },
                        "labels": {
                            "app.kubernetes.io/instance": "traefik",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "traefik",
                            "helm.sh/chart": "traefik-10.7.1"
                        },
                        "name": "traefik",
                        "namespace": "networking"
                    },
                    "spec": {
                        "replicas": 1,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/instance": "traefik",
                                "app.kubernetes.io/name": "traefik"
                            }
                        },
                        "strategy": {
                            "rollingUpdate": {
                                "maxSurge": 1,
                                "maxUnavailable": 1
                            },
                            "type": "RollingUpdate"
                        },
                        "template": {
                            "metadata": {
                                "annotations": {
                                    "prometheus.io/path": "/metrics",
                                    "prometheus.io/port": "9100",
                                    "prometheus.io/scrape": "true"
                                },
                                "labels": {
                                    "app.kubernetes.io/instance": "traefik",
                                    "app.kubernetes.io/managed-by": "Helm",
                                    "app.kubernetes.io/name": "traefik",
                                    "helm.sh/chart": "traefik-10.7.1"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "args": [
                                            "--global.checknewversion",
                                            "--global.sendanonymoususage",
                                            "--entryPoints.metrics.address=:9100/tcp",
                                            "--entryPoints.traefik.address=:9000/tcp",
                                            "--entryPoints.web.address=:8000/tcp",
                                            "--entryPoints.websecure.address=:8443/tcp",
                                            "--api.dashboard=true",
                                            "--ping=true",
                                            "--metrics.prometheus=true",
                                            "--metrics.prometheus.entrypoint=metrics",
                                            "--providers.kubernetescrd",
                                            "--providers.kubernetesingress"
                                        ],
                                        "image": "traefik:2.5.4",
                                        "imagePullPolicy": "IfNotPresent",
                                        "livenessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/ping",
                                                "port": 9000
                                            },
                                            "initialDelaySeconds": 10,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 2
                                        },
                                        "name": "traefik",
                                        "ports": [
                                            {
                                                "containerPort": 9100,
                                                "name": "metrics",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 9000,
                                                "name": "traefik",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 8000,
                                                "name": "web",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 8443,
                                                "name": "websecure",
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "failureThreshold": 1,
                                            "httpGet": {
                                                "path": "/ping",
                                                "port": 9000
                                            },
                                            "initialDelaySeconds": 10,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 2
                                        },
                                        "securityContext": {
                                            "capabilities": {
                                                "drop": [
                                                    "ALL"
                                                ]
                                            },
                                            "readOnlyRootFilesystem": true,
                                            "runAsGroup": 65532,
                                            "runAsNonRoot": true,
                                            "runAsUser": 65532
                                        },
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/data",
                                                "name": "data"
                                            },
                                            {
                                                "mountPath": "/tmp",
                                                "name": "tmp"
                                            }
                                        ]
                                    }
                                ],
                                "hostNetwork": false,
                                "securityContext": {
                                    "fsGroup": 65532
                                },
                                "serviceAccountName": "traefik",
                                "terminationGracePeriodSeconds": 60,
                                "volumes": [
                                    {
                                        "emptyDir": {},
                                        "name": "data"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "tmp"
                                    }
                                ]
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "metadata": {
                            "annotations": {
                                "pulumi.com/skipAwait": "true"
                            },
                            "labels": {
                                "app.kubernetes.io/instance": "traefik",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "traefik",
                                "helm.sh/chart": "traefik-10.7.1"
                            },
                            "name": "traefik",
                            "namespace": "networking"
                        },
                        "spec": {
                            "replicas": 1,
                            "selector": {
                                "matchLabels": {
                                    "app.kubernetes.io/instance": "traefik",
                                    "app.kubernetes.io/name": "traefik"
                                }
                            },
                            "strategy": {
                                "rollingUpdate": {
                                    "maxSurge": 1,
                                    "maxUnavailable": 1
                                },
                                "type": "RollingUpdate"
                            },
                            "template": {
                                "metadata": {
                                    "annotations": {
                                        "prometheus.io/path": "/metrics",
                                        "prometheus.io/port": "9100",
                                        "prometheus.io/scrape": "true"
                                    },
                                    "labels": {
                                        "app.kubernetes.io/instance": "traefik",
                                        "app.kubernetes.io/managed-by": "Helm",
                                        "app.kubernetes.io/name": "traefik",
                                        "helm.sh/chart": "traefik-10.7.1"
                                    }
                                },
                                "spec": {
                                    "containers": [
                                        {
                                            "args": [
                                                "--global.checknewversion",
                                                "--global.sendanonymoususage",
                                                "--entryPoints.metrics.address=:9100/tcp",
                                                "--entryPoints.traefik.address=:9000/tcp",
                                                "--entryPoints.web.address=:8000/tcp",
                                                "--entryPoints.websecure.address=:8443/tcp",
                                                "--api.dashboard=true",
                                                "--ping=true",
                                                "--metrics.prometheus=true",
                                                "--metrics.prometheus.entrypoint=metrics",
                                                "--providers.kubernetescrd",
                                                "--providers.kubernetesingress"
                                            ],
                                            "image": "traefik:2.5.4",
                                            "imagePullPolicy": "IfNotPresent",
                                            "livenessProbe": {
                                                "failureThreshold": 3,
                                                "httpGet": {
                                                    "path": "/ping",
                                                    "port": 9000
                                                },
                                                "initialDelaySeconds": 10,
                                                "periodSeconds": 10,
                                                "successThreshold": 1,
                                                "timeoutSeconds": 2
                                            },
                                            "name": "traefik",
                                            "ports": [
                                                {
                                                    "containerPort": 9100,
                                                    "name": "metrics",
                                                    "protocol": "TCP"
                                                },
                                                {
                                                    "containerPort": 9000,
                                                    "name": "traefik",
                                                    "protocol": "TCP"
                                                },
                                                {
                                                    "containerPort": 8000,
                                                    "name": "web",
                                                    "protocol": "TCP"
                                                },
                                                {
                                                    "containerPort": 8443,
                                                    "name": "websecure",
                                                    "protocol": "TCP"
                                                }
                                            ],
                                            "readinessProbe": {
                                                "failureThreshold": 1,
                                                "httpGet": {
                                                    "path": "/ping",
                                                    "port": 9000
                                                },
                                                "initialDelaySeconds": 10,
                                                "periodSeconds": 10,
                                                "successThreshold": 1,
                                                "timeoutSeconds": 2
                                            },
                                            "securityContext": {
                                                "capabilities": {
                                                    "drop": [
                                                        "ALL"
                                                    ]
                                                },
                                                "readOnlyRootFilesystem": true,
                                                "runAsGroup": 65532,
                                                "runAsNonRoot": true,
                                                "runAsUser": 65532
                                            },
                                            "volumeMounts": [
                                                {
                                                    "mountPath": "/data",
                                                    "name": "data"
                                                },
                                                {
                                                    "mountPath": "/tmp",
                                                    "name": "tmp"
                                                }
                                            ]
                                        }
                                    ],
                                    "hostNetwork": false,
                                    "securityContext": {
                                        "fsGroup": 65532
                                    },
                                    "serviceAccountName": "traefik",
                                    "terminationGracePeriodSeconds": 60,
                                    "volumes": [
                                        {
                                            "emptyDir": {},
                                            "name": "data"
                                        },
                                        {
                                            "emptyDir": {},
                                            "name": "tmp"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "annotations": {
                            "deployment.kubernetes.io/revision": "1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"pulumi.com/skipAwait\":\"true\"},\"labels\":{\"app.kubernetes.io/instance\":\"traefik\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"traefik\",\"helm.sh/chart\":\"traefik-10.7.1\"},\"name\":\"traefik\",\"namespace\":\"networking\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app.kubernetes.io/instance\":\"traefik\",\"app.kubernetes.io/name\":\"traefik\"}},\"strategy\":{\"rollingUpdate\":{\"maxSurge\":1,\"maxUnavailable\":1},\"type\":\"RollingUpdate\"},\"template\":{\"metadata\":{\"annotations\":{\"prometheus.io/path\":\"/metrics\",\"prometheus.io/port\":\"9100\",\"prometheus.io/scrape\":\"true\"},\"labels\":{\"app.kubernetes.io/instance\":\"traefik\",\"app.kubernetes.io/managed-by\":\"Helm\",\"app.kubernetes.io/name\":\"traefik\",\"helm.sh/chart\":\"traefik-10.7.1\"}},\"spec\":{\"containers\":[{\"args\":[\"--global.checknewversion\",\"--global.sendanonymoususage\",\"--entryPoints.metrics.address=:9100/tcp\",\"--entryPoints.traefik.address=:9000/tcp\",\"--entryPoints.web.address=:8000/tcp\",\"--entryPoints.websecure.address=:8443/tcp\",\"--api.dashboard=true\",\"--ping=true\",\"--metrics.prometheus=true\",\"--metrics.prometheus.entrypoint=metrics\",\"--providers.kubernetescrd\",\"--providers.kubernetesingress\"],\"image\":\"traefik:2.5.4\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/ping\",\"port\":9000},\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":2},\"name\":\"traefik\",\"ports\":[{\"containerPort\":9100,\"name\":\"metrics\",\"protocol\":\"TCP\"},{\"containerPort\":9000,\"name\":\"traefik\",\"protocol\":\"TCP\"},{\"containerPort\":8000,\"name\":\"web\",\"protocol\":\"TCP\"},{\"containerPort\":8443,\"name\":\"websecure\",\"protocol\":\"TCP\"}],\"readinessProbe\":{\"failureThreshold\":1,\"httpGet\":{\"path\":\"/ping\",\"port\":9000},\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":2},\"securityContext\":{\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsGroup\":65532,\"runAsNonRoot\":true,\"runAsUser\":65532},\"volumeMounts\":[{\"mountPath\":\"/data\",\"name\":\"data\"},{\"mountPath\":\"/tmp\",\"name\":\"tmp\"}]}],\"hostNetwork\":false,\"securityContext\":{\"fsGroup\":65532},\"serviceAccountName\":\"traefik\",\"terminationGracePeriodSeconds\":60,\"volumes\":[{\"emptyDir\":{},\"name\":\"data\"},{\"emptyDir\":{},\"name\":\"tmp\"}]}}}}\n",
                            "pulumi.com/skipAwait": "true"
                        },
                        "creationTimestamp": "2021-12-19T00:10:59Z",
                        "generation": 2,
                        "labels": {
                            "app.kubernetes.io/instance": "traefik",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "traefik",
                            "helm.sh/chart": "traefik-10.7.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            "f:deployment.kubernetes.io/revision": {}
                                        }
                                    },
                                    "f:status": {
                                        "f:availableReplicas": {},
                                        "f:conditions": {
                                            ".": {},
                                            "k:{\"type\":\"Available\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"Progressing\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:lastUpdateTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:observedGeneration": {},
                                        "f:readyReplicas": {},
                                        "f:replicas": {},
                                        "f:updatedReplicas": {}
                                    }
                                },
                                "manager": "kube-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T00:11:20Z"
                            },
                            {
                                "apiVersion": "apps/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {},
                                            "f:pulumi.com/skipAwait": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:helm.sh/chart": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:progressDeadlineSeconds": {},
                                        "f:replicas": {},
                                        "f:revisionHistoryLimit": {},
                                        "f:selector": {},
                                        "f:strategy": {
                                            "f:rollingUpdate": {
                                                ".": {},
                                                "f:maxSurge": {},
                                                "f:maxUnavailable": {}
                                            },
                                            "f:type": {}
                                        },
                                        "f:template": {
                                            "f:metadata": {
                                                "f:annotations": {
                                                    ".": {},
                                                    "f:prometheus.io/path": {},
                                                    "f:prometheus.io/port": {},
                                                    "f:prometheus.io/scrape": {}
                                                },
                                                "f:labels": {
                                                    ".": {},
                                                    "f:app.kubernetes.io/instance": {},
                                                    "f:app.kubernetes.io/managed-by": {},
                                                    "f:app.kubernetes.io/name": {},
                                                    "f:helm.sh/chart": {}
                                                }
                                            },
                                            "f:spec": {
                                                "f:containers": {
                                                    "k:{\"name\":\"traefik\"}": {
                                                        ".": {},
                                                        "f:args": {},
                                                        "f:image": {},
                                                        "f:imagePullPolicy": {},
                                                        "f:livenessProbe": {
                                                            ".": {},
                                                            "f:failureThreshold": {},
                                                            "f:httpGet": {
                                                                ".": {},
                                                                "f:path": {},
                                                                "f:port": {},
                                                                "f:scheme": {}
                                                            },
                                                            "f:initialDelaySeconds": {},
                                                            "f:periodSeconds": {},
                                                            "f:successThreshold": {},
                                                            "f:timeoutSeconds": {}
                                                        },
                                                        "f:name": {},
                                                        "f:ports": {
                                                            ".": {},
                                                            "k:{\"containerPort\":8000,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:name": {},
                                                                "f:protocol": {}
                                                            },
                                                            "k:{\"containerPort\":8443,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:name": {},
                                                                "f:protocol": {}
                                                            },
                                                            "k:{\"containerPort\":9000,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:name": {},
                                                                "f:protocol": {}
                                                            },
                                                            "k:{\"containerPort\":9100,\"protocol\":\"TCP\"}": {
                                                                ".": {},
                                                                "f:containerPort": {},
                                                                "f:name": {},
                                                                "f:protocol": {}
                                                            }
                                                        },
                                                        "f:readinessProbe": {
                                                            ".": {},
                                                            "f:failureThreshold": {},
                                                            "f:httpGet": {
                                                                ".": {},
                                                                "f:path": {},
                                                                "f:port": {},
                                                                "f:scheme": {}
                                                            },
                                                            "f:initialDelaySeconds": {},
                                                            "f:periodSeconds": {},
                                                            "f:successThreshold": {},
                                                            "f:timeoutSeconds": {}
                                                        },
                                                        "f:resources": {},
                                                        "f:securityContext": {
                                                            ".": {},
                                                            "f:capabilities": {
                                                                ".": {},
                                                                "f:drop": {}
                                                            },
                                                            "f:readOnlyRootFilesystem": {},
                                                            "f:runAsGroup": {},
                                                            "f:runAsNonRoot": {},
                                                            "f:runAsUser": {}
                                                        },
                                                        "f:terminationMessagePath": {},
                                                        "f:terminationMessagePolicy": {},
                                                        "f:volumeMounts": {
                                                            ".": {},
                                                            "k:{\"mountPath\":\"/data\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            },
                                                            "k:{\"mountPath\":\"/tmp\"}": {
                                                                ".": {},
                                                                "f:mountPath": {},
                                                                "f:name": {}
                                                            }
                                                        }
                                                    }
                                                },
                                                "f:dnsPolicy": {},
                                                "f:restartPolicy": {},
                                                "f:schedulerName": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:fsGroup": {}
                                                },
                                                "f:serviceAccount": {},
                                                "f:serviceAccountName": {},
                                                "f:terminationGracePeriodSeconds": {},
                                                "f:volumes": {
                                                    ".": {},
                                                    "k:{\"name\":\"data\"}": {
                                                        ".": {},
                                                        "f:emptyDir": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"name\":\"tmp\"}": {
                                                        ".": {},
                                                        "f:emptyDir": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:54:18Z"
                            }
                        ],
                        "name": "traefik",
                        "namespace": "networking",
                        "resourceVersion": "8922834",
                        "uid": "2e02c2fa-830a-4cc0-bc10-cc7ffbfecf68"
                    },
                    "spec": {
                        "progressDeadlineSeconds": 600,
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app.kubernetes.io/instance": "traefik",
                                "app.kubernetes.io/name": "traefik"
                            }
                        },
                        "strategy": {
                            "rollingUpdate": {
                                "maxSurge": 1,
                                "maxUnavailable": 1
                            },
                            "type": "RollingUpdate"
                        },
                        "template": {
                            "metadata": {
                                "annotations": {
                                    "prometheus.io/path": "/metrics",
                                    "prometheus.io/port": "9100",
                                    "prometheus.io/scrape": "true"
                                },
                                "labels": {
                                    "app.kubernetes.io/instance": "traefik",
                                    "app.kubernetes.io/managed-by": "Helm",
                                    "app.kubernetes.io/name": "traefik",
                                    "helm.sh/chart": "traefik-10.7.1"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "args": [
                                            "--global.checknewversion",
                                            "--global.sendanonymoususage",
                                            "--entryPoints.metrics.address=:9100/tcp",
                                            "--entryPoints.traefik.address=:9000/tcp",
                                            "--entryPoints.web.address=:8000/tcp",
                                            "--entryPoints.websecure.address=:8443/tcp",
                                            "--api.dashboard=true",
                                            "--ping=true",
                                            "--metrics.prometheus=true",
                                            "--metrics.prometheus.entrypoint=metrics",
                                            "--providers.kubernetescrd",
                                            "--providers.kubernetesingress"
                                        ],
                                        "image": "traefik:2.5.4",
                                        "imagePullPolicy": "IfNotPresent",
                                        "livenessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/ping",
                                                "port": 9000,
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 10,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 2
                                        },
                                        "name": "traefik",
                                        "ports": [
                                            {
                                                "containerPort": 9100,
                                                "name": "metrics",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 9000,
                                                "name": "traefik",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 8000,
                                                "name": "web",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 8443,
                                                "name": "websecure",
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "failureThreshold": 1,
                                            "httpGet": {
                                                "path": "/ping",
                                                "port": 9000,
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 10,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 2
                                        },
                                        "resources": {},
                                        "securityContext": {
                                            "capabilities": {
                                                "drop": [
                                                    "ALL"
                                                ]
                                            },
                                            "readOnlyRootFilesystem": true,
                                            "runAsGroup": 65532,
                                            "runAsNonRoot": true,
                                            "runAsUser": 65532
                                        },
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/data",
                                                "name": "data"
                                            },
                                            {
                                                "mountPath": "/tmp",
                                                "name": "tmp"
                                            }
                                        ]
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {
                                    "fsGroup": 65532
                                },
                                "serviceAccount": "traefik",
                                "serviceAccountName": "traefik",
                                "terminationGracePeriodSeconds": 60,
                                "volumes": [
                                    {
                                        "emptyDir": {},
                                        "name": "data"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "tmp"
                                    }
                                ]
                            }
                        }
                    },
                    "status": {
                        "availableReplicas": 1,
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T00:11:00Z",
                                "lastUpdateTime": "2021-12-19T00:11:00Z",
                                "message": "Deployment has minimum availability.",
                                "reason": "MinimumReplicasAvailable",
                                "status": "True",
                                "type": "Available"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T00:10:59Z",
                                "lastUpdateTime": "2021-12-19T00:11:20Z",
                                "message": "ReplicaSet \"traefik-794f7579b9\" has successfully progressed.",
                                "reason": "NewReplicaSetAvailable",
                                "status": "True",
                                "type": "Progressing"
                            }
                        ],
                        "observedGeneration": 2,
                        "readyReplicas": 1,
                        "replicas": 1,
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart::traefik",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                },
                "aliases": [
                    "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1:Deployment::networking/traefik"
                ]
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:traefik.containo.us/v1alpha1:IngressRoute::networking/traefik-dashboard",
                "custom": true,
                "id": "networking/traefik-dashboard",
                "type": "kubernetes:traefik.containo.us/v1alpha1:IngressRoute",
                "inputs": {
                    "apiVersion": "traefik.containo.us/v1alpha1",
                    "kind": "IngressRoute",
                    "metadata": {
                        "annotations": {
                            "helm.sh/hook": "post-install,post-upgrade",
                            "pulumi.com/skipAwait": "true"
                        },
                        "labels": {
                            "app.kubernetes.io/instance": "traefik",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "traefik",
                            "helm.sh/chart": "traefik-10.7.1"
                        },
                        "name": "traefik-dashboard",
                        "namespace": "networking"
                    },
                    "spec": {
                        "entryPoints": [
                            "traefik"
                        ],
                        "routes": [
                            {
                                "kind": "Rule",
                                "match": "PathPrefix(`/dashboard`) || PathPrefix(`/api`)",
                                "services": [
                                    {
                                        "kind": "TraefikService",
                                        "name": "api@internal"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "traefik.containo.us/v1alpha1",
                    "__inputs": {
                        "apiVersion": "traefik.containo.us/v1alpha1",
                        "kind": "IngressRoute",
                        "metadata": {
                            "annotations": {
                                "helm.sh/hook": "post-install,post-upgrade",
                                "pulumi.com/skipAwait": "true"
                            },
                            "labels": {
                                "app.kubernetes.io/instance": "traefik",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "traefik",
                                "helm.sh/chart": "traefik-10.7.1"
                            },
                            "name": "traefik-dashboard",
                            "namespace": "networking"
                        },
                        "spec": {
                            "entryPoints": [
                                "traefik"
                            ],
                            "routes": [
                                {
                                    "kind": "Rule",
                                    "match": "PathPrefix(`/dashboard`) || PathPrefix(`/api`)",
                                    "services": [
                                        {
                                            "kind": "TraefikService",
                                            "name": "api@internal"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    "apiVersion": "traefik.containo.us/v1alpha1",
                    "kind": "IngressRoute",
                    "metadata": {
                        "annotations": {
                            "helm.sh/hook": "post-install,post-upgrade",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"traefik.containo.us/v1alpha1\",\"kind\":\"IngressRoute\",\"metadata\":{\"annotations\":{\"helm.sh/hook\":\"post-install,post-upgrade\",\"pulumi.com/skipAwait\":\"true\"},\"labels\":{\"app.kubernetes.io/instance\":\"traefik\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"traefik\",\"helm.sh/chart\":\"traefik-10.7.1\"},\"name\":\"traefik-dashboard\",\"namespace\":\"networking\"},\"spec\":{\"entryPoints\":[\"traefik\"],\"routes\":[{\"kind\":\"Rule\",\"match\":\"PathPrefix(`/dashboard`) || PathPrefix(`/api`)\",\"services\":[{\"kind\":\"TraefikService\",\"name\":\"api@internal\"}]}]}}\n",
                            "pulumi.com/skipAwait": "true"
                        },
                        "creationTimestamp": "2021-12-19T00:11:29Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/instance": "traefik",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "traefik",
                            "helm.sh/chart": "traefik-10.7.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "traefik.containo.us/v1alpha1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:helm.sh/hook": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {},
                                            "f:pulumi.com/skipAwait": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:helm.sh/chart": {}
                                        }
                                    },
                                    "f:spec": {
                                        ".": {},
                                        "f:entryPoints": {},
                                        "f:routes": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:54:13Z"
                            }
                        ],
                        "name": "traefik-dashboard",
                        "namespace": "networking",
                        "resourceVersion": "8922771",
                        "uid": "5f0331ab-0c45-44fa-9bd0-c989de16ffb4"
                    },
                    "spec": {
                        "entryPoints": [
                            "traefik"
                        ],
                        "routes": [
                            {
                                "kind": "Rule",
                                "match": "PathPrefix(`/dashboard`) || PathPrefix(`/api`)",
                                "services": [
                                    {
                                        "kind": "TraefikService",
                                        "name": "api@internal"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart::traefik",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                },
                "aliases": [
                    "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v2:Chart$kubernetes:traefik.containo.us/v1alpha1:IngressRoute::networking/traefik-dashboard"
                ]
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::ingressroutetcps.traefik.containo.us",
                "custom": true,
                "id": "ingressroutetcps.traefik.containo.us",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "pulumi.com/skipAwait": "true"
                        },
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "ingressroutetcps.traefik.containo.us"
                    },
                    "spec": {
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "IngressRouteTCP",
                            "listKind": "IngressRouteTCPList",
                            "plural": "ingressroutetcps",
                            "singular": "ingressroutetcp"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "IngressRouteTCP is an Ingress CRD specification.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "IngressRouteTCPSpec is a specification for a IngressRouteTCPSpec resource.",
                                                "properties": {
                                                    "entryPoints": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "routes": {
                                                        "items": {
                                                            "description": "RouteTCP contains the set of routes.",
                                                            "properties": {
                                                                "match": {
                                                                    "type": "string"
                                                                },
                                                                "middlewares": {
                                                                    "description": "Middlewares contains references to MiddlewareTCP resources.",
                                                                    "items": {
                                                                        "description": "ObjectReference is a generic reference to a Traefik resource.",
                                                                        "properties": {
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "namespace": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "name"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "services": {
                                                                    "items": {
                                                                        "description": "ServiceTCP defines an upstream to proxy traffic.",
                                                                        "properties": {
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "namespace": {
                                                                                "type": "string"
                                                                            },
                                                                            "port": {
                                                                                "anyOf": [
                                                                                    {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    {
                                                                                        "type": "string"
                                                                                    }
                                                                                ],
                                                                                "x-kubernetes-int-or-string": true
                                                                            },
                                                                            "proxyProtocol": {
                                                                                "description": "ProxyProtocol holds the ProxyProtocol configuration.",
                                                                                "properties": {
                                                                                    "version": {
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "terminationDelay": {
                                                                                "type": "integer"
                                                                            },
                                                                            "weight": {
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "name",
                                                                            "port"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "required": [
                                                                "match"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "tls": {
                                                        "description": "TLSTCP contains the TLS certificates configuration of the routes. To enable Let's Encrypt, use an empty TLS struct, e.g. in YAML: \n \t tls: {} # inline format \n \t tls: \t   secretName: # block format",
                                                        "properties": {
                                                            "certResolver": {
                                                                "type": "string"
                                                            },
                                                            "domains": {
                                                                "items": {
                                                                    "description": "Domain holds a domain name with SANs.",
                                                                    "properties": {
                                                                        "main": {
                                                                            "type": "string"
                                                                        },
                                                                        "sans": {
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "options": {
                                                                "description": "Options is a reference to a TLSOption, that specifies the parameters of the TLS connection.",
                                                                "properties": {
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "namespace": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "name"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "passthrough": {
                                                                "type": "boolean"
                                                            },
                                                            "secretName": {
                                                                "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                                                "type": "string"
                                                            },
                                                            "store": {
                                                                "description": "Store is a reference to a TLSStore, that specifies the parameters of the TLS store.",
                                                                "properties": {
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "namespace": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "name"
                                                                ],
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [
                                                    "routes"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "",
                            "plural": ""
                        },
                        "conditions": [],
                        "storedVersions": []
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "annotations": {
                                "controller-gen.kubebuilder.io/version": "v0.4.1",
                                "pulumi.com/skipAwait": "true"
                            },
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "ingressroutetcps.traefik.containo.us"
                        },
                        "spec": {
                            "group": "traefik.containo.us",
                            "names": {
                                "kind": "IngressRouteTCP",
                                "listKind": "IngressRouteTCPList",
                                "plural": "ingressroutetcps",
                                "singular": "ingressroutetcp"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "IngressRouteTCP is an Ingress CRD specification.",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "IngressRouteTCPSpec is a specification for a IngressRouteTCPSpec resource.",
                                                    "properties": {
                                                        "entryPoints": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "routes": {
                                                            "items": {
                                                                "description": "RouteTCP contains the set of routes.",
                                                                "properties": {
                                                                    "match": {
                                                                        "type": "string"
                                                                    },
                                                                    "middlewares": {
                                                                        "description": "Middlewares contains references to MiddlewareTCP resources.",
                                                                        "items": {
                                                                            "description": "ObjectReference is a generic reference to a Traefik resource.",
                                                                            "properties": {
                                                                                "name": {
                                                                                    "type": "string"
                                                                                },
                                                                                "namespace": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "name"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "services": {
                                                                        "items": {
                                                                            "description": "ServiceTCP defines an upstream to proxy traffic.",
                                                                            "properties": {
                                                                                "name": {
                                                                                    "type": "string"
                                                                                },
                                                                                "namespace": {
                                                                                    "type": "string"
                                                                                },
                                                                                "port": {
                                                                                    "anyOf": [
                                                                                        {
                                                                                            "type": "integer"
                                                                                        },
                                                                                        {
                                                                                            "type": "string"
                                                                                        }
                                                                                    ],
                                                                                    "x-kubernetes-int-or-string": true
                                                                                },
                                                                                "proxyProtocol": {
                                                                                    "description": "ProxyProtocol holds the ProxyProtocol configuration.",
                                                                                    "properties": {
                                                                                        "version": {
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "terminationDelay": {
                                                                                    "type": "integer"
                                                                                },
                                                                                "weight": {
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "name",
                                                                                "port"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "match"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "tls": {
                                                            "description": "TLSTCP contains the TLS certificates configuration of the routes. To enable Let's Encrypt, use an empty TLS struct, e.g. in YAML: \n \t tls: {} # inline format \n \t tls: \t   secretName: # block format",
                                                            "properties": {
                                                                "certResolver": {
                                                                    "type": "string"
                                                                },
                                                                "domains": {
                                                                    "items": {
                                                                        "description": "Domain holds a domain name with SANs.",
                                                                        "properties": {
                                                                            "main": {
                                                                                "type": "string"
                                                                            },
                                                                            "sans": {
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "options": {
                                                                    "description": "Options is a reference to a TLSOption, that specifies the parameters of the TLS connection.",
                                                                    "properties": {
                                                                        "name": {
                                                                            "type": "string"
                                                                        },
                                                                        "namespace": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "name"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "passthrough": {
                                                                    "type": "boolean"
                                                                },
                                                                "secretName": {
                                                                    "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                                                    "type": "string"
                                                                },
                                                                "store": {
                                                                    "description": "Store is a reference to a TLSStore, that specifies the parameters of the TLS store.",
                                                                    "properties": {
                                                                        "name": {
                                                                            "type": "string"
                                                                        },
                                                                        "namespace": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "name"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "required": [
                                                        "routes"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "metadata",
                                                "spec"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "served": true,
                                    "storage": true
                                }
                            ]
                        },
                        "status": {
                            "acceptedNames": {
                                "kind": "",
                                "plural": ""
                            },
                            "conditions": [],
                            "storedVersions": []
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.4.1\",\"pulumi.com/skipAwait\":\"true\"},\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"ingressroutetcps.traefik.containo.us\"},\"spec\":{\"group\":\"traefik.containo.us\",\"names\":{\"kind\":\"IngressRouteTCP\",\"listKind\":\"IngressRouteTCPList\",\"plural\":\"ingressroutetcps\",\"singular\":\"ingressroutetcp\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"IngressRouteTCP is an Ingress CRD specification.\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"IngressRouteTCPSpec is a specification for a IngressRouteTCPSpec resource.\",\"properties\":{\"entryPoints\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"routes\":{\"items\":{\"description\":\"RouteTCP contains the set of routes.\",\"properties\":{\"match\":{\"type\":\"string\"},\"middlewares\":{\"description\":\"Middlewares contains references to MiddlewareTCP resources.\",\"items\":{\"description\":\"ObjectReference is a generic reference to a Traefik resource.\",\"properties\":{\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"type\":\"array\"},\"services\":{\"items\":{\"description\":\"ServiceTCP defines an upstream to proxy traffic.\",\"properties\":{\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"},\"port\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true},\"proxyProtocol\":{\"description\":\"ProxyProtocol holds the ProxyProtocol configuration.\",\"properties\":{\"version\":{\"type\":\"integer\"}},\"type\":\"object\"},\"terminationDelay\":{\"type\":\"integer\"},\"weight\":{\"type\":\"integer\"}},\"required\":[\"name\",\"port\"],\"type\":\"object\"},\"type\":\"array\"}},\"required\":[\"match\"],\"type\":\"object\"},\"type\":\"array\"},\"tls\":{\"description\":\"TLSTCP contains the TLS certificates configuration of the routes. To enable Let's Encrypt, use an empty TLS struct, e.g. in YAML: \\n \\t tls: {} # inline format \\n \\t tls: \\t   secretName: # block format\",\"properties\":{\"certResolver\":{\"type\":\"string\"},\"domains\":{\"items\":{\"description\":\"Domain holds a domain name with SANs.\",\"properties\":{\"main\":{\"type\":\"string\"},\"sans\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"},\"type\":\"array\"},\"options\":{\"description\":\"Options is a reference to a TLSOption, that specifies the parameters of the TLS connection.\",\"properties\":{\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"passthrough\":{\"type\":\"boolean\"},\"secretName\":{\"description\":\"SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.\",\"type\":\"string\"},\"store\":{\"description\":\"Store is a reference to a TLSStore, that specifies the parameters of the TLS store.\",\"properties\":{\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"type\":\"object\"}},\"required\":[\"routes\"],\"type\":\"object\"}},\"required\":[\"metadata\",\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true}]},\"status\":{\"acceptedNames\":{\"kind\":\"\",\"plural\":\"\"},\"conditions\":[],\"storedVersions\":[]}}\n",
                            "pulumi.com/skipAwait": "true"
                        },
                        "creationTimestamp": "2021-12-19T00:11:00Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T00:11:00Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:controller-gen.kubebuilder.io/version": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {},
                                            "f:pulumi.com/skipAwait": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:54:13Z"
                            }
                        ],
                        "name": "ingressroutetcps.traefik.containo.us",
                        "resourceVersion": "8922789",
                        "uid": "f96877d7-672a-4131-bfdc-566ae6cf3283"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "IngressRouteTCP",
                            "listKind": "IngressRouteTCPList",
                            "plural": "ingressroutetcps",
                            "singular": "ingressroutetcp"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "IngressRouteTCP is an Ingress CRD specification.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "IngressRouteTCPSpec is a specification for a IngressRouteTCPSpec resource.",
                                                "properties": {
                                                    "entryPoints": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "routes": {
                                                        "items": {
                                                            "description": "RouteTCP contains the set of routes.",
                                                            "properties": {
                                                                "match": {
                                                                    "type": "string"
                                                                },
                                                                "middlewares": {
                                                                    "description": "Middlewares contains references to MiddlewareTCP resources.",
                                                                    "items": {
                                                                        "description": "ObjectReference is a generic reference to a Traefik resource.",
                                                                        "properties": {
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "namespace": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "name"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "services": {
                                                                    "items": {
                                                                        "description": "ServiceTCP defines an upstream to proxy traffic.",
                                                                        "properties": {
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "namespace": {
                                                                                "type": "string"
                                                                            },
                                                                            "port": {
                                                                                "anyOf": [
                                                                                    {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    {
                                                                                        "type": "string"
                                                                                    }
                                                                                ],
                                                                                "x-kubernetes-int-or-string": true
                                                                            },
                                                                            "proxyProtocol": {
                                                                                "description": "ProxyProtocol holds the ProxyProtocol configuration.",
                                                                                "properties": {
                                                                                    "version": {
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "terminationDelay": {
                                                                                "type": "integer"
                                                                            },
                                                                            "weight": {
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "name",
                                                                            "port"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "required": [
                                                                "match"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "tls": {
                                                        "description": "TLSTCP contains the TLS certificates configuration of the routes. To enable Let's Encrypt, use an empty TLS struct, e.g. in YAML: \n \t tls: {} # inline format \n \t tls: \t   secretName: # block format",
                                                        "properties": {
                                                            "certResolver": {
                                                                "type": "string"
                                                            },
                                                            "domains": {
                                                                "items": {
                                                                    "description": "Domain holds a domain name with SANs.",
                                                                    "properties": {
                                                                        "main": {
                                                                            "type": "string"
                                                                        },
                                                                        "sans": {
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "options": {
                                                                "description": "Options is a reference to a TLSOption, that specifies the parameters of the TLS connection.",
                                                                "properties": {
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "namespace": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "name"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "passthrough": {
                                                                "type": "boolean"
                                                            },
                                                            "secretName": {
                                                                "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                                                "type": "string"
                                                            },
                                                            "store": {
                                                                "description": "Store is a reference to a TLSStore, that specifies the parameters of the TLS store.",
                                                                "properties": {
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "namespace": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "name"
                                                                ],
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [
                                                    "routes"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "IngressRouteTCP",
                            "listKind": "IngressRouteTCPList",
                            "plural": "ingressroutetcps",
                            "singular": "ingressroutetcp"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T00:11:00Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T00:11:01Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1alpha1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart::traefik",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": [],
                    "status": []
                },
                "aliases": [
                    "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v2:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::ingressroutetcps.traefik.containo.us"
                ]
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::tlsstores.traefik.containo.us",
                "custom": true,
                "id": "tlsstores.traefik.containo.us",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "pulumi.com/skipAwait": "true"
                        },
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "tlsstores.traefik.containo.us"
                    },
                    "spec": {
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "TLSStore",
                            "listKind": "TLSStoreList",
                            "plural": "tlsstores",
                            "singular": "tlsstore"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "TLSStore is a specification for a TLSStore resource.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "TLSStoreSpec configures a TLSStore resource.",
                                                "properties": {
                                                    "defaultCertificate": {
                                                        "description": "DefaultCertificate holds a secret name for the TLSOption resource.",
                                                        "properties": {
                                                            "secretName": {
                                                                "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "secretName"
                                                        ],
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [
                                                    "defaultCertificate"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "",
                            "plural": ""
                        },
                        "conditions": [],
                        "storedVersions": []
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "annotations": {
                                "controller-gen.kubebuilder.io/version": "v0.4.1",
                                "pulumi.com/skipAwait": "true"
                            },
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "tlsstores.traefik.containo.us"
                        },
                        "spec": {
                            "group": "traefik.containo.us",
                            "names": {
                                "kind": "TLSStore",
                                "listKind": "TLSStoreList",
                                "plural": "tlsstores",
                                "singular": "tlsstore"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "TLSStore is a specification for a TLSStore resource.",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "TLSStoreSpec configures a TLSStore resource.",
                                                    "properties": {
                                                        "defaultCertificate": {
                                                            "description": "DefaultCertificate holds a secret name for the TLSOption resource.",
                                                            "properties": {
                                                                "secretName": {
                                                                    "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "secretName"
                                                            ],
                                                            "type": "object"
                                                        }
                                                    },
                                                    "required": [
                                                        "defaultCertificate"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "metadata",
                                                "spec"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "served": true,
                                    "storage": true
                                }
                            ]
                        },
                        "status": {
                            "acceptedNames": {
                                "kind": "",
                                "plural": ""
                            },
                            "conditions": [],
                            "storedVersions": []
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.4.1\",\"pulumi.com/skipAwait\":\"true\"},\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"tlsstores.traefik.containo.us\"},\"spec\":{\"group\":\"traefik.containo.us\",\"names\":{\"kind\":\"TLSStore\",\"listKind\":\"TLSStoreList\",\"plural\":\"tlsstores\",\"singular\":\"tlsstore\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"TLSStore is a specification for a TLSStore resource.\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"TLSStoreSpec configures a TLSStore resource.\",\"properties\":{\"defaultCertificate\":{\"description\":\"DefaultCertificate holds a secret name for the TLSOption resource.\",\"properties\":{\"secretName\":{\"description\":\"SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.\",\"type\":\"string\"}},\"required\":[\"secretName\"],\"type\":\"object\"}},\"required\":[\"defaultCertificate\"],\"type\":\"object\"}},\"required\":[\"metadata\",\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true}]},\"status\":{\"acceptedNames\":{\"kind\":\"\",\"plural\":\"\"},\"conditions\":[],\"storedVersions\":[]}}\n",
                            "pulumi.com/skipAwait": "true"
                        },
                        "creationTimestamp": "2021-12-19T00:10:58Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:58Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:controller-gen.kubebuilder.io/version": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {},
                                            "f:pulumi.com/skipAwait": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:54:16Z"
                            }
                        ],
                        "name": "tlsstores.traefik.containo.us",
                        "resourceVersion": "8922815",
                        "uid": "89feda9e-a177-4be9-8c5f-7bdc878b2b67"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "TLSStore",
                            "listKind": "TLSStoreList",
                            "plural": "tlsstores",
                            "singular": "tlsstore"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "TLSStore is a specification for a TLSStore resource.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "TLSStoreSpec configures a TLSStore resource.",
                                                "properties": {
                                                    "defaultCertificate": {
                                                        "description": "DefaultCertificate holds a secret name for the TLSOption resource.",
                                                        "properties": {
                                                            "secretName": {
                                                                "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "secretName"
                                                        ],
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [
                                                    "defaultCertificate"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "TLSStore",
                            "listKind": "TLSStoreList",
                            "plural": "tlsstores",
                            "singular": "tlsstore"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T00:10:58Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T00:10:58Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1alpha1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart::traefik",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": [],
                    "status": []
                },
                "aliases": [
                    "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v2:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::tlsstores.traefik.containo.us"
                ]
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::traefik",
                "custom": true,
                "id": "traefik",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "pulumi.com/skipAwait": "true"
                        },
                        "labels": {
                            "app.kubernetes.io/instance": "traefik",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "traefik",
                            "helm.sh/chart": "traefik-10.7.1"
                        },
                        "name": "traefik"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "services",
                                "endpoints",
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "extensions",
                                "networking.k8s.io"
                            ],
                            "resources": [
                                "ingresses",
                                "ingressclasses"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "extensions",
                                "networking.k8s.io"
                            ],
                            "resources": [
                                "ingresses/status"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "traefik.containo.us"
                            ],
                            "resources": [
                                "ingressroutes",
                                "ingressroutetcps",
                                "ingressrouteudps",
                                "middlewares",
                                "middlewaretcps",
                                "tlsoptions",
                                "tlsstores",
                                "traefikservices",
                                "serverstransports"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "annotations": {
                                "pulumi.com/skipAwait": "true"
                            },
                            "labels": {
                                "app.kubernetes.io/instance": "traefik",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "traefik",
                                "helm.sh/chart": "traefik-10.7.1"
                            },
                            "name": "traefik"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "services",
                                    "endpoints",
                                    "secrets"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "extensions",
                                    "networking.k8s.io"
                                ],
                                "resources": [
                                    "ingresses",
                                    "ingressclasses"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "extensions",
                                    "networking.k8s.io"
                                ],
                                "resources": [
                                    "ingresses/status"
                                ],
                                "verbs": [
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "traefik.containo.us"
                                ],
                                "resources": [
                                    "ingressroutes",
                                    "ingressroutetcps",
                                    "ingressrouteudps",
                                    "middlewares",
                                    "middlewaretcps",
                                    "tlsoptions",
                                    "tlsstores",
                                    "traefikservices",
                                    "serverstransports"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"annotations\":{\"pulumi.com/skipAwait\":\"true\"},\"labels\":{\"app.kubernetes.io/instance\":\"traefik\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"traefik\",\"helm.sh/chart\":\"traefik-10.7.1\"},\"name\":\"traefik\"},\"rules\":[{\"apiGroups\":[\"\"],\"resources\":[\"services\",\"endpoints\",\"secrets\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"extensions\",\"networking.k8s.io\"],\"resources\":[\"ingresses\",\"ingressclasses\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"extensions\",\"networking.k8s.io\"],\"resources\":[\"ingresses/status\"],\"verbs\":[\"update\"]},{\"apiGroups\":[\"traefik.containo.us\"],\"resources\":[\"ingressroutes\",\"ingressroutetcps\",\"ingressrouteudps\",\"middlewares\",\"middlewaretcps\",\"tlsoptions\",\"tlsstores\",\"traefikservices\",\"serverstransports\"],\"verbs\":[\"get\",\"list\",\"watch\"]}]}\n",
                            "pulumi.com/skipAwait": "true"
                        },
                        "creationTimestamp": "2021-12-19T00:11:00Z",
                        "labels": {
                            "app.kubernetes.io/instance": "traefik",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "traefik",
                            "helm.sh/chart": "traefik-10.7.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {},
                                            "f:pulumi.com/skipAwait": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:helm.sh/chart": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:54:14Z"
                            }
                        ],
                        "name": "traefik",
                        "resourceVersion": "8922793",
                        "uid": "8ed891ae-875e-4365-a03a-2c3711b83e9b"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "services",
                                "endpoints",
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "extensions",
                                "networking.k8s.io"
                            ],
                            "resources": [
                                "ingresses",
                                "ingressclasses"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "extensions",
                                "networking.k8s.io"
                            ],
                            "resources": [
                                "ingresses/status"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "traefik.containo.us"
                            ],
                            "resources": [
                                "ingressroutes",
                                "ingressroutetcps",
                                "ingressrouteudps",
                                "middlewares",
                                "middlewaretcps",
                                "tlsoptions",
                                "tlsstores",
                                "traefikservices",
                                "serverstransports"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart::traefik",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "rules": []
                },
                "aliases": [
                    "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v2:Chart$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::traefik"
                ]
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::serverstransports.traefik.containo.us",
                "custom": true,
                "id": "serverstransports.traefik.containo.us",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "pulumi.com/skipAwait": "true"
                        },
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "serverstransports.traefik.containo.us"
                    },
                    "spec": {
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "ServersTransport",
                            "listKind": "ServersTransportList",
                            "plural": "serverstransports",
                            "singular": "serverstransport"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "ServersTransport is a specification for a ServersTransport resource.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "ServersTransportSpec options to configure communication between Traefik and the servers.",
                                                "properties": {
                                                    "certificatesSecrets": {
                                                        "description": "Certificates for mTLS.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "disableHTTP2": {
                                                        "description": "Disable HTTP/2 for connections with backend servers.",
                                                        "type": "boolean"
                                                    },
                                                    "forwardingTimeouts": {
                                                        "description": "Timeouts for requests forwarded to the backend servers.",
                                                        "properties": {
                                                            "dialTimeout": {
                                                                "anyOf": [
                                                                    {
                                                                        "type": "integer"
                                                                    },
                                                                    {
                                                                        "type": "string"
                                                                    }
                                                                ],
                                                                "description": "The amount of time to wait until a connection to a backend server can be established. If zero, no timeout exists.",
                                                                "x-kubernetes-int-or-string": true
                                                            },
                                                            "idleConnTimeout": {
                                                                "anyOf": [
                                                                    {
                                                                        "type": "integer"
                                                                    },
                                                                    {
                                                                        "type": "string"
                                                                    }
                                                                ],
                                                                "description": "The maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.",
                                                                "x-kubernetes-int-or-string": true
                                                            },
                                                            "responseHeaderTimeout": {
                                                                "anyOf": [
                                                                    {
                                                                        "type": "integer"
                                                                    },
                                                                    {
                                                                        "type": "string"
                                                                    }
                                                                ],
                                                                "description": "The amount of time to wait for a server's response headers after fully writing the request (including its body, if any). If zero, no timeout exists.",
                                                                "x-kubernetes-int-or-string": true
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "insecureSkipVerify": {
                                                        "description": "Disable SSL certificate verification.",
                                                        "type": "boolean"
                                                    },
                                                    "maxIdleConnsPerHost": {
                                                        "description": "If non-zero, controls the maximum idle (keep-alive) to keep per-host. If zero, DefaultMaxIdleConnsPerHost is used.",
                                                        "type": "integer"
                                                    },
                                                    "peerCertURI": {
                                                        "description": "Defines the URI used to match against SAN URIs during the server's certificate verification.",
                                                        "type": "string"
                                                    },
                                                    "rootCAsSecrets": {
                                                        "description": "Add cert file for self-signed certificate.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "serverName": {
                                                        "description": "ServerName used to contact the server.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "",
                            "plural": ""
                        },
                        "conditions": [],
                        "storedVersions": []
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "annotations": {
                                "controller-gen.kubebuilder.io/version": "v0.4.1",
                                "pulumi.com/skipAwait": "true"
                            },
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "serverstransports.traefik.containo.us"
                        },
                        "spec": {
                            "group": "traefik.containo.us",
                            "names": {
                                "kind": "ServersTransport",
                                "listKind": "ServersTransportList",
                                "plural": "serverstransports",
                                "singular": "serverstransport"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "ServersTransport is a specification for a ServersTransport resource.",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "ServersTransportSpec options to configure communication between Traefik and the servers.",
                                                    "properties": {
                                                        "certificatesSecrets": {
                                                            "description": "Certificates for mTLS.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "disableHTTP2": {
                                                            "description": "Disable HTTP/2 for connections with backend servers.",
                                                            "type": "boolean"
                                                        },
                                                        "forwardingTimeouts": {
                                                            "description": "Timeouts for requests forwarded to the backend servers.",
                                                            "properties": {
                                                                "dialTimeout": {
                                                                    "anyOf": [
                                                                        {
                                                                            "type": "integer"
                                                                        },
                                                                        {
                                                                            "type": "string"
                                                                        }
                                                                    ],
                                                                    "description": "The amount of time to wait until a connection to a backend server can be established. If zero, no timeout exists.",
                                                                    "x-kubernetes-int-or-string": true
                                                                },
                                                                "idleConnTimeout": {
                                                                    "anyOf": [
                                                                        {
                                                                            "type": "integer"
                                                                        },
                                                                        {
                                                                            "type": "string"
                                                                        }
                                                                    ],
                                                                    "description": "The maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.",
                                                                    "x-kubernetes-int-or-string": true
                                                                },
                                                                "responseHeaderTimeout": {
                                                                    "anyOf": [
                                                                        {
                                                                            "type": "integer"
                                                                        },
                                                                        {
                                                                            "type": "string"
                                                                        }
                                                                    ],
                                                                    "description": "The amount of time to wait for a server's response headers after fully writing the request (including its body, if any). If zero, no timeout exists.",
                                                                    "x-kubernetes-int-or-string": true
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "insecureSkipVerify": {
                                                            "description": "Disable SSL certificate verification.",
                                                            "type": "boolean"
                                                        },
                                                        "maxIdleConnsPerHost": {
                                                            "description": "If non-zero, controls the maximum idle (keep-alive) to keep per-host. If zero, DefaultMaxIdleConnsPerHost is used.",
                                                            "type": "integer"
                                                        },
                                                        "peerCertURI": {
                                                            "description": "Defines the URI used to match against SAN URIs during the server's certificate verification.",
                                                            "type": "string"
                                                        },
                                                        "rootCAsSecrets": {
                                                            "description": "Add cert file for self-signed certificate.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "serverName": {
                                                            "description": "ServerName used to contact the server.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "metadata",
                                                "spec"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "served": true,
                                    "storage": true
                                }
                            ]
                        },
                        "status": {
                            "acceptedNames": {
                                "kind": "",
                                "plural": ""
                            },
                            "conditions": [],
                            "storedVersions": []
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.4.1\",\"pulumi.com/skipAwait\":\"true\"},\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"serverstransports.traefik.containo.us\"},\"spec\":{\"group\":\"traefik.containo.us\",\"names\":{\"kind\":\"ServersTransport\",\"listKind\":\"ServersTransportList\",\"plural\":\"serverstransports\",\"singular\":\"serverstransport\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"ServersTransport is a specification for a ServersTransport resource.\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"ServersTransportSpec options to configure communication between Traefik and the servers.\",\"properties\":{\"certificatesSecrets\":{\"description\":\"Certificates for mTLS.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"disableHTTP2\":{\"description\":\"Disable HTTP/2 for connections with backend servers.\",\"type\":\"boolean\"},\"forwardingTimeouts\":{\"description\":\"Timeouts for requests forwarded to the backend servers.\",\"properties\":{\"dialTimeout\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"The amount of time to wait until a connection to a backend server can be established. If zero, no timeout exists.\",\"x-kubernetes-int-or-string\":true},\"idleConnTimeout\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"The maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.\",\"x-kubernetes-int-or-string\":true},\"responseHeaderTimeout\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"The amount of time to wait for a server's response headers after fully writing the request (including its body, if any). If zero, no timeout exists.\",\"x-kubernetes-int-or-string\":true}},\"type\":\"object\"},\"insecureSkipVerify\":{\"description\":\"Disable SSL certificate verification.\",\"type\":\"boolean\"},\"maxIdleConnsPerHost\":{\"description\":\"If non-zero, controls the maximum idle (keep-alive) to keep per-host. If zero, DefaultMaxIdleConnsPerHost is used.\",\"type\":\"integer\"},\"peerCertURI\":{\"description\":\"Defines the URI used to match against SAN URIs during the server's certificate verification.\",\"type\":\"string\"},\"rootCAsSecrets\":{\"description\":\"Add cert file for self-signed certificate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"serverName\":{\"description\":\"ServerName used to contact the server.\",\"type\":\"string\"}},\"type\":\"object\"}},\"required\":[\"metadata\",\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true}]},\"status\":{\"acceptedNames\":{\"kind\":\"\",\"plural\":\"\"},\"conditions\":[],\"storedVersions\":[]}}\n",
                            "pulumi.com/skipAwait": "true"
                        },
                        "creationTimestamp": "2021-12-19T00:10:59Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T00:10:59Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:controller-gen.kubebuilder.io/version": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {},
                                            "f:pulumi.com/skipAwait": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:54:17Z"
                            }
                        ],
                        "name": "serverstransports.traefik.containo.us",
                        "resourceVersion": "8922831",
                        "uid": "c50cc661-2803-4e70-b0a8-9efe0c014492"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "ServersTransport",
                            "listKind": "ServersTransportList",
                            "plural": "serverstransports",
                            "singular": "serverstransport"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "ServersTransport is a specification for a ServersTransport resource.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "ServersTransportSpec options to configure communication between Traefik and the servers.",
                                                "properties": {
                                                    "certificatesSecrets": {
                                                        "description": "Certificates for mTLS.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "disableHTTP2": {
                                                        "description": "Disable HTTP/2 for connections with backend servers.",
                                                        "type": "boolean"
                                                    },
                                                    "forwardingTimeouts": {
                                                        "description": "Timeouts for requests forwarded to the backend servers.",
                                                        "properties": {
                                                            "dialTimeout": {
                                                                "anyOf": [
                                                                    {
                                                                        "type": "integer"
                                                                    },
                                                                    {
                                                                        "type": "string"
                                                                    }
                                                                ],
                                                                "description": "The amount of time to wait until a connection to a backend server can be established. If zero, no timeout exists.",
                                                                "x-kubernetes-int-or-string": true
                                                            },
                                                            "idleConnTimeout": {
                                                                "anyOf": [
                                                                    {
                                                                        "type": "integer"
                                                                    },
                                                                    {
                                                                        "type": "string"
                                                                    }
                                                                ],
                                                                "description": "The maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.",
                                                                "x-kubernetes-int-or-string": true
                                                            },
                                                            "responseHeaderTimeout": {
                                                                "anyOf": [
                                                                    {
                                                                        "type": "integer"
                                                                    },
                                                                    {
                                                                        "type": "string"
                                                                    }
                                                                ],
                                                                "description": "The amount of time to wait for a server's response headers after fully writing the request (including its body, if any). If zero, no timeout exists.",
                                                                "x-kubernetes-int-or-string": true
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "insecureSkipVerify": {
                                                        "description": "Disable SSL certificate verification.",
                                                        "type": "boolean"
                                                    },
                                                    "maxIdleConnsPerHost": {
                                                        "description": "If non-zero, controls the maximum idle (keep-alive) to keep per-host. If zero, DefaultMaxIdleConnsPerHost is used.",
                                                        "type": "integer"
                                                    },
                                                    "peerCertURI": {
                                                        "description": "Defines the URI used to match against SAN URIs during the server's certificate verification.",
                                                        "type": "string"
                                                    },
                                                    "rootCAsSecrets": {
                                                        "description": "Add cert file for self-signed certificate.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "serverName": {
                                                        "description": "ServerName used to contact the server.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "ServersTransport",
                            "listKind": "ServersTransportList",
                            "plural": "serverstransports",
                            "singular": "serverstransport"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T00:10:59Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T00:10:59Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1alpha1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart::traefik",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": [],
                    "status": []
                },
                "aliases": [
                    "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v2:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::serverstransports.traefik.containo.us"
                ]
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::ingressroutes.traefik.containo.us",
                "custom": true,
                "id": "ingressroutes.traefik.containo.us",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "pulumi.com/skipAwait": "true"
                        },
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "ingressroutes.traefik.containo.us"
                    },
                    "spec": {
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "IngressRoute",
                            "listKind": "IngressRouteList",
                            "plural": "ingressroutes",
                            "singular": "ingressroute"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "IngressRoute is an Ingress CRD specification.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "IngressRouteSpec is a specification for a IngressRouteSpec resource.",
                                                "properties": {
                                                    "entryPoints": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "routes": {
                                                        "items": {
                                                            "description": "Route contains the set of routes.",
                                                            "properties": {
                                                                "kind": {
                                                                    "enum": [
                                                                        "Rule"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "match": {
                                                                    "type": "string"
                                                                },
                                                                "middlewares": {
                                                                    "items": {
                                                                        "description": "MiddlewareRef is a ref to the Middleware resources.",
                                                                        "properties": {
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "namespace": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "name"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "priority": {
                                                                    "type": "integer"
                                                                },
                                                                "services": {
                                                                    "items": {
                                                                        "description": "Service defines an upstream to proxy traffic.",
                                                                        "properties": {
                                                                            "kind": {
                                                                                "enum": [
                                                                                    "Service",
                                                                                    "TraefikService"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "name": {
                                                                                "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                                                                "type": "string"
                                                                            },
                                                                            "namespace": {
                                                                                "type": "string"
                                                                            },
                                                                            "passHostHeader": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "port": {
                                                                                "anyOf": [
                                                                                    {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    {
                                                                                        "type": "string"
                                                                                    }
                                                                                ],
                                                                                "x-kubernetes-int-or-string": true
                                                                            },
                                                                            "responseForwarding": {
                                                                                "description": "ResponseForwarding holds configuration for the forward of the response.",
                                                                                "properties": {
                                                                                    "flushInterval": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "scheme": {
                                                                                "type": "string"
                                                                            },
                                                                            "serversTransport": {
                                                                                "type": "string"
                                                                            },
                                                                            "sticky": {
                                                                                "description": "Sticky holds the sticky configuration.",
                                                                                "properties": {
                                                                                    "cookie": {
                                                                                        "description": "Cookie holds the sticky configuration based on cookie.",
                                                                                        "properties": {
                                                                                            "httpOnly": {
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "name": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "sameSite": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "secure": {
                                                                                                "type": "boolean"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "strategy": {
                                                                                "type": "string"
                                                                            },
                                                                            "weight": {
                                                                                "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "name"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "required": [
                                                                "kind",
                                                                "match"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "tls": {
                                                        "description": "TLS contains the TLS certificates configuration of the routes. To enable Let's Encrypt, use an empty TLS struct, e.g. in YAML: \n \t tls: {} # inline format \n \t tls: \t   secretName: # block format",
                                                        "properties": {
                                                            "certResolver": {
                                                                "type": "string"
                                                            },
                                                            "domains": {
                                                                "items": {
                                                                    "description": "Domain holds a domain name with SANs.",
                                                                    "properties": {
                                                                        "main": {
                                                                            "type": "string"
                                                                        },
                                                                        "sans": {
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "options": {
                                                                "description": "Options is a reference to a TLSOption, that specifies the parameters of the TLS connection.",
                                                                "properties": {
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "namespace": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "name"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "secretName": {
                                                                "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                                                "type": "string"
                                                            },
                                                            "store": {
                                                                "description": "Store is a reference to a TLSStore, that specifies the parameters of the TLS store.",
                                                                "properties": {
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "namespace": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "name"
                                                                ],
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [
                                                    "routes"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "",
                            "plural": ""
                        },
                        "conditions": [],
                        "storedVersions": []
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "annotations": {
                                "controller-gen.kubebuilder.io/version": "v0.4.1",
                                "pulumi.com/skipAwait": "true"
                            },
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "ingressroutes.traefik.containo.us"
                        },
                        "spec": {
                            "group": "traefik.containo.us",
                            "names": {
                                "kind": "IngressRoute",
                                "listKind": "IngressRouteList",
                                "plural": "ingressroutes",
                                "singular": "ingressroute"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "IngressRoute is an Ingress CRD specification.",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "IngressRouteSpec is a specification for a IngressRouteSpec resource.",
                                                    "properties": {
                                                        "entryPoints": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "routes": {
                                                            "items": {
                                                                "description": "Route contains the set of routes.",
                                                                "properties": {
                                                                    "kind": {
                                                                        "enum": [
                                                                            "Rule"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "match": {
                                                                        "type": "string"
                                                                    },
                                                                    "middlewares": {
                                                                        "items": {
                                                                            "description": "MiddlewareRef is a ref to the Middleware resources.",
                                                                            "properties": {
                                                                                "name": {
                                                                                    "type": "string"
                                                                                },
                                                                                "namespace": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "name"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "priority": {
                                                                        "type": "integer"
                                                                    },
                                                                    "services": {
                                                                        "items": {
                                                                            "description": "Service defines an upstream to proxy traffic.",
                                                                            "properties": {
                                                                                "kind": {
                                                                                    "enum": [
                                                                                        "Service",
                                                                                        "TraefikService"
                                                                                    ],
                                                                                    "type": "string"
                                                                                },
                                                                                "name": {
                                                                                    "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                                                                    "type": "string"
                                                                                },
                                                                                "namespace": {
                                                                                    "type": "string"
                                                                                },
                                                                                "passHostHeader": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "port": {
                                                                                    "anyOf": [
                                                                                        {
                                                                                            "type": "integer"
                                                                                        },
                                                                                        {
                                                                                            "type": "string"
                                                                                        }
                                                                                    ],
                                                                                    "x-kubernetes-int-or-string": true
                                                                                },
                                                                                "responseForwarding": {
                                                                                    "description": "ResponseForwarding holds configuration for the forward of the response.",
                                                                                    "properties": {
                                                                                        "flushInterval": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "scheme": {
                                                                                    "type": "string"
                                                                                },
                                                                                "serversTransport": {
                                                                                    "type": "string"
                                                                                },
                                                                                "sticky": {
                                                                                    "description": "Sticky holds the sticky configuration.",
                                                                                    "properties": {
                                                                                        "cookie": {
                                                                                            "description": "Cookie holds the sticky configuration based on cookie.",
                                                                                            "properties": {
                                                                                                "httpOnly": {
                                                                                                    "type": "boolean"
                                                                                                },
                                                                                                "name": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "sameSite": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "secure": {
                                                                                                    "type": "boolean"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "strategy": {
                                                                                    "type": "string"
                                                                                },
                                                                                "weight": {
                                                                                    "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "name"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "kind",
                                                                    "match"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "tls": {
                                                            "description": "TLS contains the TLS certificates configuration of the routes. To enable Let's Encrypt, use an empty TLS struct, e.g. in YAML: \n \t tls: {} # inline format \n \t tls: \t   secretName: # block format",
                                                            "properties": {
                                                                "certResolver": {
                                                                    "type": "string"
                                                                },
                                                                "domains": {
                                                                    "items": {
                                                                        "description": "Domain holds a domain name with SANs.",
                                                                        "properties": {
                                                                            "main": {
                                                                                "type": "string"
                                                                            },
                                                                            "sans": {
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "options": {
                                                                    "description": "Options is a reference to a TLSOption, that specifies the parameters of the TLS connection.",
                                                                    "properties": {
                                                                        "name": {
                                                                            "type": "string"
                                                                        },
                                                                        "namespace": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "name"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "secretName": {
                                                                    "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                                                    "type": "string"
                                                                },
                                                                "store": {
                                                                    "description": "Store is a reference to a TLSStore, that specifies the parameters of the TLS store.",
                                                                    "properties": {
                                                                        "name": {
                                                                            "type": "string"
                                                                        },
                                                                        "namespace": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "name"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "required": [
                                                        "routes"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "metadata",
                                                "spec"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "served": true,
                                    "storage": true
                                }
                            ]
                        },
                        "status": {
                            "acceptedNames": {
                                "kind": "",
                                "plural": ""
                            },
                            "conditions": [],
                            "storedVersions": []
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.4.1\",\"pulumi.com/skipAwait\":\"true\"},\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"ingressroutes.traefik.containo.us\"},\"spec\":{\"group\":\"traefik.containo.us\",\"names\":{\"kind\":\"IngressRoute\",\"listKind\":\"IngressRouteList\",\"plural\":\"ingressroutes\",\"singular\":\"ingressroute\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"IngressRoute is an Ingress CRD specification.\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"IngressRouteSpec is a specification for a IngressRouteSpec resource.\",\"properties\":{\"entryPoints\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"routes\":{\"items\":{\"description\":\"Route contains the set of routes.\",\"properties\":{\"kind\":{\"enum\":[\"Rule\"],\"type\":\"string\"},\"match\":{\"type\":\"string\"},\"middlewares\":{\"items\":{\"description\":\"MiddlewareRef is a ref to the Middleware resources.\",\"properties\":{\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"type\":\"array\"},\"priority\":{\"type\":\"integer\"},\"services\":{\"items\":{\"description\":\"Service defines an upstream to proxy traffic.\",\"properties\":{\"kind\":{\"enum\":[\"Service\",\"TraefikService\"],\"type\":\"string\"},\"name\":{\"description\":\"Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.\",\"type\":\"string\"},\"namespace\":{\"type\":\"string\"},\"passHostHeader\":{\"type\":\"boolean\"},\"port\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true},\"responseForwarding\":{\"description\":\"ResponseForwarding holds configuration for the forward of the response.\",\"properties\":{\"flushInterval\":{\"type\":\"string\"}},\"type\":\"object\"},\"scheme\":{\"type\":\"string\"},\"serversTransport\":{\"type\":\"string\"},\"sticky\":{\"description\":\"Sticky holds the sticky configuration.\",\"properties\":{\"cookie\":{\"description\":\"Cookie holds the sticky configuration based on cookie.\",\"properties\":{\"httpOnly\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"sameSite\":{\"type\":\"string\"},\"secure\":{\"type\":\"boolean\"}},\"type\":\"object\"}},\"type\":\"object\"},\"strategy\":{\"type\":\"string\"},\"weight\":{\"description\":\"Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).\",\"type\":\"integer\"}},\"required\":[\"name\"],\"type\":\"object\"},\"type\":\"array\"}},\"required\":[\"kind\",\"match\"],\"type\":\"object\"},\"type\":\"array\"},\"tls\":{\"description\":\"TLS contains the TLS certificates configuration of the routes. To enable Let's Encrypt, use an empty TLS struct, e.g. in YAML: \\n \\t tls: {} # inline format \\n \\t tls: \\t   secretName: # block format\",\"properties\":{\"certResolver\":{\"type\":\"string\"},\"domains\":{\"items\":{\"description\":\"Domain holds a domain name with SANs.\",\"properties\":{\"main\":{\"type\":\"string\"},\"sans\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"},\"type\":\"array\"},\"options\":{\"description\":\"Options is a reference to a TLSOption, that specifies the parameters of the TLS connection.\",\"properties\":{\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"secretName\":{\"description\":\"SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.\",\"type\":\"string\"},\"store\":{\"description\":\"Store is a reference to a TLSStore, that specifies the parameters of the TLS store.\",\"properties\":{\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"type\":\"object\"}},\"required\":[\"routes\"],\"type\":\"object\"}},\"required\":[\"metadata\",\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true}]},\"status\":{\"acceptedNames\":{\"kind\":\"\",\"plural\":\"\"},\"conditions\":[],\"storedVersions\":[]}}\n",
                            "pulumi.com/skipAwait": "true"
                        },
                        "creationTimestamp": "2021-12-19T00:11:00Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T00:11:00Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:controller-gen.kubebuilder.io/version": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {},
                                            "f:pulumi.com/skipAwait": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:54:18Z"
                            }
                        ],
                        "name": "ingressroutes.traefik.containo.us",
                        "resourceVersion": "8922835",
                        "uid": "15d1c90c-dfec-4160-b2f7-13ffbed116d0"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "IngressRoute",
                            "listKind": "IngressRouteList",
                            "plural": "ingressroutes",
                            "singular": "ingressroute"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "IngressRoute is an Ingress CRD specification.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "IngressRouteSpec is a specification for a IngressRouteSpec resource.",
                                                "properties": {
                                                    "entryPoints": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "routes": {
                                                        "items": {
                                                            "description": "Route contains the set of routes.",
                                                            "properties": {
                                                                "kind": {
                                                                    "enum": [
                                                                        "Rule"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "match": {
                                                                    "type": "string"
                                                                },
                                                                "middlewares": {
                                                                    "items": {
                                                                        "description": "MiddlewareRef is a ref to the Middleware resources.",
                                                                        "properties": {
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "namespace": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "name"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "priority": {
                                                                    "type": "integer"
                                                                },
                                                                "services": {
                                                                    "items": {
                                                                        "description": "Service defines an upstream to proxy traffic.",
                                                                        "properties": {
                                                                            "kind": {
                                                                                "enum": [
                                                                                    "Service",
                                                                                    "TraefikService"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "name": {
                                                                                "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                                                                "type": "string"
                                                                            },
                                                                            "namespace": {
                                                                                "type": "string"
                                                                            },
                                                                            "passHostHeader": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "port": {
                                                                                "anyOf": [
                                                                                    {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    {
                                                                                        "type": "string"
                                                                                    }
                                                                                ],
                                                                                "x-kubernetes-int-or-string": true
                                                                            },
                                                                            "responseForwarding": {
                                                                                "description": "ResponseForwarding holds configuration for the forward of the response.",
                                                                                "properties": {
                                                                                    "flushInterval": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "scheme": {
                                                                                "type": "string"
                                                                            },
                                                                            "serversTransport": {
                                                                                "type": "string"
                                                                            },
                                                                            "sticky": {
                                                                                "description": "Sticky holds the sticky configuration.",
                                                                                "properties": {
                                                                                    "cookie": {
                                                                                        "description": "Cookie holds the sticky configuration based on cookie.",
                                                                                        "properties": {
                                                                                            "httpOnly": {
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "name": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "sameSite": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "secure": {
                                                                                                "type": "boolean"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "strategy": {
                                                                                "type": "string"
                                                                            },
                                                                            "weight": {
                                                                                "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "name"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "required": [
                                                                "kind",
                                                                "match"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "tls": {
                                                        "description": "TLS contains the TLS certificates configuration of the routes. To enable Let's Encrypt, use an empty TLS struct, e.g. in YAML: \n \t tls: {} # inline format \n \t tls: \t   secretName: # block format",
                                                        "properties": {
                                                            "certResolver": {
                                                                "type": "string"
                                                            },
                                                            "domains": {
                                                                "items": {
                                                                    "description": "Domain holds a domain name with SANs.",
                                                                    "properties": {
                                                                        "main": {
                                                                            "type": "string"
                                                                        },
                                                                        "sans": {
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "options": {
                                                                "description": "Options is a reference to a TLSOption, that specifies the parameters of the TLS connection.",
                                                                "properties": {
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "namespace": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "name"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "secretName": {
                                                                "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                                                "type": "string"
                                                            },
                                                            "store": {
                                                                "description": "Store is a reference to a TLSStore, that specifies the parameters of the TLS store.",
                                                                "properties": {
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "namespace": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "name"
                                                                ],
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [
                                                    "routes"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "IngressRoute",
                            "listKind": "IngressRouteList",
                            "plural": "ingressroutes",
                            "singular": "ingressroute"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T00:11:00Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T00:11:00Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1alpha1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart::traefik",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": [],
                    "status": []
                },
                "aliases": [
                    "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v2:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::ingressroutes.traefik.containo.us"
                ]
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::traefikservices.traefik.containo.us",
                "custom": true,
                "id": "traefikservices.traefik.containo.us",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "pulumi.com/skipAwait": "true"
                        },
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "traefikservices.traefik.containo.us"
                    },
                    "spec": {
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "TraefikService",
                            "listKind": "TraefikServiceList",
                            "plural": "traefikservices",
                            "singular": "traefikservice"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "TraefikService is the specification for a service (that an IngressRoute refers to) that is usually not a terminal service (i.e. not a pod of servers), as opposed to a Kubernetes Service. That is to say, it usually refers to other (children) services, which themselves can be TraefikServices or Services.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "ServiceSpec defines whether a TraefikService is a load-balancer of services or a mirroring service.",
                                                "properties": {
                                                    "mirroring": {
                                                        "description": "Mirroring defines a mirroring service, which is composed of a main load-balancer, and a list of mirrors.",
                                                        "properties": {
                                                            "kind": {
                                                                "enum": [
                                                                    "Service",
                                                                    "TraefikService"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "maxBodySize": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "mirrors": {
                                                                "items": {
                                                                    "description": "MirrorService defines one of the mirrors of a Mirroring service.",
                                                                    "properties": {
                                                                        "kind": {
                                                                            "enum": [
                                                                                "Service",
                                                                                "TraefikService"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "name": {
                                                                            "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                                                            "type": "string"
                                                                        },
                                                                        "namespace": {
                                                                            "type": "string"
                                                                        },
                                                                        "passHostHeader": {
                                                                            "type": "boolean"
                                                                        },
                                                                        "percent": {
                                                                            "type": "integer"
                                                                        },
                                                                        "port": {
                                                                            "anyOf": [
                                                                                {
                                                                                    "type": "integer"
                                                                                },
                                                                                {
                                                                                    "type": "string"
                                                                                }
                                                                            ],
                                                                            "x-kubernetes-int-or-string": true
                                                                        },
                                                                        "responseForwarding": {
                                                                            "description": "ResponseForwarding holds configuration for the forward of the response.",
                                                                            "properties": {
                                                                                "flushInterval": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "scheme": {
                                                                            "type": "string"
                                                                        },
                                                                        "serversTransport": {
                                                                            "type": "string"
                                                                        },
                                                                        "sticky": {
                                                                            "description": "Sticky holds the sticky configuration.",
                                                                            "properties": {
                                                                                "cookie": {
                                                                                    "description": "Cookie holds the sticky configuration based on cookie.",
                                                                                    "properties": {
                                                                                        "httpOnly": {
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "sameSite": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "secure": {
                                                                                            "type": "boolean"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "strategy": {
                                                                            "type": "string"
                                                                        },
                                                                        "weight": {
                                                                            "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                                                            "type": "integer"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "name"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "name": {
                                                                "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                                                "type": "string"
                                                            },
                                                            "namespace": {
                                                                "type": "string"
                                                            },
                                                            "passHostHeader": {
                                                                "type": "boolean"
                                                            },
                                                            "port": {
                                                                "anyOf": [
                                                                    {
                                                                        "type": "integer"
                                                                    },
                                                                    {
                                                                        "type": "string"
                                                                    }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                            },
                                                            "responseForwarding": {
                                                                "description": "ResponseForwarding holds configuration for the forward of the response.",
                                                                "properties": {
                                                                    "flushInterval": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "scheme": {
                                                                "type": "string"
                                                            },
                                                            "serversTransport": {
                                                                "type": "string"
                                                            },
                                                            "sticky": {
                                                                "description": "Sticky holds the sticky configuration.",
                                                                "properties": {
                                                                    "cookie": {
                                                                        "description": "Cookie holds the sticky configuration based on cookie.",
                                                                        "properties": {
                                                                            "httpOnly": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "sameSite": {
                                                                                "type": "string"
                                                                            },
                                                                            "secure": {
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "strategy": {
                                                                "type": "string"
                                                            },
                                                            "weight": {
                                                                "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "weighted": {
                                                        "description": "WeightedRoundRobin defines a load-balancer of services.",
                                                        "properties": {
                                                            "services": {
                                                                "items": {
                                                                    "description": "Service defines an upstream to proxy traffic.",
                                                                    "properties": {
                                                                        "kind": {
                                                                            "enum": [
                                                                                "Service",
                                                                                "TraefikService"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "name": {
                                                                            "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                                                            "type": "string"
                                                                        },
                                                                        "namespace": {
                                                                            "type": "string"
                                                                        },
                                                                        "passHostHeader": {
                                                                            "type": "boolean"
                                                                        },
                                                                        "port": {
                                                                            "anyOf": [
                                                                                {
                                                                                    "type": "integer"
                                                                                },
                                                                                {
                                                                                    "type": "string"
                                                                                }
                                                                            ],
                                                                            "x-kubernetes-int-or-string": true
                                                                        },
                                                                        "responseForwarding": {
                                                                            "description": "ResponseForwarding holds configuration for the forward of the response.",
                                                                            "properties": {
                                                                                "flushInterval": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "scheme": {
                                                                            "type": "string"
                                                                        },
                                                                        "serversTransport": {
                                                                            "type": "string"
                                                                        },
                                                                        "sticky": {
                                                                            "description": "Sticky holds the sticky configuration.",
                                                                            "properties": {
                                                                                "cookie": {
                                                                                    "description": "Cookie holds the sticky configuration based on cookie.",
                                                                                    "properties": {
                                                                                        "httpOnly": {
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "sameSite": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "secure": {
                                                                                            "type": "boolean"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "strategy": {
                                                                            "type": "string"
                                                                        },
                                                                        "weight": {
                                                                            "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                                                            "type": "integer"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "name"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "sticky": {
                                                                "description": "Sticky holds the sticky configuration.",
                                                                "properties": {
                                                                    "cookie": {
                                                                        "description": "Cookie holds the sticky configuration based on cookie.",
                                                                        "properties": {
                                                                            "httpOnly": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "sameSite": {
                                                                                "type": "string"
                                                                            },
                                                                            "secure": {
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "",
                            "plural": ""
                        },
                        "conditions": [],
                        "storedVersions": []
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "annotations": {
                                "controller-gen.kubebuilder.io/version": "v0.4.1",
                                "pulumi.com/skipAwait": "true"
                            },
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "traefikservices.traefik.containo.us"
                        },
                        "spec": {
                            "group": "traefik.containo.us",
                            "names": {
                                "kind": "TraefikService",
                                "listKind": "TraefikServiceList",
                                "plural": "traefikservices",
                                "singular": "traefikservice"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "TraefikService is the specification for a service (that an IngressRoute refers to) that is usually not a terminal service (i.e. not a pod of servers), as opposed to a Kubernetes Service. That is to say, it usually refers to other (children) services, which themselves can be TraefikServices or Services.",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "ServiceSpec defines whether a TraefikService is a load-balancer of services or a mirroring service.",
                                                    "properties": {
                                                        "mirroring": {
                                                            "description": "Mirroring defines a mirroring service, which is composed of a main load-balancer, and a list of mirrors.",
                                                            "properties": {
                                                                "kind": {
                                                                    "enum": [
                                                                        "Service",
                                                                        "TraefikService"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "maxBodySize": {
                                                                    "format": "int64",
                                                                    "type": "integer"
                                                                },
                                                                "mirrors": {
                                                                    "items": {
                                                                        "description": "MirrorService defines one of the mirrors of a Mirroring service.",
                                                                        "properties": {
                                                                            "kind": {
                                                                                "enum": [
                                                                                    "Service",
                                                                                    "TraefikService"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "name": {
                                                                                "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                                                                "type": "string"
                                                                            },
                                                                            "namespace": {
                                                                                "type": "string"
                                                                            },
                                                                            "passHostHeader": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "percent": {
                                                                                "type": "integer"
                                                                            },
                                                                            "port": {
                                                                                "anyOf": [
                                                                                    {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    {
                                                                                        "type": "string"
                                                                                    }
                                                                                ],
                                                                                "x-kubernetes-int-or-string": true
                                                                            },
                                                                            "responseForwarding": {
                                                                                "description": "ResponseForwarding holds configuration for the forward of the response.",
                                                                                "properties": {
                                                                                    "flushInterval": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "scheme": {
                                                                                "type": "string"
                                                                            },
                                                                            "serversTransport": {
                                                                                "type": "string"
                                                                            },
                                                                            "sticky": {
                                                                                "description": "Sticky holds the sticky configuration.",
                                                                                "properties": {
                                                                                    "cookie": {
                                                                                        "description": "Cookie holds the sticky configuration based on cookie.",
                                                                                        "properties": {
                                                                                            "httpOnly": {
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "name": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "sameSite": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "secure": {
                                                                                                "type": "boolean"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "strategy": {
                                                                                "type": "string"
                                                                            },
                                                                            "weight": {
                                                                                "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "name"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "name": {
                                                                    "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                                                    "type": "string"
                                                                },
                                                                "namespace": {
                                                                    "type": "string"
                                                                },
                                                                "passHostHeader": {
                                                                    "type": "boolean"
                                                                },
                                                                "port": {
                                                                    "anyOf": [
                                                                        {
                                                                            "type": "integer"
                                                                        },
                                                                        {
                                                                            "type": "string"
                                                                        }
                                                                    ],
                                                                    "x-kubernetes-int-or-string": true
                                                                },
                                                                "responseForwarding": {
                                                                    "description": "ResponseForwarding holds configuration for the forward of the response.",
                                                                    "properties": {
                                                                        "flushInterval": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "scheme": {
                                                                    "type": "string"
                                                                },
                                                                "serversTransport": {
                                                                    "type": "string"
                                                                },
                                                                "sticky": {
                                                                    "description": "Sticky holds the sticky configuration.",
                                                                    "properties": {
                                                                        "cookie": {
                                                                            "description": "Cookie holds the sticky configuration based on cookie.",
                                                                            "properties": {
                                                                                "httpOnly": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "name": {
                                                                                    "type": "string"
                                                                                },
                                                                                "sameSite": {
                                                                                    "type": "string"
                                                                                },
                                                                                "secure": {
                                                                                    "type": "boolean"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "strategy": {
                                                                    "type": "string"
                                                                },
                                                                "weight": {
                                                                    "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                                                    "type": "integer"
                                                                }
                                                            },
                                                            "required": [
                                                                "name"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "weighted": {
                                                            "description": "WeightedRoundRobin defines a load-balancer of services.",
                                                            "properties": {
                                                                "services": {
                                                                    "items": {
                                                                        "description": "Service defines an upstream to proxy traffic.",
                                                                        "properties": {
                                                                            "kind": {
                                                                                "enum": [
                                                                                    "Service",
                                                                                    "TraefikService"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "name": {
                                                                                "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                                                                "type": "string"
                                                                            },
                                                                            "namespace": {
                                                                                "type": "string"
                                                                            },
                                                                            "passHostHeader": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "port": {
                                                                                "anyOf": [
                                                                                    {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    {
                                                                                        "type": "string"
                                                                                    }
                                                                                ],
                                                                                "x-kubernetes-int-or-string": true
                                                                            },
                                                                            "responseForwarding": {
                                                                                "description": "ResponseForwarding holds configuration for the forward of the response.",
                                                                                "properties": {
                                                                                    "flushInterval": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "scheme": {
                                                                                "type": "string"
                                                                            },
                                                                            "serversTransport": {
                                                                                "type": "string"
                                                                            },
                                                                            "sticky": {
                                                                                "description": "Sticky holds the sticky configuration.",
                                                                                "properties": {
                                                                                    "cookie": {
                                                                                        "description": "Cookie holds the sticky configuration based on cookie.",
                                                                                        "properties": {
                                                                                            "httpOnly": {
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "name": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "sameSite": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "secure": {
                                                                                                "type": "boolean"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "strategy": {
                                                                                "type": "string"
                                                                            },
                                                                            "weight": {
                                                                                "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "name"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "sticky": {
                                                                    "description": "Sticky holds the sticky configuration.",
                                                                    "properties": {
                                                                        "cookie": {
                                                                            "description": "Cookie holds the sticky configuration based on cookie.",
                                                                            "properties": {
                                                                                "httpOnly": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "name": {
                                                                                    "type": "string"
                                                                                },
                                                                                "sameSite": {
                                                                                    "type": "string"
                                                                                },
                                                                                "secure": {
                                                                                    "type": "boolean"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "metadata",
                                                "spec"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "served": true,
                                    "storage": true
                                }
                            ]
                        },
                        "status": {
                            "acceptedNames": {
                                "kind": "",
                                "plural": ""
                            },
                            "conditions": [],
                            "storedVersions": []
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.4.1\",\"pulumi.com/skipAwait\":\"true\"},\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"traefikservices.traefik.containo.us\"},\"spec\":{\"group\":\"traefik.containo.us\",\"names\":{\"kind\":\"TraefikService\",\"listKind\":\"TraefikServiceList\",\"plural\":\"traefikservices\",\"singular\":\"traefikservice\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"TraefikService is the specification for a service (that an IngressRoute refers to) that is usually not a terminal service (i.e. not a pod of servers), as opposed to a Kubernetes Service. That is to say, it usually refers to other (children) services, which themselves can be TraefikServices or Services.\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"ServiceSpec defines whether a TraefikService is a load-balancer of services or a mirroring service.\",\"properties\":{\"mirroring\":{\"description\":\"Mirroring defines a mirroring service, which is composed of a main load-balancer, and a list of mirrors.\",\"properties\":{\"kind\":{\"enum\":[\"Service\",\"TraefikService\"],\"type\":\"string\"},\"maxBodySize\":{\"format\":\"int64\",\"type\":\"integer\"},\"mirrors\":{\"items\":{\"description\":\"MirrorService defines one of the mirrors of a Mirroring service.\",\"properties\":{\"kind\":{\"enum\":[\"Service\",\"TraefikService\"],\"type\":\"string\"},\"name\":{\"description\":\"Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.\",\"type\":\"string\"},\"namespace\":{\"type\":\"string\"},\"passHostHeader\":{\"type\":\"boolean\"},\"percent\":{\"type\":\"integer\"},\"port\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true},\"responseForwarding\":{\"description\":\"ResponseForwarding holds configuration for the forward of the response.\",\"properties\":{\"flushInterval\":{\"type\":\"string\"}},\"type\":\"object\"},\"scheme\":{\"type\":\"string\"},\"serversTransport\":{\"type\":\"string\"},\"sticky\":{\"description\":\"Sticky holds the sticky configuration.\",\"properties\":{\"cookie\":{\"description\":\"Cookie holds the sticky configuration based on cookie.\",\"properties\":{\"httpOnly\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"sameSite\":{\"type\":\"string\"},\"secure\":{\"type\":\"boolean\"}},\"type\":\"object\"}},\"type\":\"object\"},\"strategy\":{\"type\":\"string\"},\"weight\":{\"description\":\"Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).\",\"type\":\"integer\"}},\"required\":[\"name\"],\"type\":\"object\"},\"type\":\"array\"},\"name\":{\"description\":\"Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.\",\"type\":\"string\"},\"namespace\":{\"type\":\"string\"},\"passHostHeader\":{\"type\":\"boolean\"},\"port\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true},\"responseForwarding\":{\"description\":\"ResponseForwarding holds configuration for the forward of the response.\",\"properties\":{\"flushInterval\":{\"type\":\"string\"}},\"type\":\"object\"},\"scheme\":{\"type\":\"string\"},\"serversTransport\":{\"type\":\"string\"},\"sticky\":{\"description\":\"Sticky holds the sticky configuration.\",\"properties\":{\"cookie\":{\"description\":\"Cookie holds the sticky configuration based on cookie.\",\"properties\":{\"httpOnly\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"sameSite\":{\"type\":\"string\"},\"secure\":{\"type\":\"boolean\"}},\"type\":\"object\"}},\"type\":\"object\"},\"strategy\":{\"type\":\"string\"},\"weight\":{\"description\":\"Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).\",\"type\":\"integer\"}},\"required\":[\"name\"],\"type\":\"object\"},\"weighted\":{\"description\":\"WeightedRoundRobin defines a load-balancer of services.\",\"properties\":{\"services\":{\"items\":{\"description\":\"Service defines an upstream to proxy traffic.\",\"properties\":{\"kind\":{\"enum\":[\"Service\",\"TraefikService\"],\"type\":\"string\"},\"name\":{\"description\":\"Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.\",\"type\":\"string\"},\"namespace\":{\"type\":\"string\"},\"passHostHeader\":{\"type\":\"boolean\"},\"port\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true},\"responseForwarding\":{\"description\":\"ResponseForwarding holds configuration for the forward of the response.\",\"properties\":{\"flushInterval\":{\"type\":\"string\"}},\"type\":\"object\"},\"scheme\":{\"type\":\"string\"},\"serversTransport\":{\"type\":\"string\"},\"sticky\":{\"description\":\"Sticky holds the sticky configuration.\",\"properties\":{\"cookie\":{\"description\":\"Cookie holds the sticky configuration based on cookie.\",\"properties\":{\"httpOnly\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"sameSite\":{\"type\":\"string\"},\"secure\":{\"type\":\"boolean\"}},\"type\":\"object\"}},\"type\":\"object\"},\"strategy\":{\"type\":\"string\"},\"weight\":{\"description\":\"Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).\",\"type\":\"integer\"}},\"required\":[\"name\"],\"type\":\"object\"},\"type\":\"array\"},\"sticky\":{\"description\":\"Sticky holds the sticky configuration.\",\"properties\":{\"cookie\":{\"description\":\"Cookie holds the sticky configuration based on cookie.\",\"properties\":{\"httpOnly\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"sameSite\":{\"type\":\"string\"},\"secure\":{\"type\":\"boolean\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"required\":[\"metadata\",\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true}]},\"status\":{\"acceptedNames\":{\"kind\":\"\",\"plural\":\"\"},\"conditions\":[],\"storedVersions\":[]}}\n",
                            "pulumi.com/skipAwait": "true"
                        },
                        "creationTimestamp": "2021-12-19T00:11:01Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T00:11:01Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:controller-gen.kubebuilder.io/version": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {},
                                            "f:pulumi.com/skipAwait": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:54:18Z"
                            }
                        ],
                        "name": "traefikservices.traefik.containo.us",
                        "resourceVersion": "8922836",
                        "uid": "e63c682a-2673-47d1-91d1-5f2562dceb7d"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "TraefikService",
                            "listKind": "TraefikServiceList",
                            "plural": "traefikservices",
                            "singular": "traefikservice"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "TraefikService is the specification for a service (that an IngressRoute refers to) that is usually not a terminal service (i.e. not a pod of servers), as opposed to a Kubernetes Service. That is to say, it usually refers to other (children) services, which themselves can be TraefikServices or Services.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "ServiceSpec defines whether a TraefikService is a load-balancer of services or a mirroring service.",
                                                "properties": {
                                                    "mirroring": {
                                                        "description": "Mirroring defines a mirroring service, which is composed of a main load-balancer, and a list of mirrors.",
                                                        "properties": {
                                                            "kind": {
                                                                "enum": [
                                                                    "Service",
                                                                    "TraefikService"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "maxBodySize": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "mirrors": {
                                                                "items": {
                                                                    "description": "MirrorService defines one of the mirrors of a Mirroring service.",
                                                                    "properties": {
                                                                        "kind": {
                                                                            "enum": [
                                                                                "Service",
                                                                                "TraefikService"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "name": {
                                                                            "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                                                            "type": "string"
                                                                        },
                                                                        "namespace": {
                                                                            "type": "string"
                                                                        },
                                                                        "passHostHeader": {
                                                                            "type": "boolean"
                                                                        },
                                                                        "percent": {
                                                                            "type": "integer"
                                                                        },
                                                                        "port": {
                                                                            "anyOf": [
                                                                                {
                                                                                    "type": "integer"
                                                                                },
                                                                                {
                                                                                    "type": "string"
                                                                                }
                                                                            ],
                                                                            "x-kubernetes-int-or-string": true
                                                                        },
                                                                        "responseForwarding": {
                                                                            "description": "ResponseForwarding holds configuration for the forward of the response.",
                                                                            "properties": {
                                                                                "flushInterval": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "scheme": {
                                                                            "type": "string"
                                                                        },
                                                                        "serversTransport": {
                                                                            "type": "string"
                                                                        },
                                                                        "sticky": {
                                                                            "description": "Sticky holds the sticky configuration.",
                                                                            "properties": {
                                                                                "cookie": {
                                                                                    "description": "Cookie holds the sticky configuration based on cookie.",
                                                                                    "properties": {
                                                                                        "httpOnly": {
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "sameSite": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "secure": {
                                                                                            "type": "boolean"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "strategy": {
                                                                            "type": "string"
                                                                        },
                                                                        "weight": {
                                                                            "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                                                            "type": "integer"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "name"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "name": {
                                                                "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                                                "type": "string"
                                                            },
                                                            "namespace": {
                                                                "type": "string"
                                                            },
                                                            "passHostHeader": {
                                                                "type": "boolean"
                                                            },
                                                            "port": {
                                                                "anyOf": [
                                                                    {
                                                                        "type": "integer"
                                                                    },
                                                                    {
                                                                        "type": "string"
                                                                    }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                            },
                                                            "responseForwarding": {
                                                                "description": "ResponseForwarding holds configuration for the forward of the response.",
                                                                "properties": {
                                                                    "flushInterval": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "scheme": {
                                                                "type": "string"
                                                            },
                                                            "serversTransport": {
                                                                "type": "string"
                                                            },
                                                            "sticky": {
                                                                "description": "Sticky holds the sticky configuration.",
                                                                "properties": {
                                                                    "cookie": {
                                                                        "description": "Cookie holds the sticky configuration based on cookie.",
                                                                        "properties": {
                                                                            "httpOnly": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "sameSite": {
                                                                                "type": "string"
                                                                            },
                                                                            "secure": {
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "strategy": {
                                                                "type": "string"
                                                            },
                                                            "weight": {
                                                                "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "weighted": {
                                                        "description": "WeightedRoundRobin defines a load-balancer of services.",
                                                        "properties": {
                                                            "services": {
                                                                "items": {
                                                                    "description": "Service defines an upstream to proxy traffic.",
                                                                    "properties": {
                                                                        "kind": {
                                                                            "enum": [
                                                                                "Service",
                                                                                "TraefikService"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "name": {
                                                                            "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                                                            "type": "string"
                                                                        },
                                                                        "namespace": {
                                                                            "type": "string"
                                                                        },
                                                                        "passHostHeader": {
                                                                            "type": "boolean"
                                                                        },
                                                                        "port": {
                                                                            "anyOf": [
                                                                                {
                                                                                    "type": "integer"
                                                                                },
                                                                                {
                                                                                    "type": "string"
                                                                                }
                                                                            ],
                                                                            "x-kubernetes-int-or-string": true
                                                                        },
                                                                        "responseForwarding": {
                                                                            "description": "ResponseForwarding holds configuration for the forward of the response.",
                                                                            "properties": {
                                                                                "flushInterval": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "scheme": {
                                                                            "type": "string"
                                                                        },
                                                                        "serversTransport": {
                                                                            "type": "string"
                                                                        },
                                                                        "sticky": {
                                                                            "description": "Sticky holds the sticky configuration.",
                                                                            "properties": {
                                                                                "cookie": {
                                                                                    "description": "Cookie holds the sticky configuration based on cookie.",
                                                                                    "properties": {
                                                                                        "httpOnly": {
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "sameSite": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "secure": {
                                                                                            "type": "boolean"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "strategy": {
                                                                            "type": "string"
                                                                        },
                                                                        "weight": {
                                                                            "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                                                            "type": "integer"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "name"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "sticky": {
                                                                "description": "Sticky holds the sticky configuration.",
                                                                "properties": {
                                                                    "cookie": {
                                                                        "description": "Cookie holds the sticky configuration based on cookie.",
                                                                        "properties": {
                                                                            "httpOnly": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "sameSite": {
                                                                                "type": "string"
                                                                            },
                                                                            "secure": {
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "TraefikService",
                            "listKind": "TraefikServiceList",
                            "plural": "traefikservices",
                            "singular": "traefikservice"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T00:11:01Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T00:11:01Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1alpha1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart::traefik",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": [],
                    "status": []
                },
                "aliases": [
                    "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v2:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::traefikservices.traefik.containo.us"
                ]
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::middlewares.traefik.containo.us",
                "custom": true,
                "id": "middlewares.traefik.containo.us",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "pulumi.com/skipAwait": "true"
                        },
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "middlewares.traefik.containo.us"
                    },
                    "spec": {
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "Middleware",
                            "listKind": "MiddlewareList",
                            "plural": "middlewares",
                            "singular": "middleware"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "Middleware is a specification for a Middleware resource.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "MiddlewareSpec holds the Middleware configuration.",
                                                "properties": {
                                                    "addPrefix": {
                                                        "description": "AddPrefix holds the AddPrefix configuration.",
                                                        "properties": {
                                                            "prefix": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "basicAuth": {
                                                        "description": "BasicAuth holds the HTTP basic authentication configuration.",
                                                        "properties": {
                                                            "headerField": {
                                                                "type": "string"
                                                            },
                                                            "realm": {
                                                                "type": "string"
                                                            },
                                                            "removeHeader": {
                                                                "type": "boolean"
                                                            },
                                                            "secret": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "buffering": {
                                                        "description": "Buffering holds the request/response buffering configuration.",
                                                        "properties": {
                                                            "maxRequestBodyBytes": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "maxResponseBodyBytes": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "memRequestBodyBytes": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "memResponseBodyBytes": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "retryExpression": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "chain": {
                                                        "description": "Chain holds a chain of middlewares.",
                                                        "properties": {
                                                            "middlewares": {
                                                                "items": {
                                                                    "description": "MiddlewareRef is a ref to the Middleware resources.",
                                                                    "properties": {
                                                                        "name": {
                                                                            "type": "string"
                                                                        },
                                                                        "namespace": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "name"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "circuitBreaker": {
                                                        "description": "CircuitBreaker holds the circuit breaker configuration.",
                                                        "properties": {
                                                            "expression": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "compress": {
                                                        "description": "Compress holds the compress configuration.",
                                                        "properties": {
                                                            "excludedContentTypes": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "contentType": {
                                                        "description": "ContentType middleware - or rather its unique `autoDetect` option - specifies whether to let the `Content-Type` header, if it has not been set by the backend, be automatically set to a value derived from the contents of the response. As a proxy, the default behavior should be to leave the header alone, regardless of what the backend did with it. However, the historic default was to always auto-detect and set the header if it was nil, and it is going to be kept that way in order to support users currently relying on it. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.",
                                                        "properties": {
                                                            "autoDetect": {
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "digestAuth": {
                                                        "description": "DigestAuth holds the Digest HTTP authentication configuration.",
                                                        "properties": {
                                                            "headerField": {
                                                                "type": "string"
                                                            },
                                                            "realm": {
                                                                "type": "string"
                                                            },
                                                            "removeHeader": {
                                                                "type": "boolean"
                                                            },
                                                            "secret": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "errors": {
                                                        "description": "ErrorPage holds the custom error page configuration.",
                                                        "properties": {
                                                            "query": {
                                                                "type": "string"
                                                            },
                                                            "service": {
                                                                "description": "Service defines an upstream to proxy traffic.",
                                                                "properties": {
                                                                    "kind": {
                                                                        "enum": [
                                                                            "Service",
                                                                            "TraefikService"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "name": {
                                                                        "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                                                        "type": "string"
                                                                    },
                                                                    "namespace": {
                                                                        "type": "string"
                                                                    },
                                                                    "passHostHeader": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "port": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "integer"
                                                                            },
                                                                            {
                                                                                "type": "string"
                                                                            }
                                                                        ],
                                                                        "x-kubernetes-int-or-string": true
                                                                    },
                                                                    "responseForwarding": {
                                                                        "description": "ResponseForwarding holds configuration for the forward of the response.",
                                                                        "properties": {
                                                                            "flushInterval": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "scheme": {
                                                                        "type": "string"
                                                                    },
                                                                    "serversTransport": {
                                                                        "type": "string"
                                                                    },
                                                                    "sticky": {
                                                                        "description": "Sticky holds the sticky configuration.",
                                                                        "properties": {
                                                                            "cookie": {
                                                                                "description": "Cookie holds the sticky configuration based on cookie.",
                                                                                "properties": {
                                                                                    "httpOnly": {
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "sameSite": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "secure": {
                                                                                        "type": "boolean"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "strategy": {
                                                                        "type": "string"
                                                                    },
                                                                    "weight": {
                                                                        "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "name"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "status": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "forwardAuth": {
                                                        "description": "ForwardAuth holds the http forward authentication configuration.",
                                                        "properties": {
                                                            "address": {
                                                                "type": "string"
                                                            },
                                                            "authRequestHeaders": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "authResponseHeaders": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "authResponseHeadersRegex": {
                                                                "type": "string"
                                                            },
                                                            "tls": {
                                                                "description": "ClientTLS holds TLS specific configurations as client.",
                                                                "properties": {
                                                                    "caOptional": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "caSecret": {
                                                                        "type": "string"
                                                                    },
                                                                    "certSecret": {
                                                                        "type": "string"
                                                                    },
                                                                    "insecureSkipVerify": {
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "trustForwardHeader": {
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "headers": {
                                                        "description": "Headers holds the custom header configuration.",
                                                        "properties": {
                                                            "accessControlAllowCredentials": {
                                                                "description": "AccessControlAllowCredentials is only valid if true. false is ignored.",
                                                                "type": "boolean"
                                                            },
                                                            "accessControlAllowHeaders": {
                                                                "description": "AccessControlAllowHeaders must be used in response to a preflight request with Access-Control-Request-Headers set.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "accessControlAllowMethods": {
                                                                "description": "AccessControlAllowMethods must be used in response to a preflight request with Access-Control-Request-Method set.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "accessControlAllowOriginList": {
                                                                "description": "AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin \"*\".",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "accessControlAllowOriginListRegex": {
                                                                "description": "AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "accessControlExposeHeaders": {
                                                                "description": "AccessControlExposeHeaders sets valid headers for the response.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "accessControlMaxAge": {
                                                                "description": "AccessControlMaxAge sets the time that a preflight request may be cached.",
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "addVaryHeader": {
                                                                "description": "AddVaryHeader controls if the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.",
                                                                "type": "boolean"
                                                            },
                                                            "allowedHosts": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "browserXssFilter": {
                                                                "type": "boolean"
                                                            },
                                                            "contentSecurityPolicy": {
                                                                "type": "string"
                                                            },
                                                            "contentTypeNosniff": {
                                                                "type": "boolean"
                                                            },
                                                            "customBrowserXSSValue": {
                                                                "type": "string"
                                                            },
                                                            "customFrameOptionsValue": {
                                                                "type": "string"
                                                            },
                                                            "customRequestHeaders": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "type": "object"
                                                            },
                                                            "customResponseHeaders": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "type": "object"
                                                            },
                                                            "featurePolicy": {
                                                                "description": "Deprecated: use PermissionsPolicy instead.",
                                                                "type": "string"
                                                            },
                                                            "forceSTSHeader": {
                                                                "type": "boolean"
                                                            },
                                                            "frameDeny": {
                                                                "type": "boolean"
                                                            },
                                                            "hostsProxyHeaders": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "isDevelopment": {
                                                                "type": "boolean"
                                                            },
                                                            "permissionsPolicy": {
                                                                "type": "string"
                                                            },
                                                            "publicKey": {
                                                                "type": "string"
                                                            },
                                                            "referrerPolicy": {
                                                                "type": "string"
                                                            },
                                                            "sslForceHost": {
                                                                "description": "Deprecated: use RedirectRegex instead.",
                                                                "type": "boolean"
                                                            },
                                                            "sslHost": {
                                                                "description": "Deprecated: use RedirectRegex instead.",
                                                                "type": "string"
                                                            },
                                                            "sslProxyHeaders": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "type": "object"
                                                            },
                                                            "sslRedirect": {
                                                                "description": "Deprecated: use EntryPoint redirection or RedirectScheme instead.",
                                                                "type": "boolean"
                                                            },
                                                            "sslTemporaryRedirect": {
                                                                "description": "Deprecated: use EntryPoint redirection or RedirectScheme instead.",
                                                                "type": "boolean"
                                                            },
                                                            "stsIncludeSubdomains": {
                                                                "type": "boolean"
                                                            },
                                                            "stsPreload": {
                                                                "type": "boolean"
                                                            },
                                                            "stsSeconds": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "inFlightReq": {
                                                        "description": "InFlightReq limits the number of requests being processed and served concurrently.",
                                                        "properties": {
                                                            "amount": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "sourceCriterion": {
                                                                "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source. If none are set, the default is to use the request's remote address field. All fields are mutually exclusive.",
                                                                "properties": {
                                                                    "ipStrategy": {
                                                                        "description": "IPStrategy holds the ip strategy configuration.",
                                                                        "properties": {
                                                                            "depth": {
                                                                                "type": "integer"
                                                                            },
                                                                            "excludedIPs": {
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "requestHeaderName": {
                                                                        "type": "string"
                                                                    },
                                                                    "requestHost": {
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "ipWhiteList": {
                                                        "description": "IPWhiteList holds the ip white list configuration.",
                                                        "properties": {
                                                            "ipStrategy": {
                                                                "description": "IPStrategy holds the ip strategy configuration.",
                                                                "properties": {
                                                                    "depth": {
                                                                        "type": "integer"
                                                                    },
                                                                    "excludedIPs": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "sourceRange": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "passTLSClientCert": {
                                                        "description": "PassTLSClientCert holds the TLS client cert headers configuration.",
                                                        "properties": {
                                                            "info": {
                                                                "description": "TLSClientCertificateInfo holds the client TLS certificate info configuration.",
                                                                "properties": {
                                                                    "issuer": {
                                                                        "description": "TLSCLientCertificateDNInfo holds the client TLS certificate distinguished name info configuration. cf https://tools.ietf.org/html/rfc3739",
                                                                        "properties": {
                                                                            "commonName": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "country": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "domainComponent": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "locality": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "organization": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "province": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "serialNumber": {
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "notAfter": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "notBefore": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "sans": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "serialNumber": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "subject": {
                                                                        "description": "TLSCLientCertificateDNInfo holds the client TLS certificate distinguished name info configuration. cf https://tools.ietf.org/html/rfc3739",
                                                                        "properties": {
                                                                            "commonName": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "country": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "domainComponent": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "locality": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "organization": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "province": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "serialNumber": {
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "pem": {
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "plugin": {
                                                        "additionalProperties": {
                                                            "x-kubernetes-preserve-unknown-fields": true
                                                        },
                                                        "type": "object"
                                                    },
                                                    "rateLimit": {
                                                        "description": "RateLimit holds the rate limiting configuration for a given router.",
                                                        "properties": {
                                                            "average": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "burst": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "period": {
                                                                "anyOf": [
                                                                    {
                                                                        "type": "integer"
                                                                    },
                                                                    {
                                                                        "type": "string"
                                                                    }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                            },
                                                            "sourceCriterion": {
                                                                "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source. If none are set, the default is to use the request's remote address field. All fields are mutually exclusive.",
                                                                "properties": {
                                                                    "ipStrategy": {
                                                                        "description": "IPStrategy holds the ip strategy configuration.",
                                                                        "properties": {
                                                                            "depth": {
                                                                                "type": "integer"
                                                                            },
                                                                            "excludedIPs": {
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "requestHeaderName": {
                                                                        "type": "string"
                                                                    },
                                                                    "requestHost": {
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "redirectRegex": {
                                                        "description": "RedirectRegex holds the redirection configuration.",
                                                        "properties": {
                                                            "permanent": {
                                                                "type": "boolean"
                                                            },
                                                            "regex": {
                                                                "type": "string"
                                                            },
                                                            "replacement": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "redirectScheme": {
                                                        "description": "RedirectScheme holds the scheme redirection configuration.",
                                                        "properties": {
                                                            "permanent": {
                                                                "type": "boolean"
                                                            },
                                                            "port": {
                                                                "type": "string"
                                                            },
                                                            "scheme": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "replacePath": {
                                                        "description": "ReplacePath holds the ReplacePath configuration.",
                                                        "properties": {
                                                            "path": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "replacePathRegex": {
                                                        "description": "ReplacePathRegex holds the ReplacePathRegex configuration.",
                                                        "properties": {
                                                            "regex": {
                                                                "type": "string"
                                                            },
                                                            "replacement": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "retry": {
                                                        "description": "Retry holds the retry configuration.",
                                                        "properties": {
                                                            "attempts": {
                                                                "type": "integer"
                                                            },
                                                            "initialInterval": {
                                                                "anyOf": [
                                                                    {
                                                                        "type": "integer"
                                                                    },
                                                                    {
                                                                        "type": "string"
                                                                    }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "stripPrefix": {
                                                        "description": "StripPrefix holds the StripPrefix configuration.",
                                                        "properties": {
                                                            "forceSlash": {
                                                                "type": "boolean"
                                                            },
                                                            "prefixes": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "stripPrefixRegex": {
                                                        "description": "StripPrefixRegex holds the StripPrefixRegex configuration.",
                                                        "properties": {
                                                            "regex": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "",
                            "plural": ""
                        },
                        "conditions": [],
                        "storedVersions": []
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "annotations": {
                                "controller-gen.kubebuilder.io/version": "v0.4.1",
                                "pulumi.com/skipAwait": "true"
                            },
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "middlewares.traefik.containo.us"
                        },
                        "spec": {
                            "group": "traefik.containo.us",
                            "names": {
                                "kind": "Middleware",
                                "listKind": "MiddlewareList",
                                "plural": "middlewares",
                                "singular": "middleware"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "name": "v1alpha1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "Middleware is a specification for a Middleware resource.",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "MiddlewareSpec holds the Middleware configuration.",
                                                    "properties": {
                                                        "addPrefix": {
                                                            "description": "AddPrefix holds the AddPrefix configuration.",
                                                            "properties": {
                                                                "prefix": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "basicAuth": {
                                                            "description": "BasicAuth holds the HTTP basic authentication configuration.",
                                                            "properties": {
                                                                "headerField": {
                                                                    "type": "string"
                                                                },
                                                                "realm": {
                                                                    "type": "string"
                                                                },
                                                                "removeHeader": {
                                                                    "type": "boolean"
                                                                },
                                                                "secret": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "buffering": {
                                                            "description": "Buffering holds the request/response buffering configuration.",
                                                            "properties": {
                                                                "maxRequestBodyBytes": {
                                                                    "format": "int64",
                                                                    "type": "integer"
                                                                },
                                                                "maxResponseBodyBytes": {
                                                                    "format": "int64",
                                                                    "type": "integer"
                                                                },
                                                                "memRequestBodyBytes": {
                                                                    "format": "int64",
                                                                    "type": "integer"
                                                                },
                                                                "memResponseBodyBytes": {
                                                                    "format": "int64",
                                                                    "type": "integer"
                                                                },
                                                                "retryExpression": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "chain": {
                                                            "description": "Chain holds a chain of middlewares.",
                                                            "properties": {
                                                                "middlewares": {
                                                                    "items": {
                                                                        "description": "MiddlewareRef is a ref to the Middleware resources.",
                                                                        "properties": {
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "namespace": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "name"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "circuitBreaker": {
                                                            "description": "CircuitBreaker holds the circuit breaker configuration.",
                                                            "properties": {
                                                                "expression": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "compress": {
                                                            "description": "Compress holds the compress configuration.",
                                                            "properties": {
                                                                "excludedContentTypes": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "contentType": {
                                                            "description": "ContentType middleware - or rather its unique `autoDetect` option - specifies whether to let the `Content-Type` header, if it has not been set by the backend, be automatically set to a value derived from the contents of the response. As a proxy, the default behavior should be to leave the header alone, regardless of what the backend did with it. However, the historic default was to always auto-detect and set the header if it was nil, and it is going to be kept that way in order to support users currently relying on it. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.",
                                                            "properties": {
                                                                "autoDetect": {
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "digestAuth": {
                                                            "description": "DigestAuth holds the Digest HTTP authentication configuration.",
                                                            "properties": {
                                                                "headerField": {
                                                                    "type": "string"
                                                                },
                                                                "realm": {
                                                                    "type": "string"
                                                                },
                                                                "removeHeader": {
                                                                    "type": "boolean"
                                                                },
                                                                "secret": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "errors": {
                                                            "description": "ErrorPage holds the custom error page configuration.",
                                                            "properties": {
                                                                "query": {
                                                                    "type": "string"
                                                                },
                                                                "service": {
                                                                    "description": "Service defines an upstream to proxy traffic.",
                                                                    "properties": {
                                                                        "kind": {
                                                                            "enum": [
                                                                                "Service",
                                                                                "TraefikService"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "name": {
                                                                            "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                                                            "type": "string"
                                                                        },
                                                                        "namespace": {
                                                                            "type": "string"
                                                                        },
                                                                        "passHostHeader": {
                                                                            "type": "boolean"
                                                                        },
                                                                        "port": {
                                                                            "anyOf": [
                                                                                {
                                                                                    "type": "integer"
                                                                                },
                                                                                {
                                                                                    "type": "string"
                                                                                }
                                                                            ],
                                                                            "x-kubernetes-int-or-string": true
                                                                        },
                                                                        "responseForwarding": {
                                                                            "description": "ResponseForwarding holds configuration for the forward of the response.",
                                                                            "properties": {
                                                                                "flushInterval": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "scheme": {
                                                                            "type": "string"
                                                                        },
                                                                        "serversTransport": {
                                                                            "type": "string"
                                                                        },
                                                                        "sticky": {
                                                                            "description": "Sticky holds the sticky configuration.",
                                                                            "properties": {
                                                                                "cookie": {
                                                                                    "description": "Cookie holds the sticky configuration based on cookie.",
                                                                                    "properties": {
                                                                                        "httpOnly": {
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "sameSite": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "secure": {
                                                                                            "type": "boolean"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "strategy": {
                                                                            "type": "string"
                                                                        },
                                                                        "weight": {
                                                                            "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                                                            "type": "integer"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "name"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "status": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "forwardAuth": {
                                                            "description": "ForwardAuth holds the http forward authentication configuration.",
                                                            "properties": {
                                                                "address": {
                                                                    "type": "string"
                                                                },
                                                                "authRequestHeaders": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "authResponseHeaders": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "authResponseHeadersRegex": {
                                                                    "type": "string"
                                                                },
                                                                "tls": {
                                                                    "description": "ClientTLS holds TLS specific configurations as client.",
                                                                    "properties": {
                                                                        "caOptional": {
                                                                            "type": "boolean"
                                                                        },
                                                                        "caSecret": {
                                                                            "type": "string"
                                                                        },
                                                                        "certSecret": {
                                                                            "type": "string"
                                                                        },
                                                                        "insecureSkipVerify": {
                                                                            "type": "boolean"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "trustForwardHeader": {
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "headers": {
                                                            "description": "Headers holds the custom header configuration.",
                                                            "properties": {
                                                                "accessControlAllowCredentials": {
                                                                    "description": "AccessControlAllowCredentials is only valid if true. false is ignored.",
                                                                    "type": "boolean"
                                                                },
                                                                "accessControlAllowHeaders": {
                                                                    "description": "AccessControlAllowHeaders must be used in response to a preflight request with Access-Control-Request-Headers set.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "accessControlAllowMethods": {
                                                                    "description": "AccessControlAllowMethods must be used in response to a preflight request with Access-Control-Request-Method set.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "accessControlAllowOriginList": {
                                                                    "description": "AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin \"*\".",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "accessControlAllowOriginListRegex": {
                                                                    "description": "AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "accessControlExposeHeaders": {
                                                                    "description": "AccessControlExposeHeaders sets valid headers for the response.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "accessControlMaxAge": {
                                                                    "description": "AccessControlMaxAge sets the time that a preflight request may be cached.",
                                                                    "format": "int64",
                                                                    "type": "integer"
                                                                },
                                                                "addVaryHeader": {
                                                                    "description": "AddVaryHeader controls if the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.",
                                                                    "type": "boolean"
                                                                },
                                                                "allowedHosts": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "browserXssFilter": {
                                                                    "type": "boolean"
                                                                },
                                                                "contentSecurityPolicy": {
                                                                    "type": "string"
                                                                },
                                                                "contentTypeNosniff": {
                                                                    "type": "boolean"
                                                                },
                                                                "customBrowserXSSValue": {
                                                                    "type": "string"
                                                                },
                                                                "customFrameOptionsValue": {
                                                                    "type": "string"
                                                                },
                                                                "customRequestHeaders": {
                                                                    "additionalProperties": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "customResponseHeaders": {
                                                                    "additionalProperties": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "featurePolicy": {
                                                                    "description": "Deprecated: use PermissionsPolicy instead.",
                                                                    "type": "string"
                                                                },
                                                                "forceSTSHeader": {
                                                                    "type": "boolean"
                                                                },
                                                                "frameDeny": {
                                                                    "type": "boolean"
                                                                },
                                                                "hostsProxyHeaders": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "isDevelopment": {
                                                                    "type": "boolean"
                                                                },
                                                                "permissionsPolicy": {
                                                                    "type": "string"
                                                                },
                                                                "publicKey": {
                                                                    "type": "string"
                                                                },
                                                                "referrerPolicy": {
                                                                    "type": "string"
                                                                },
                                                                "sslForceHost": {
                                                                    "description": "Deprecated: use RedirectRegex instead.",
                                                                    "type": "boolean"
                                                                },
                                                                "sslHost": {
                                                                    "description": "Deprecated: use RedirectRegex instead.",
                                                                    "type": "string"
                                                                },
                                                                "sslProxyHeaders": {
                                                                    "additionalProperties": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "sslRedirect": {
                                                                    "description": "Deprecated: use EntryPoint redirection or RedirectScheme instead.",
                                                                    "type": "boolean"
                                                                },
                                                                "sslTemporaryRedirect": {
                                                                    "description": "Deprecated: use EntryPoint redirection or RedirectScheme instead.",
                                                                    "type": "boolean"
                                                                },
                                                                "stsIncludeSubdomains": {
                                                                    "type": "boolean"
                                                                },
                                                                "stsPreload": {
                                                                    "type": "boolean"
                                                                },
                                                                "stsSeconds": {
                                                                    "format": "int64",
                                                                    "type": "integer"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "inFlightReq": {
                                                            "description": "InFlightReq limits the number of requests being processed and served concurrently.",
                                                            "properties": {
                                                                "amount": {
                                                                    "format": "int64",
                                                                    "type": "integer"
                                                                },
                                                                "sourceCriterion": {
                                                                    "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source. If none are set, the default is to use the request's remote address field. All fields are mutually exclusive.",
                                                                    "properties": {
                                                                        "ipStrategy": {
                                                                            "description": "IPStrategy holds the ip strategy configuration.",
                                                                            "properties": {
                                                                                "depth": {
                                                                                    "type": "integer"
                                                                                },
                                                                                "excludedIPs": {
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "requestHeaderName": {
                                                                            "type": "string"
                                                                        },
                                                                        "requestHost": {
                                                                            "type": "boolean"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "ipWhiteList": {
                                                            "description": "IPWhiteList holds the ip white list configuration.",
                                                            "properties": {
                                                                "ipStrategy": {
                                                                    "description": "IPStrategy holds the ip strategy configuration.",
                                                                    "properties": {
                                                                        "depth": {
                                                                            "type": "integer"
                                                                        },
                                                                        "excludedIPs": {
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "sourceRange": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "passTLSClientCert": {
                                                            "description": "PassTLSClientCert holds the TLS client cert headers configuration.",
                                                            "properties": {
                                                                "info": {
                                                                    "description": "TLSClientCertificateInfo holds the client TLS certificate info configuration.",
                                                                    "properties": {
                                                                        "issuer": {
                                                                            "description": "TLSCLientCertificateDNInfo holds the client TLS certificate distinguished name info configuration. cf https://tools.ietf.org/html/rfc3739",
                                                                            "properties": {
                                                                                "commonName": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "country": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "domainComponent": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "locality": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "organization": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "province": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "serialNumber": {
                                                                                    "type": "boolean"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "notAfter": {
                                                                            "type": "boolean"
                                                                        },
                                                                        "notBefore": {
                                                                            "type": "boolean"
                                                                        },
                                                                        "sans": {
                                                                            "type": "boolean"
                                                                        },
                                                                        "serialNumber": {
                                                                            "type": "boolean"
                                                                        },
                                                                        "subject": {
                                                                            "description": "TLSCLientCertificateDNInfo holds the client TLS certificate distinguished name info configuration. cf https://tools.ietf.org/html/rfc3739",
                                                                            "properties": {
                                                                                "commonName": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "country": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "domainComponent": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "locality": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "organization": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "province": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "serialNumber": {
                                                                                    "type": "boolean"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "pem": {
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "plugin": {
                                                            "additionalProperties": {
                                                                "x-kubernetes-preserve-unknown-fields": true
                                                            },
                                                            "type": "object"
                                                        },
                                                        "rateLimit": {
                                                            "description": "RateLimit holds the rate limiting configuration for a given router.",
                                                            "properties": {
                                                                "average": {
                                                                    "format": "int64",
                                                                    "type": "integer"
                                                                },
                                                                "burst": {
                                                                    "format": "int64",
                                                                    "type": "integer"
                                                                },
                                                                "period": {
                                                                    "anyOf": [
                                                                        {
                                                                            "type": "integer"
                                                                        },
                                                                        {
                                                                            "type": "string"
                                                                        }
                                                                    ],
                                                                    "x-kubernetes-int-or-string": true
                                                                },
                                                                "sourceCriterion": {
                                                                    "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source. If none are set, the default is to use the request's remote address field. All fields are mutually exclusive.",
                                                                    "properties": {
                                                                        "ipStrategy": {
                                                                            "description": "IPStrategy holds the ip strategy configuration.",
                                                                            "properties": {
                                                                                "depth": {
                                                                                    "type": "integer"
                                                                                },
                                                                                "excludedIPs": {
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "requestHeaderName": {
                                                                            "type": "string"
                                                                        },
                                                                        "requestHost": {
                                                                            "type": "boolean"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "redirectRegex": {
                                                            "description": "RedirectRegex holds the redirection configuration.",
                                                            "properties": {
                                                                "permanent": {
                                                                    "type": "boolean"
                                                                },
                                                                "regex": {
                                                                    "type": "string"
                                                                },
                                                                "replacement": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "redirectScheme": {
                                                            "description": "RedirectScheme holds the scheme redirection configuration.",
                                                            "properties": {
                                                                "permanent": {
                                                                    "type": "boolean"
                                                                },
                                                                "port": {
                                                                    "type": "string"
                                                                },
                                                                "scheme": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "replacePath": {
                                                            "description": "ReplacePath holds the ReplacePath configuration.",
                                                            "properties": {
                                                                "path": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "replacePathRegex": {
                                                            "description": "ReplacePathRegex holds the ReplacePathRegex configuration.",
                                                            "properties": {
                                                                "regex": {
                                                                    "type": "string"
                                                                },
                                                                "replacement": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "retry": {
                                                            "description": "Retry holds the retry configuration.",
                                                            "properties": {
                                                                "attempts": {
                                                                    "type": "integer"
                                                                },
                                                                "initialInterval": {
                                                                    "anyOf": [
                                                                        {
                                                                            "type": "integer"
                                                                        },
                                                                        {
                                                                            "type": "string"
                                                                        }
                                                                    ],
                                                                    "x-kubernetes-int-or-string": true
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "stripPrefix": {
                                                            "description": "StripPrefix holds the StripPrefix configuration.",
                                                            "properties": {
                                                                "forceSlash": {
                                                                    "type": "boolean"
                                                                },
                                                                "prefixes": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "stripPrefixRegex": {
                                                            "description": "StripPrefixRegex holds the StripPrefixRegex configuration.",
                                                            "properties": {
                                                                "regex": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "metadata",
                                                "spec"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "served": true,
                                    "storage": true
                                }
                            ]
                        },
                        "status": {
                            "acceptedNames": {
                                "kind": "",
                                "plural": ""
                            },
                            "conditions": [],
                            "storedVersions": []
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "controller-gen.kubebuilder.io/version": "v0.4.1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.4.1\",\"pulumi.com/skipAwait\":\"true\"},\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"middlewares.traefik.containo.us\"},\"spec\":{\"group\":\"traefik.containo.us\",\"names\":{\"kind\":\"Middleware\",\"listKind\":\"MiddlewareList\",\"plural\":\"middlewares\",\"singular\":\"middleware\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"Middleware is a specification for a Middleware resource.\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"MiddlewareSpec holds the Middleware configuration.\",\"properties\":{\"addPrefix\":{\"description\":\"AddPrefix holds the AddPrefix configuration.\",\"properties\":{\"prefix\":{\"type\":\"string\"}},\"type\":\"object\"},\"basicAuth\":{\"description\":\"BasicAuth holds the HTTP basic authentication configuration.\",\"properties\":{\"headerField\":{\"type\":\"string\"},\"realm\":{\"type\":\"string\"},\"removeHeader\":{\"type\":\"boolean\"},\"secret\":{\"type\":\"string\"}},\"type\":\"object\"},\"buffering\":{\"description\":\"Buffering holds the request/response buffering configuration.\",\"properties\":{\"maxRequestBodyBytes\":{\"format\":\"int64\",\"type\":\"integer\"},\"maxResponseBodyBytes\":{\"format\":\"int64\",\"type\":\"integer\"},\"memRequestBodyBytes\":{\"format\":\"int64\",\"type\":\"integer\"},\"memResponseBodyBytes\":{\"format\":\"int64\",\"type\":\"integer\"},\"retryExpression\":{\"type\":\"string\"}},\"type\":\"object\"},\"chain\":{\"description\":\"Chain holds a chain of middlewares.\",\"properties\":{\"middlewares\":{\"items\":{\"description\":\"MiddlewareRef is a ref to the Middleware resources.\",\"properties\":{\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"circuitBreaker\":{\"description\":\"CircuitBreaker holds the circuit breaker configuration.\",\"properties\":{\"expression\":{\"type\":\"string\"}},\"type\":\"object\"},\"compress\":{\"description\":\"Compress holds the compress configuration.\",\"properties\":{\"excludedContentTypes\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"},\"contentType\":{\"description\":\"ContentType middleware - or rather its unique `autoDetect` option - specifies whether to let the `Content-Type` header, if it has not been set by the backend, be automatically set to a value derived from the contents of the response. As a proxy, the default behavior should be to leave the header alone, regardless of what the backend did with it. However, the historic default was to always auto-detect and set the header if it was nil, and it is going to be kept that way in order to support users currently relying on it. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.\",\"properties\":{\"autoDetect\":{\"type\":\"boolean\"}},\"type\":\"object\"},\"digestAuth\":{\"description\":\"DigestAuth holds the Digest HTTP authentication configuration.\",\"properties\":{\"headerField\":{\"type\":\"string\"},\"realm\":{\"type\":\"string\"},\"removeHeader\":{\"type\":\"boolean\"},\"secret\":{\"type\":\"string\"}},\"type\":\"object\"},\"errors\":{\"description\":\"ErrorPage holds the custom error page configuration.\",\"properties\":{\"query\":{\"type\":\"string\"},\"service\":{\"description\":\"Service defines an upstream to proxy traffic.\",\"properties\":{\"kind\":{\"enum\":[\"Service\",\"TraefikService\"],\"type\":\"string\"},\"name\":{\"description\":\"Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.\",\"type\":\"string\"},\"namespace\":{\"type\":\"string\"},\"passHostHeader\":{\"type\":\"boolean\"},\"port\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true},\"responseForwarding\":{\"description\":\"ResponseForwarding holds configuration for the forward of the response.\",\"properties\":{\"flushInterval\":{\"type\":\"string\"}},\"type\":\"object\"},\"scheme\":{\"type\":\"string\"},\"serversTransport\":{\"type\":\"string\"},\"sticky\":{\"description\":\"Sticky holds the sticky configuration.\",\"properties\":{\"cookie\":{\"description\":\"Cookie holds the sticky configuration based on cookie.\",\"properties\":{\"httpOnly\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"},\"sameSite\":{\"type\":\"string\"},\"secure\":{\"type\":\"boolean\"}},\"type\":\"object\"}},\"type\":\"object\"},\"strategy\":{\"type\":\"string\"},\"weight\":{\"description\":\"Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).\",\"type\":\"integer\"}},\"required\":[\"name\"],\"type\":\"object\"},\"status\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"},\"forwardAuth\":{\"description\":\"ForwardAuth holds the http forward authentication configuration.\",\"properties\":{\"address\":{\"type\":\"string\"},\"authRequestHeaders\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"authResponseHeaders\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"authResponseHeadersRegex\":{\"type\":\"string\"},\"tls\":{\"description\":\"ClientTLS holds TLS specific configurations as client.\",\"properties\":{\"caOptional\":{\"type\":\"boolean\"},\"caSecret\":{\"type\":\"string\"},\"certSecret\":{\"type\":\"string\"},\"insecureSkipVerify\":{\"type\":\"boolean\"}},\"type\":\"object\"},\"trustForwardHeader\":{\"type\":\"boolean\"}},\"type\":\"object\"},\"headers\":{\"description\":\"Headers holds the custom header configuration.\",\"properties\":{\"accessControlAllowCredentials\":{\"description\":\"AccessControlAllowCredentials is only valid if true. false is ignored.\",\"type\":\"boolean\"},\"accessControlAllowHeaders\":{\"description\":\"AccessControlAllowHeaders must be used in response to a preflight request with Access-Control-Request-Headers set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"accessControlAllowMethods\":{\"description\":\"AccessControlAllowMethods must be used in response to a preflight request with Access-Control-Request-Method set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"accessControlAllowOriginList\":{\"description\":\"AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin \\\"*\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"accessControlAllowOriginListRegex\":{\"description\":\"AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"accessControlExposeHeaders\":{\"description\":\"AccessControlExposeHeaders sets valid headers for the response.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"accessControlMaxAge\":{\"description\":\"AccessControlMaxAge sets the time that a preflight request may be cached.\",\"format\":\"int64\",\"type\":\"integer\"},\"addVaryHeader\":{\"description\":\"AddVaryHeader controls if the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.\",\"type\":\"boolean\"},\"allowedHosts\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"browserXssFilter\":{\"type\":\"boolean\"},\"contentSecurityPolicy\":{\"type\":\"string\"},\"contentTypeNosniff\":{\"type\":\"boolean\"},\"customBrowserXSSValue\":{\"type\":\"string\"},\"customFrameOptionsValue\":{\"type\":\"string\"},\"customRequestHeaders\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"customResponseHeaders\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"featurePolicy\":{\"description\":\"Deprecated: use PermissionsPolicy instead.\",\"type\":\"string\"},\"forceSTSHeader\":{\"type\":\"boolean\"},\"frameDeny\":{\"type\":\"boolean\"},\"hostsProxyHeaders\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"isDevelopment\":{\"type\":\"boolean\"},\"permissionsPolicy\":{\"type\":\"string\"},\"publicKey\":{\"type\":\"string\"},\"referrerPolicy\":{\"type\":\"string\"},\"sslForceHost\":{\"description\":\"Deprecated: use RedirectRegex instead.\",\"type\":\"boolean\"},\"sslHost\":{\"description\":\"Deprecated: use RedirectRegex instead.\",\"type\":\"string\"},\"sslProxyHeaders\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"sslRedirect\":{\"description\":\"Deprecated: use EntryPoint redirection or RedirectScheme instead.\",\"type\":\"boolean\"},\"sslTemporaryRedirect\":{\"description\":\"Deprecated: use EntryPoint redirection or RedirectScheme instead.\",\"type\":\"boolean\"},\"stsIncludeSubdomains\":{\"type\":\"boolean\"},\"stsPreload\":{\"type\":\"boolean\"},\"stsSeconds\":{\"format\":\"int64\",\"type\":\"integer\"}},\"type\":\"object\"},\"inFlightReq\":{\"description\":\"InFlightReq limits the number of requests being processed and served concurrently.\",\"properties\":{\"amount\":{\"format\":\"int64\",\"type\":\"integer\"},\"sourceCriterion\":{\"description\":\"SourceCriterion defines what criterion is used to group requests as originating from a common source. If none are set, the default is to use the request's remote address field. All fields are mutually exclusive.\",\"properties\":{\"ipStrategy\":{\"description\":\"IPStrategy holds the ip strategy configuration.\",\"properties\":{\"depth\":{\"type\":\"integer\"},\"excludedIPs\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"},\"requestHeaderName\":{\"type\":\"string\"},\"requestHost\":{\"type\":\"boolean\"}},\"type\":\"object\"}},\"type\":\"object\"},\"ipWhiteList\":{\"description\":\"IPWhiteList holds the ip white list configuration.\",\"properties\":{\"ipStrategy\":{\"description\":\"IPStrategy holds the ip strategy configuration.\",\"properties\":{\"depth\":{\"type\":\"integer\"},\"excludedIPs\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"},\"sourceRange\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"},\"passTLSClientCert\":{\"description\":\"PassTLSClientCert holds the TLS client cert headers configuration.\",\"properties\":{\"info\":{\"description\":\"TLSClientCertificateInfo holds the client TLS certificate info configuration.\",\"properties\":{\"issuer\":{\"description\":\"TLSCLientCertificateDNInfo holds the client TLS certificate distinguished name info configuration. cf https://tools.ietf.org/html/rfc3739\",\"properties\":{\"commonName\":{\"type\":\"boolean\"},\"country\":{\"type\":\"boolean\"},\"domainComponent\":{\"type\":\"boolean\"},\"locality\":{\"type\":\"boolean\"},\"organization\":{\"type\":\"boolean\"},\"province\":{\"type\":\"boolean\"},\"serialNumber\":{\"type\":\"boolean\"}},\"type\":\"object\"},\"notAfter\":{\"type\":\"boolean\"},\"notBefore\":{\"type\":\"boolean\"},\"sans\":{\"type\":\"boolean\"},\"serialNumber\":{\"type\":\"boolean\"},\"subject\":{\"description\":\"TLSCLientCertificateDNInfo holds the client TLS certificate distinguished name info configuration. cf https://tools.ietf.org/html/rfc3739\",\"properties\":{\"commonName\":{\"type\":\"boolean\"},\"country\":{\"type\":\"boolean\"},\"domainComponent\":{\"type\":\"boolean\"},\"locality\":{\"type\":\"boolean\"},\"organization\":{\"type\":\"boolean\"},\"province\":{\"type\":\"boolean\"},\"serialNumber\":{\"type\":\"boolean\"}},\"type\":\"object\"}},\"type\":\"object\"},\"pem\":{\"type\":\"boolean\"}},\"type\":\"object\"},\"plugin\":{\"additionalProperties\":{\"x-kubernetes-preserve-unknown-fields\":true},\"type\":\"object\"},\"rateLimit\":{\"description\":\"RateLimit holds the rate limiting configuration for a given router.\",\"properties\":{\"average\":{\"format\":\"int64\",\"type\":\"integer\"},\"burst\":{\"format\":\"int64\",\"type\":\"integer\"},\"period\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true},\"sourceCriterion\":{\"description\":\"SourceCriterion defines what criterion is used to group requests as originating from a common source. If none are set, the default is to use the request's remote address field. All fields are mutually exclusive.\",\"properties\":{\"ipStrategy\":{\"description\":\"IPStrategy holds the ip strategy configuration.\",\"properties\":{\"depth\":{\"type\":\"integer\"},\"excludedIPs\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"},\"requestHeaderName\":{\"type\":\"string\"},\"requestHost\":{\"type\":\"boolean\"}},\"type\":\"object\"}},\"type\":\"object\"},\"redirectRegex\":{\"description\":\"RedirectRegex holds the redirection configuration.\",\"properties\":{\"permanent\":{\"type\":\"boolean\"},\"regex\":{\"type\":\"string\"},\"replacement\":{\"type\":\"string\"}},\"type\":\"object\"},\"redirectScheme\":{\"description\":\"RedirectScheme holds the scheme redirection configuration.\",\"properties\":{\"permanent\":{\"type\":\"boolean\"},\"port\":{\"type\":\"string\"},\"scheme\":{\"type\":\"string\"}},\"type\":\"object\"},\"replacePath\":{\"description\":\"ReplacePath holds the ReplacePath configuration.\",\"properties\":{\"path\":{\"type\":\"string\"}},\"type\":\"object\"},\"replacePathRegex\":{\"description\":\"ReplacePathRegex holds the ReplacePathRegex configuration.\",\"properties\":{\"regex\":{\"type\":\"string\"},\"replacement\":{\"type\":\"string\"}},\"type\":\"object\"},\"retry\":{\"description\":\"Retry holds the retry configuration.\",\"properties\":{\"attempts\":{\"type\":\"integer\"},\"initialInterval\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true}},\"type\":\"object\"},\"stripPrefix\":{\"description\":\"StripPrefix holds the StripPrefix configuration.\",\"properties\":{\"forceSlash\":{\"type\":\"boolean\"},\"prefixes\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"},\"stripPrefixRegex\":{\"description\":\"StripPrefixRegex holds the StripPrefixRegex configuration.\",\"properties\":{\"regex\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"required\":[\"metadata\",\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true}]},\"status\":{\"acceptedNames\":{\"kind\":\"\",\"plural\":\"\"},\"conditions\":[],\"storedVersions\":[]}}\n",
                            "pulumi.com/skipAwait": "true"
                        },
                        "creationTimestamp": "2021-12-19T00:11:01Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-12-19T00:11:01Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:controller-gen.kubebuilder.io/version": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {},
                                            "f:pulumi.com/skipAwait": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {}
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:54:19Z"
                            }
                        ],
                        "name": "middlewares.traefik.containo.us",
                        "resourceVersion": "8922837",
                        "uid": "e85d205c-2a0c-47d2-9248-6a5c54d8f761"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "None"
                        },
                        "group": "traefik.containo.us",
                        "names": {
                            "kind": "Middleware",
                            "listKind": "MiddlewareList",
                            "plural": "middlewares",
                            "singular": "middleware"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "name": "v1alpha1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "Middleware is a specification for a Middleware resource.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "MiddlewareSpec holds the Middleware configuration.",
                                                "properties": {
                                                    "addPrefix": {
                                                        "description": "AddPrefix holds the AddPrefix configuration.",
                                                        "properties": {
                                                            "prefix": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "basicAuth": {
                                                        "description": "BasicAuth holds the HTTP basic authentication configuration.",
                                                        "properties": {
                                                            "headerField": {
                                                                "type": "string"
                                                            },
                                                            "realm": {
                                                                "type": "string"
                                                            },
                                                            "removeHeader": {
                                                                "type": "boolean"
                                                            },
                                                            "secret": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "buffering": {
                                                        "description": "Buffering holds the request/response buffering configuration.",
                                                        "properties": {
                                                            "maxRequestBodyBytes": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "maxResponseBodyBytes": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "memRequestBodyBytes": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "memResponseBodyBytes": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "retryExpression": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "chain": {
                                                        "description": "Chain holds a chain of middlewares.",
                                                        "properties": {
                                                            "middlewares": {
                                                                "items": {
                                                                    "description": "MiddlewareRef is a ref to the Middleware resources.",
                                                                    "properties": {
                                                                        "name": {
                                                                            "type": "string"
                                                                        },
                                                                        "namespace": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "name"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "circuitBreaker": {
                                                        "description": "CircuitBreaker holds the circuit breaker configuration.",
                                                        "properties": {
                                                            "expression": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "compress": {
                                                        "description": "Compress holds the compress configuration.",
                                                        "properties": {
                                                            "excludedContentTypes": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "contentType": {
                                                        "description": "ContentType middleware - or rather its unique `autoDetect` option - specifies whether to let the `Content-Type` header, if it has not been set by the backend, be automatically set to a value derived from the contents of the response. As a proxy, the default behavior should be to leave the header alone, regardless of what the backend did with it. However, the historic default was to always auto-detect and set the header if it was nil, and it is going to be kept that way in order to support users currently relying on it. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.",
                                                        "properties": {
                                                            "autoDetect": {
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "digestAuth": {
                                                        "description": "DigestAuth holds the Digest HTTP authentication configuration.",
                                                        "properties": {
                                                            "headerField": {
                                                                "type": "string"
                                                            },
                                                            "realm": {
                                                                "type": "string"
                                                            },
                                                            "removeHeader": {
                                                                "type": "boolean"
                                                            },
                                                            "secret": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "errors": {
                                                        "description": "ErrorPage holds the custom error page configuration.",
                                                        "properties": {
                                                            "query": {
                                                                "type": "string"
                                                            },
                                                            "service": {
                                                                "description": "Service defines an upstream to proxy traffic.",
                                                                "properties": {
                                                                    "kind": {
                                                                        "enum": [
                                                                            "Service",
                                                                            "TraefikService"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "name": {
                                                                        "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                                                        "type": "string"
                                                                    },
                                                                    "namespace": {
                                                                        "type": "string"
                                                                    },
                                                                    "passHostHeader": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "port": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "integer"
                                                                            },
                                                                            {
                                                                                "type": "string"
                                                                            }
                                                                        ],
                                                                        "x-kubernetes-int-or-string": true
                                                                    },
                                                                    "responseForwarding": {
                                                                        "description": "ResponseForwarding holds configuration for the forward of the response.",
                                                                        "properties": {
                                                                            "flushInterval": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "scheme": {
                                                                        "type": "string"
                                                                    },
                                                                    "serversTransport": {
                                                                        "type": "string"
                                                                    },
                                                                    "sticky": {
                                                                        "description": "Sticky holds the sticky configuration.",
                                                                        "properties": {
                                                                            "cookie": {
                                                                                "description": "Cookie holds the sticky configuration based on cookie.",
                                                                                "properties": {
                                                                                    "httpOnly": {
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "sameSite": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "secure": {
                                                                                        "type": "boolean"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "strategy": {
                                                                        "type": "string"
                                                                    },
                                                                    "weight": {
                                                                        "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "name"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "status": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "forwardAuth": {
                                                        "description": "ForwardAuth holds the http forward authentication configuration.",
                                                        "properties": {
                                                            "address": {
                                                                "type": "string"
                                                            },
                                                            "authRequestHeaders": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "authResponseHeaders": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "authResponseHeadersRegex": {
                                                                "type": "string"
                                                            },
                                                            "tls": {
                                                                "description": "ClientTLS holds TLS specific configurations as client.",
                                                                "properties": {
                                                                    "caOptional": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "caSecret": {
                                                                        "type": "string"
                                                                    },
                                                                    "certSecret": {
                                                                        "type": "string"
                                                                    },
                                                                    "insecureSkipVerify": {
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "trustForwardHeader": {
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "headers": {
                                                        "description": "Headers holds the custom header configuration.",
                                                        "properties": {
                                                            "accessControlAllowCredentials": {
                                                                "description": "AccessControlAllowCredentials is only valid if true. false is ignored.",
                                                                "type": "boolean"
                                                            },
                                                            "accessControlAllowHeaders": {
                                                                "description": "AccessControlAllowHeaders must be used in response to a preflight request with Access-Control-Request-Headers set.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "accessControlAllowMethods": {
                                                                "description": "AccessControlAllowMethods must be used in response to a preflight request with Access-Control-Request-Method set.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "accessControlAllowOriginList": {
                                                                "description": "AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin \"*\".",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "accessControlAllowOriginListRegex": {
                                                                "description": "AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "accessControlExposeHeaders": {
                                                                "description": "AccessControlExposeHeaders sets valid headers for the response.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "accessControlMaxAge": {
                                                                "description": "AccessControlMaxAge sets the time that a preflight request may be cached.",
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "addVaryHeader": {
                                                                "description": "AddVaryHeader controls if the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.",
                                                                "type": "boolean"
                                                            },
                                                            "allowedHosts": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "browserXssFilter": {
                                                                "type": "boolean"
                                                            },
                                                            "contentSecurityPolicy": {
                                                                "type": "string"
                                                            },
                                                            "contentTypeNosniff": {
                                                                "type": "boolean"
                                                            },
                                                            "customBrowserXSSValue": {
                                                                "type": "string"
                                                            },
                                                            "customFrameOptionsValue": {
                                                                "type": "string"
                                                            },
                                                            "customRequestHeaders": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "type": "object"
                                                            },
                                                            "customResponseHeaders": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "type": "object"
                                                            },
                                                            "featurePolicy": {
                                                                "description": "Deprecated: use PermissionsPolicy instead.",
                                                                "type": "string"
                                                            },
                                                            "forceSTSHeader": {
                                                                "type": "boolean"
                                                            },
                                                            "frameDeny": {
                                                                "type": "boolean"
                                                            },
                                                            "hostsProxyHeaders": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "isDevelopment": {
                                                                "type": "boolean"
                                                            },
                                                            "permissionsPolicy": {
                                                                "type": "string"
                                                            },
                                                            "publicKey": {
                                                                "type": "string"
                                                            },
                                                            "referrerPolicy": {
                                                                "type": "string"
                                                            },
                                                            "sslForceHost": {
                                                                "description": "Deprecated: use RedirectRegex instead.",
                                                                "type": "boolean"
                                                            },
                                                            "sslHost": {
                                                                "description": "Deprecated: use RedirectRegex instead.",
                                                                "type": "string"
                                                            },
                                                            "sslProxyHeaders": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "type": "object"
                                                            },
                                                            "sslRedirect": {
                                                                "description": "Deprecated: use EntryPoint redirection or RedirectScheme instead.",
                                                                "type": "boolean"
                                                            },
                                                            "sslTemporaryRedirect": {
                                                                "description": "Deprecated: use EntryPoint redirection or RedirectScheme instead.",
                                                                "type": "boolean"
                                                            },
                                                            "stsIncludeSubdomains": {
                                                                "type": "boolean"
                                                            },
                                                            "stsPreload": {
                                                                "type": "boolean"
                                                            },
                                                            "stsSeconds": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "inFlightReq": {
                                                        "description": "InFlightReq limits the number of requests being processed and served concurrently.",
                                                        "properties": {
                                                            "amount": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "sourceCriterion": {
                                                                "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source. If none are set, the default is to use the request's remote address field. All fields are mutually exclusive.",
                                                                "properties": {
                                                                    "ipStrategy": {
                                                                        "description": "IPStrategy holds the ip strategy configuration.",
                                                                        "properties": {
                                                                            "depth": {
                                                                                "type": "integer"
                                                                            },
                                                                            "excludedIPs": {
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "requestHeaderName": {
                                                                        "type": "string"
                                                                    },
                                                                    "requestHost": {
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "ipWhiteList": {
                                                        "description": "IPWhiteList holds the ip white list configuration.",
                                                        "properties": {
                                                            "ipStrategy": {
                                                                "description": "IPStrategy holds the ip strategy configuration.",
                                                                "properties": {
                                                                    "depth": {
                                                                        "type": "integer"
                                                                    },
                                                                    "excludedIPs": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "sourceRange": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "passTLSClientCert": {
                                                        "description": "PassTLSClientCert holds the TLS client cert headers configuration.",
                                                        "properties": {
                                                            "info": {
                                                                "description": "TLSClientCertificateInfo holds the client TLS certificate info configuration.",
                                                                "properties": {
                                                                    "issuer": {
                                                                        "description": "TLSCLientCertificateDNInfo holds the client TLS certificate distinguished name info configuration. cf https://tools.ietf.org/html/rfc3739",
                                                                        "properties": {
                                                                            "commonName": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "country": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "domainComponent": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "locality": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "organization": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "province": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "serialNumber": {
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "notAfter": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "notBefore": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "sans": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "serialNumber": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "subject": {
                                                                        "description": "TLSCLientCertificateDNInfo holds the client TLS certificate distinguished name info configuration. cf https://tools.ietf.org/html/rfc3739",
                                                                        "properties": {
                                                                            "commonName": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "country": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "domainComponent": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "locality": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "organization": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "province": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "serialNumber": {
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "pem": {
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "plugin": {
                                                        "additionalProperties": {
                                                            "x-kubernetes-preserve-unknown-fields": true
                                                        },
                                                        "type": "object"
                                                    },
                                                    "rateLimit": {
                                                        "description": "RateLimit holds the rate limiting configuration for a given router.",
                                                        "properties": {
                                                            "average": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "burst": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "period": {
                                                                "anyOf": [
                                                                    {
                                                                        "type": "integer"
                                                                    },
                                                                    {
                                                                        "type": "string"
                                                                    }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                            },
                                                            "sourceCriterion": {
                                                                "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source. If none are set, the default is to use the request's remote address field. All fields are mutually exclusive.",
                                                                "properties": {
                                                                    "ipStrategy": {
                                                                        "description": "IPStrategy holds the ip strategy configuration.",
                                                                        "properties": {
                                                                            "depth": {
                                                                                "type": "integer"
                                                                            },
                                                                            "excludedIPs": {
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "requestHeaderName": {
                                                                        "type": "string"
                                                                    },
                                                                    "requestHost": {
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "redirectRegex": {
                                                        "description": "RedirectRegex holds the redirection configuration.",
                                                        "properties": {
                                                            "permanent": {
                                                                "type": "boolean"
                                                            },
                                                            "regex": {
                                                                "type": "string"
                                                            },
                                                            "replacement": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "redirectScheme": {
                                                        "description": "RedirectScheme holds the scheme redirection configuration.",
                                                        "properties": {
                                                            "permanent": {
                                                                "type": "boolean"
                                                            },
                                                            "port": {
                                                                "type": "string"
                                                            },
                                                            "scheme": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "replacePath": {
                                                        "description": "ReplacePath holds the ReplacePath configuration.",
                                                        "properties": {
                                                            "path": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "replacePathRegex": {
                                                        "description": "ReplacePathRegex holds the ReplacePathRegex configuration.",
                                                        "properties": {
                                                            "regex": {
                                                                "type": "string"
                                                            },
                                                            "replacement": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "retry": {
                                                        "description": "Retry holds the retry configuration.",
                                                        "properties": {
                                                            "attempts": {
                                                                "type": "integer"
                                                            },
                                                            "initialInterval": {
                                                                "anyOf": [
                                                                    {
                                                                        "type": "integer"
                                                                    },
                                                                    {
                                                                        "type": "string"
                                                                    }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "stripPrefix": {
                                                        "description": "StripPrefix holds the StripPrefix configuration.",
                                                        "properties": {
                                                            "forceSlash": {
                                                                "type": "boolean"
                                                            },
                                                            "prefixes": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "stripPrefixRegex": {
                                                        "description": "StripPrefixRegex holds the StripPrefixRegex configuration.",
                                                        "properties": {
                                                            "regex": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "kind": "Middleware",
                            "listKind": "MiddlewareList",
                            "plural": "middlewares",
                            "singular": "middleware"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-12-19T00:11:01Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-12-19T00:11:01Z",
                                "message": "the initial names have been accepted",
                                "reason": "InitialNamesAccepted",
                                "status": "True",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1alpha1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart::traefik",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": [],
                    "status": []
                },
                "aliases": [
                    "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v2:Chart$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::middlewares.traefik.containo.us"
                ]
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart$kubernetes:core/v1:Service::traefik",
                "custom": true,
                "id": "default/traefik",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "pulumi.com/skipAwait": "true",
                            "service.beta.kubernetes.io/do-loadbalancer-certificate-id": "b516cb94-730f-4134-b5bb-5736915d0c35",
                            "service.beta.kubernetes.io/do-loadbalancer-hostname": "*.fulldeploy.dev",
                            "service.beta.kubernetes.io/do-loadbalancer-protocol": "https",
                            "service.beta.kubernetes.io/do-loadbalancer-redirect-http-to-https": "true"
                        },
                        "labels": {
                            "app.kubernetes.io/instance": "traefik",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "traefik",
                            "helm.sh/chart": "traefik-10.7.1"
                        },
                        "name": "traefik"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "web",
                                "port": 80,
                                "protocol": "TCP",
                                "targetPort": "web"
                            },
                            {
                                "name": "websecure",
                                "port": 443,
                                "protocol": "TCP",
                                "targetPort": "websecure"
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/instance": "traefik",
                            "app.kubernetes.io/name": "traefik"
                        },
                        "type": "LoadBalancer"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "annotations": {
                                "pulumi.com/skipAwait": "true",
                                "service.beta.kubernetes.io/do-loadbalancer-certificate-id": "b516cb94-730f-4134-b5bb-5736915d0c35",
                                "service.beta.kubernetes.io/do-loadbalancer-hostname": "*.fulldeploy.dev",
                                "service.beta.kubernetes.io/do-loadbalancer-protocol": "https",
                                "service.beta.kubernetes.io/do-loadbalancer-redirect-http-to-https": "true"
                            },
                            "labels": {
                                "app.kubernetes.io/instance": "traefik",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "traefik",
                                "helm.sh/chart": "traefik-10.7.1"
                            },
                            "name": "traefik"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "web",
                                    "port": 80,
                                    "protocol": "TCP",
                                    "targetPort": "web"
                                },
                                {
                                    "name": "websecure",
                                    "port": 443,
                                    "protocol": "TCP",
                                    "targetPort": "websecure"
                                }
                            ],
                            "selector": {
                                "app.kubernetes.io/instance": "traefik",
                                "app.kubernetes.io/name": "traefik"
                            },
                            "type": "LoadBalancer"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{\"pulumi.com/skipAwait\":\"true\",\"service.beta.kubernetes.io/do-loadbalancer-certificate-id\":\"b516cb94-730f-4134-b5bb-5736915d0c35\",\"service.beta.kubernetes.io/do-loadbalancer-hostname\":\"*.fulldeploy.dev\",\"service.beta.kubernetes.io/do-loadbalancer-protocol\":\"https\",\"service.beta.kubernetes.io/do-loadbalancer-redirect-http-to-https\":\"true\"},\"labels\":{\"app.kubernetes.io/instance\":\"traefik\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"traefik\",\"helm.sh/chart\":\"traefik-10.7.1\"},\"name\":\"traefik\"},\"spec\":{\"ports\":[{\"name\":\"web\",\"port\":80,\"protocol\":\"TCP\",\"targetPort\":\"web\"},{\"name\":\"websecure\",\"port\":443,\"protocol\":\"TCP\",\"targetPort\":\"websecure\"}],\"selector\":{\"app.kubernetes.io/instance\":\"traefik\",\"app.kubernetes.io/name\":\"traefik\"},\"type\":\"LoadBalancer\"}}\n",
                            "kubernetes.digitalocean.com/load-balancer-id": "e0e6e62c-cf68-418f-9b19-77e4bc76c30d",
                            "pulumi.com/skipAwait": "true",
                            "service.beta.kubernetes.io/do-loadbalancer-certificate-id": "b516cb94-730f-4134-b5bb-5736915d0c35",
                            "service.beta.kubernetes.io/do-loadbalancer-hostname": "*.fulldeploy.dev",
                            "service.beta.kubernetes.io/do-loadbalancer-protocol": "https",
                            "service.beta.kubernetes.io/do-loadbalancer-redirect-http-to-https": "true"
                        },
                        "creationTimestamp": "2021-12-19T00:11:00Z",
                        "finalizers": [
                            "service.kubernetes.io/load-balancer-cleanup"
                        ],
                        "labels": {
                            "app.kubernetes.io/instance": "traefik",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "traefik",
                            "helm.sh/chart": "traefik-10.7.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            "f:kubernetes.digitalocean.com/load-balancer-id": {}
                                        },
                                        "f:finalizers": {
                                            ".": {},
                                            "v:\"service.kubernetes.io/load-balancer-cleanup\"": {}
                                        }
                                    },
                                    "f:status": {
                                        "f:loadBalancer": {
                                            "f:ingress": {}
                                        }
                                    }
                                },
                                "manager": "digitalocean-cloud-controller-manager",
                                "operation": "Update",
                                "time": "2021-12-19T00:13:29Z"
                            },
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {},
                                            "f:pulumi.com/skipAwait": {},
                                            "f:service.beta.kubernetes.io/do-loadbalancer-certificate-id": {},
                                            "f:service.beta.kubernetes.io/do-loadbalancer-hostname": {},
                                            "f:service.beta.kubernetes.io/do-loadbalancer-protocol": {},
                                            "f:service.beta.kubernetes.io/do-loadbalancer-redirect-http-to-https": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:helm.sh/chart": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:externalTrafficPolicy": {},
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"port\":443,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            },
                                            "k:{\"port\":80,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:port": {},
                                                "f:protocol": {},
                                                "f:targetPort": {}
                                            }
                                        },
                                        "f:selector": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/name": {}
                                        },
                                        "f:sessionAffinity": {},
                                        "f:type": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:54:14Z"
                            }
                        ],
                        "name": "traefik",
                        "namespace": "default",
                        "resourceVersion": "8945891",
                        "uid": "dd3bee67-5785-44c0-bb8c-a2fc71f65485"
                    },
                    "spec": {
                        "clusterIP": "10.245.229.18",
                        "clusterIPs": [
                            "10.245.229.18"
                        ],
                        "externalTrafficPolicy": "Cluster",
                        "ipFamilies": [
                            "IPv4"
                        ],
                        "ipFamilyPolicy": "SingleStack",
                        "ports": [
                            {
                                "name": "web",
                                "nodePort": 31580,
                                "port": 80,
                                "protocol": "TCP",
                                "targetPort": "web"
                            },
                            {
                                "name": "websecure",
                                "nodePort": 30588,
                                "port": 443,
                                "protocol": "TCP",
                                "targetPort": "websecure"
                            }
                        ],
                        "selector": {
                            "app.kubernetes.io/instance": "traefik",
                            "app.kubernetes.io/name": "traefik"
                        },
                        "sessionAffinity": "None",
                        "type": "LoadBalancer"
                    },
                    "status": {
                        "loadBalancer": {
                            "ingress": [
                                {
                                    "hostname": "do-challenge.fulldeploy.dev"
                                }
                            ]
                        }
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v3:Chart::traefik",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                },
                "aliases": [
                    "urn:pulumi:dev::cluster-resources::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:Service::traefik"
                ]
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::digitalocean:index/certificate:Certificate::cert",
                "custom": true,
                "delete": true,
                "id": "cert-f9c9544",
                "type": "digitalocean:index/certificate:Certificate",
                "inputs": {
                    "__defaults": [
                        "name"
                    ],
                    "domains": [
                        "do-challenge.fulldeploy.dev"
                    ],
                    "name": "cert-f9c9544",
                    "type": "lets_encrypt"
                },
                "outputs": {
                    "__meta": "{\"schema_version\":\"1\"}",
                    "domains": [
                        "do-challenge.fulldeploy.dev"
                    ],
                    "id": "cert-f9c9544",
                    "name": "cert-f9c9544",
                    "notAfter": "2022-03-18T23:10:41Z",
                    "sha1Fingerprint": "4bdd31ea83860639dc5d268dc52920ea34277d12",
                    "state": "verified",
                    "type": "lets_encrypt",
                    "uuid": "ab9dedee-8aeb-4c65-a859-932ffbc6ad21"
                },
                "parent": "urn:pulumi:dev::cluster-resources::pulumi:pulumi:Stack::cluster-resources-dev",
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:digitalocean::default::0bc20902-3f78-4b61-8f45-9509413ad1dd",
                "propertyDependencies": {
                    "domains": [],
                    "type": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile$kubernetes:networking.k8s.io/v1:Ingress::tekton-pipelines/tekton-dashboard",
                "custom": true,
                "id": "tekton-pipelines/tekton-dashboard",
                "type": "kubernetes:networking.k8s.io/v1:Ingress",
                "inputs": {
                    "apiVersion": "networking.k8s.io/v1",
                    "kind": "Ingress",
                    "metadata": {
                        "annotations": {
                            "kubernetes.io/ingress.class": "traefik",
                            "traefik.ingress.kubernetes.io/router.entrypoints": "web, websecure"
                        },
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "tekton-dashboard",
                        "namespace": "tekton-pipelines"
                    },
                    "spec": {
                        "rules": [
                            {
                                "host": "tekton.fulldeploy.dev",
                                "http": {
                                    "paths": [
                                        {
                                            "backend": {
                                                "service": {
                                                    "name": "tekton-dashboard",
                                                    "port": {
                                                        "number": 9097
                                                    }
                                                }
                                            },
                                            "pathType": "ImplementationSpecific"
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "networking.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "networking.k8s.io/v1",
                        "kind": "Ingress",
                        "metadata": {
                            "annotations": {
                                "kubernetes.io/ingress.class": "traefik",
                                "traefik.ingress.kubernetes.io/router.entrypoints": "web, websecure"
                            },
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "tekton-dashboard",
                            "namespace": "tekton-pipelines"
                        },
                        "spec": {
                            "rules": [
                                {
                                    "host": "tekton.fulldeploy.dev",
                                    "http": {
                                        "paths": [
                                            {
                                                "backend": {
                                                    "service": {
                                                        "name": "tekton-dashboard",
                                                        "port": {
                                                            "number": 9097
                                                        }
                                                    }
                                                },
                                                "pathType": "ImplementationSpecific"
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "networking.k8s.io/v1",
                    "kind": "Ingress",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"networking.k8s.io/v1\",\"kind\":\"Ingress\",\"metadata\":{\"annotations\":{\"kubernetes.io/ingress.class\":\"traefik\",\"traefik.ingress.kubernetes.io/router.entrypoints\":\"web, websecure\"},\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"tekton-dashboard\",\"namespace\":\"tekton-pipelines\"},\"spec\":{\"rules\":[{\"host\":\"tekton.fulldeploy.dev\",\"http\":{\"paths\":[{\"backend\":{\"service\":{\"name\":\"tekton-dashboard\",\"port\":{\"number\":9097}}},\"pathType\":\"ImplementationSpecific\"}]}}]}}\n",
                            "kubernetes.io/ingress.class": "traefik",
                            "traefik.ingress.kubernetes.io/router.entrypoints": "web, websecure"
                        },
                        "creationTimestamp": "2021-12-31T19:55:01Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "networking.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {},
                                            "f:kubernetes.io/ingress.class": {},
                                            "f:traefik.ingress.kubernetes.io/router.entrypoints": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:rules": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-12-31T19:55:01Z"
                            }
                        ],
                        "name": "tekton-dashboard",
                        "namespace": "tekton-pipelines",
                        "resourceVersion": "8923198",
                        "uid": "062d8659-5001-4719-9772-61038d37e623"
                    },
                    "spec": {
                        "rules": [
                            {
                                "host": "tekton.fulldeploy.dev",
                                "http": {
                                    "paths": [
                                        {
                                            "backend": {
                                                "service": {
                                                    "name": "tekton-dashboard",
                                                    "port": {
                                                        "number": 9097
                                                    }
                                                }
                                            },
                                            "pathType": "ImplementationSpecific"
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::tekton-ingress",
                "initErrors": [
                    "resource tekton-pipelines/tekton-dashboard was successfully created, but the Kubernetes API server reported that it failed to fully initialize or become live: Resource operation was cancelled for \"tekton-dashboard\"",
                    "Ingress .status.loadBalancer field was not updated with a hostname/IP address. \n    for more information about this error, see https://pulumi.io/xdv72s"
                ],
                "provider": "urn:pulumi:dev::cluster-resources::pulumi:providers:kubernetes::default::6d4c1e0d-0b51-4b24-8dee-bf719256d890",
                "propertyDependencies": {
                    "apiVersion": [],
                    "kind": [],
                    "metadata": [],
                    "spec": []
                }
            },
            {
                "urn": "urn:pulumi:dev::cluster-resources::kubernetes:yaml:ConfigFile::tekton-configmap-pv",
                "custom": false,
                "type": "kubernetes:yaml:ConfigFile",
                "parent": "urn:pulumi:dev::cluster-resources::pulumi:pulumi:Stack::cluster-resources-dev"
            }
        ]
    }
}
